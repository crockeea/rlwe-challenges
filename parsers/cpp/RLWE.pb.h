// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RLWE.proto

#ifndef PROTOBUF_RLWE_2eproto__INCLUDED
#define PROTOBUF_RLWE_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Lol.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RLWE_2eproto();
void protobuf_AssignDesc_RLWE_2eproto();
void protobuf_ShutdownFile_RLWE_2eproto();

class SampleCont1;
class SampleDisc1;
class SampleRLWR1;
class SampleCont;
class SampleDisc;
class SampleRLWR;

// ===================================================================

class SampleCont1 : public ::google::protobuf::Message {
 public:
  SampleCont1();
  virtual ~SampleCont1();

  SampleCont1(const SampleCont1& from);

  inline SampleCont1& operator=(const SampleCont1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleCont1& default_instance();

  void Swap(SampleCont1* other);

  // implements Message ----------------------------------------------

  SampleCont1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleCont1& from);
  void MergeFrom(const SampleCont1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Rq1 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::Rq1& a() const;
  inline ::Rq1* mutable_a();
  inline ::Rq1* release_a();
  inline void set_allocated_a(::Rq1* a);

  // required .Kq1 b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::Kq1& b() const;
  inline ::Kq1* mutable_b();
  inline ::Kq1* release_b();
  inline void set_allocated_b(::Kq1* b);

  // @@protoc_insertion_point(class_scope:SampleCont1)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Rq1* a_;
  ::Kq1* b_;
  friend void  protobuf_AddDesc_RLWE_2eproto();
  friend void protobuf_AssignDesc_RLWE_2eproto();
  friend void protobuf_ShutdownFile_RLWE_2eproto();

  void InitAsDefaultInstance();
  static SampleCont1* default_instance_;
};
// -------------------------------------------------------------------

class SampleDisc1 : public ::google::protobuf::Message {
 public:
  SampleDisc1();
  virtual ~SampleDisc1();

  SampleDisc1(const SampleDisc1& from);

  inline SampleDisc1& operator=(const SampleDisc1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleDisc1& default_instance();

  void Swap(SampleDisc1* other);

  // implements Message ----------------------------------------------

  SampleDisc1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleDisc1& from);
  void MergeFrom(const SampleDisc1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Rq1 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::Rq1& a() const;
  inline ::Rq1* mutable_a();
  inline ::Rq1* release_a();
  inline void set_allocated_a(::Rq1* a);

  // required .Rq1 b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::Rq1& b() const;
  inline ::Rq1* mutable_b();
  inline ::Rq1* release_b();
  inline void set_allocated_b(::Rq1* b);

  // @@protoc_insertion_point(class_scope:SampleDisc1)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Rq1* a_;
  ::Rq1* b_;
  friend void  protobuf_AddDesc_RLWE_2eproto();
  friend void protobuf_AssignDesc_RLWE_2eproto();
  friend void protobuf_ShutdownFile_RLWE_2eproto();

  void InitAsDefaultInstance();
  static SampleDisc1* default_instance_;
};
// -------------------------------------------------------------------

class SampleRLWR1 : public ::google::protobuf::Message {
 public:
  SampleRLWR1();
  virtual ~SampleRLWR1();

  SampleRLWR1(const SampleRLWR1& from);

  inline SampleRLWR1& operator=(const SampleRLWR1& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleRLWR1& default_instance();

  void Swap(SampleRLWR1* other);

  // implements Message ----------------------------------------------

  SampleRLWR1* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleRLWR1& from);
  void MergeFrom(const SampleRLWR1& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Rq1 a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::Rq1& a() const;
  inline ::Rq1* mutable_a();
  inline ::Rq1* release_a();
  inline void set_allocated_a(::Rq1* a);

  // required .Rq1 b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::Rq1& b() const;
  inline ::Rq1* mutable_b();
  inline ::Rq1* release_b();
  inline void set_allocated_b(::Rq1* b);

  // @@protoc_insertion_point(class_scope:SampleRLWR1)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Rq1* a_;
  ::Rq1* b_;
  friend void  protobuf_AddDesc_RLWE_2eproto();
  friend void protobuf_AssignDesc_RLWE_2eproto();
  friend void protobuf_ShutdownFile_RLWE_2eproto();

  void InitAsDefaultInstance();
  static SampleRLWR1* default_instance_;
};
// -------------------------------------------------------------------

class SampleCont : public ::google::protobuf::Message {
 public:
  SampleCont();
  virtual ~SampleCont();

  SampleCont(const SampleCont& from);

  inline SampleCont& operator=(const SampleCont& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleCont& default_instance();

  void Swap(SampleCont* other);

  // implements Message ----------------------------------------------

  SampleCont* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleCont& from);
  void MergeFrom(const SampleCont& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RqProduct a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::RqProduct& a() const;
  inline ::RqProduct* mutable_a();
  inline ::RqProduct* release_a();
  inline void set_allocated_a(::RqProduct* a);

  // required .KqProduct b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::KqProduct& b() const;
  inline ::KqProduct* mutable_b();
  inline ::KqProduct* release_b();
  inline void set_allocated_b(::KqProduct* b);

  // @@protoc_insertion_point(class_scope:SampleCont)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RqProduct* a_;
  ::KqProduct* b_;
  friend void  protobuf_AddDesc_RLWE_2eproto();
  friend void protobuf_AssignDesc_RLWE_2eproto();
  friend void protobuf_ShutdownFile_RLWE_2eproto();

  void InitAsDefaultInstance();
  static SampleCont* default_instance_;
};
// -------------------------------------------------------------------

class SampleDisc : public ::google::protobuf::Message {
 public:
  SampleDisc();
  virtual ~SampleDisc();

  SampleDisc(const SampleDisc& from);

  inline SampleDisc& operator=(const SampleDisc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleDisc& default_instance();

  void Swap(SampleDisc* other);

  // implements Message ----------------------------------------------

  SampleDisc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleDisc& from);
  void MergeFrom(const SampleDisc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RqProduct a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::RqProduct& a() const;
  inline ::RqProduct* mutable_a();
  inline ::RqProduct* release_a();
  inline void set_allocated_a(::RqProduct* a);

  // required .RqProduct b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::RqProduct& b() const;
  inline ::RqProduct* mutable_b();
  inline ::RqProduct* release_b();
  inline void set_allocated_b(::RqProduct* b);

  // @@protoc_insertion_point(class_scope:SampleDisc)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RqProduct* a_;
  ::RqProduct* b_;
  friend void  protobuf_AddDesc_RLWE_2eproto();
  friend void protobuf_AssignDesc_RLWE_2eproto();
  friend void protobuf_ShutdownFile_RLWE_2eproto();

  void InitAsDefaultInstance();
  static SampleDisc* default_instance_;
};
// -------------------------------------------------------------------

class SampleRLWR : public ::google::protobuf::Message {
 public:
  SampleRLWR();
  virtual ~SampleRLWR();

  SampleRLWR(const SampleRLWR& from);

  inline SampleRLWR& operator=(const SampleRLWR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SampleRLWR& default_instance();

  void Swap(SampleRLWR* other);

  // implements Message ----------------------------------------------

  SampleRLWR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SampleRLWR& from);
  void MergeFrom(const SampleRLWR& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RqProduct a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::RqProduct& a() const;
  inline ::RqProduct* mutable_a();
  inline ::RqProduct* release_a();
  inline void set_allocated_a(::RqProduct* a);

  // required .RqProduct b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::RqProduct& b() const;
  inline ::RqProduct* mutable_b();
  inline ::RqProduct* release_b();
  inline void set_allocated_b(::RqProduct* b);

  // @@protoc_insertion_point(class_scope:SampleRLWR)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RqProduct* a_;
  ::RqProduct* b_;
  friend void  protobuf_AddDesc_RLWE_2eproto();
  friend void protobuf_AssignDesc_RLWE_2eproto();
  friend void protobuf_ShutdownFile_RLWE_2eproto();

  void InitAsDefaultInstance();
  static SampleRLWR* default_instance_;
};
// ===================================================================


// ===================================================================

// SampleCont1

// required .Rq1 a = 1;
inline bool SampleCont1::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleCont1::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleCont1::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleCont1::clear_a() {
  if (a_ != NULL) a_->::Rq1::Clear();
  clear_has_a();
}
inline const ::Rq1& SampleCont1::a() const {
  // @@protoc_insertion_point(field_get:SampleCont1.a)
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::Rq1* SampleCont1::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::Rq1;
  // @@protoc_insertion_point(field_mutable:SampleCont1.a)
  return a_;
}
inline ::Rq1* SampleCont1::release_a() {
  clear_has_a();
  ::Rq1* temp = a_;
  a_ = NULL;
  return temp;
}
inline void SampleCont1::set_allocated_a(::Rq1* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleCont1.a)
}

// required .Kq1 b = 2;
inline bool SampleCont1::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleCont1::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleCont1::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleCont1::clear_b() {
  if (b_ != NULL) b_->::Kq1::Clear();
  clear_has_b();
}
inline const ::Kq1& SampleCont1::b() const {
  // @@protoc_insertion_point(field_get:SampleCont1.b)
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
inline ::Kq1* SampleCont1::mutable_b() {
  set_has_b();
  if (b_ == NULL) b_ = new ::Kq1;
  // @@protoc_insertion_point(field_mutable:SampleCont1.b)
  return b_;
}
inline ::Kq1* SampleCont1::release_b() {
  clear_has_b();
  ::Kq1* temp = b_;
  b_ = NULL;
  return temp;
}
inline void SampleCont1::set_allocated_b(::Kq1* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleCont1.b)
}

// -------------------------------------------------------------------

// SampleDisc1

// required .Rq1 a = 1;
inline bool SampleDisc1::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleDisc1::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleDisc1::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleDisc1::clear_a() {
  if (a_ != NULL) a_->::Rq1::Clear();
  clear_has_a();
}
inline const ::Rq1& SampleDisc1::a() const {
  // @@protoc_insertion_point(field_get:SampleDisc1.a)
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::Rq1* SampleDisc1::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::Rq1;
  // @@protoc_insertion_point(field_mutable:SampleDisc1.a)
  return a_;
}
inline ::Rq1* SampleDisc1::release_a() {
  clear_has_a();
  ::Rq1* temp = a_;
  a_ = NULL;
  return temp;
}
inline void SampleDisc1::set_allocated_a(::Rq1* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleDisc1.a)
}

// required .Rq1 b = 2;
inline bool SampleDisc1::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleDisc1::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleDisc1::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleDisc1::clear_b() {
  if (b_ != NULL) b_->::Rq1::Clear();
  clear_has_b();
}
inline const ::Rq1& SampleDisc1::b() const {
  // @@protoc_insertion_point(field_get:SampleDisc1.b)
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
inline ::Rq1* SampleDisc1::mutable_b() {
  set_has_b();
  if (b_ == NULL) b_ = new ::Rq1;
  // @@protoc_insertion_point(field_mutable:SampleDisc1.b)
  return b_;
}
inline ::Rq1* SampleDisc1::release_b() {
  clear_has_b();
  ::Rq1* temp = b_;
  b_ = NULL;
  return temp;
}
inline void SampleDisc1::set_allocated_b(::Rq1* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleDisc1.b)
}

// -------------------------------------------------------------------

// SampleRLWR1

// required .Rq1 a = 1;
inline bool SampleRLWR1::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleRLWR1::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleRLWR1::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleRLWR1::clear_a() {
  if (a_ != NULL) a_->::Rq1::Clear();
  clear_has_a();
}
inline const ::Rq1& SampleRLWR1::a() const {
  // @@protoc_insertion_point(field_get:SampleRLWR1.a)
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::Rq1* SampleRLWR1::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::Rq1;
  // @@protoc_insertion_point(field_mutable:SampleRLWR1.a)
  return a_;
}
inline ::Rq1* SampleRLWR1::release_a() {
  clear_has_a();
  ::Rq1* temp = a_;
  a_ = NULL;
  return temp;
}
inline void SampleRLWR1::set_allocated_a(::Rq1* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleRLWR1.a)
}

// required .Rq1 b = 2;
inline bool SampleRLWR1::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleRLWR1::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleRLWR1::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleRLWR1::clear_b() {
  if (b_ != NULL) b_->::Rq1::Clear();
  clear_has_b();
}
inline const ::Rq1& SampleRLWR1::b() const {
  // @@protoc_insertion_point(field_get:SampleRLWR1.b)
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
inline ::Rq1* SampleRLWR1::mutable_b() {
  set_has_b();
  if (b_ == NULL) b_ = new ::Rq1;
  // @@protoc_insertion_point(field_mutable:SampleRLWR1.b)
  return b_;
}
inline ::Rq1* SampleRLWR1::release_b() {
  clear_has_b();
  ::Rq1* temp = b_;
  b_ = NULL;
  return temp;
}
inline void SampleRLWR1::set_allocated_b(::Rq1* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleRLWR1.b)
}

// -------------------------------------------------------------------

// SampleCont

// required .RqProduct a = 1;
inline bool SampleCont::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleCont::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleCont::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleCont::clear_a() {
  if (a_ != NULL) a_->::RqProduct::Clear();
  clear_has_a();
}
inline const ::RqProduct& SampleCont::a() const {
  // @@protoc_insertion_point(field_get:SampleCont.a)
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::RqProduct* SampleCont::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::RqProduct;
  // @@protoc_insertion_point(field_mutable:SampleCont.a)
  return a_;
}
inline ::RqProduct* SampleCont::release_a() {
  clear_has_a();
  ::RqProduct* temp = a_;
  a_ = NULL;
  return temp;
}
inline void SampleCont::set_allocated_a(::RqProduct* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleCont.a)
}

// required .KqProduct b = 2;
inline bool SampleCont::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleCont::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleCont::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleCont::clear_b() {
  if (b_ != NULL) b_->::KqProduct::Clear();
  clear_has_b();
}
inline const ::KqProduct& SampleCont::b() const {
  // @@protoc_insertion_point(field_get:SampleCont.b)
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
inline ::KqProduct* SampleCont::mutable_b() {
  set_has_b();
  if (b_ == NULL) b_ = new ::KqProduct;
  // @@protoc_insertion_point(field_mutable:SampleCont.b)
  return b_;
}
inline ::KqProduct* SampleCont::release_b() {
  clear_has_b();
  ::KqProduct* temp = b_;
  b_ = NULL;
  return temp;
}
inline void SampleCont::set_allocated_b(::KqProduct* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleCont.b)
}

// -------------------------------------------------------------------

// SampleDisc

// required .RqProduct a = 1;
inline bool SampleDisc::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleDisc::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleDisc::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleDisc::clear_a() {
  if (a_ != NULL) a_->::RqProduct::Clear();
  clear_has_a();
}
inline const ::RqProduct& SampleDisc::a() const {
  // @@protoc_insertion_point(field_get:SampleDisc.a)
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::RqProduct* SampleDisc::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::RqProduct;
  // @@protoc_insertion_point(field_mutable:SampleDisc.a)
  return a_;
}
inline ::RqProduct* SampleDisc::release_a() {
  clear_has_a();
  ::RqProduct* temp = a_;
  a_ = NULL;
  return temp;
}
inline void SampleDisc::set_allocated_a(::RqProduct* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleDisc.a)
}

// required .RqProduct b = 2;
inline bool SampleDisc::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleDisc::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleDisc::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleDisc::clear_b() {
  if (b_ != NULL) b_->::RqProduct::Clear();
  clear_has_b();
}
inline const ::RqProduct& SampleDisc::b() const {
  // @@protoc_insertion_point(field_get:SampleDisc.b)
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
inline ::RqProduct* SampleDisc::mutable_b() {
  set_has_b();
  if (b_ == NULL) b_ = new ::RqProduct;
  // @@protoc_insertion_point(field_mutable:SampleDisc.b)
  return b_;
}
inline ::RqProduct* SampleDisc::release_b() {
  clear_has_b();
  ::RqProduct* temp = b_;
  b_ = NULL;
  return temp;
}
inline void SampleDisc::set_allocated_b(::RqProduct* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleDisc.b)
}

// -------------------------------------------------------------------

// SampleRLWR

// required .RqProduct a = 1;
inline bool SampleRLWR::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SampleRLWR::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SampleRLWR::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SampleRLWR::clear_a() {
  if (a_ != NULL) a_->::RqProduct::Clear();
  clear_has_a();
}
inline const ::RqProduct& SampleRLWR::a() const {
  // @@protoc_insertion_point(field_get:SampleRLWR.a)
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::RqProduct* SampleRLWR::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::RqProduct;
  // @@protoc_insertion_point(field_mutable:SampleRLWR.a)
  return a_;
}
inline ::RqProduct* SampleRLWR::release_a() {
  clear_has_a();
  ::RqProduct* temp = a_;
  a_ = NULL;
  return temp;
}
inline void SampleRLWR::set_allocated_a(::RqProduct* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleRLWR.a)
}

// required .RqProduct b = 2;
inline bool SampleRLWR::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SampleRLWR::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SampleRLWR::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SampleRLWR::clear_b() {
  if (b_ != NULL) b_->::RqProduct::Clear();
  clear_has_b();
}
inline const ::RqProduct& SampleRLWR::b() const {
  // @@protoc_insertion_point(field_get:SampleRLWR.b)
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
inline ::RqProduct* SampleRLWR::mutable_b() {
  set_has_b();
  if (b_ == NULL) b_ = new ::RqProduct;
  // @@protoc_insertion_point(field_mutable:SampleRLWR.b)
  return b_;
}
inline ::RqProduct* SampleRLWR::release_b() {
  clear_has_b();
  ::RqProduct* temp = b_;
  b_ = NULL;
  return temp;
}
inline void SampleRLWR::set_allocated_b(::RqProduct* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
  // @@protoc_insertion_point(field_set_allocated:SampleRLWR.b)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RLWE_2eproto__INCLUDED
