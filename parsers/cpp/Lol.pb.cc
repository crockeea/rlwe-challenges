// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Lol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LinearRq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearRq_reflection_ = NULL;
const ::google::protobuf::Descriptor* R_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  R_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rq1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rq1_reflection_ = NULL;
const ::google::protobuf::Descriptor* Kq1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Kq1_reflection_ = NULL;
const ::google::protobuf::Descriptor* RqProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RqProduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* KqProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KqProduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* TypeRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypeRep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Lol_2eproto() {
  protobuf_AddDesc_Lol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Lol.proto");
  GOOGLE_CHECK(file != NULL);
  LinearRq_descriptor_ = file->message_type(0);
  static const int LinearRq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearRq, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearRq, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearRq, coeffs_),
  };
  LinearRq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinearRq_descriptor_,
      LinearRq::default_instance_,
      LinearRq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearRq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearRq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinearRq));
  R_descriptor_ = file->message_type(1);
  static const int R_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R, xs_),
  };
  R_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      R_descriptor_,
      R::default_instance_,
      R_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(R, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(R));
  Rq1_descriptor_ = file->message_type(2);
  static const int Rq1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rq1, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rq1, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rq1, xs_),
  };
  Rq1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rq1_descriptor_,
      Rq1::default_instance_,
      Rq1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rq1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rq1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rq1));
  Kq1_descriptor_ = file->message_type(3);
  static const int Kq1_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kq1, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kq1, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kq1, xs_),
  };
  Kq1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Kq1_descriptor_,
      Kq1::default_instance_,
      Kq1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kq1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Kq1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Kq1));
  RqProduct_descriptor_ = file->message_type(4);
  static const int RqProduct_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqProduct, rqlist_),
  };
  RqProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RqProduct_descriptor_,
      RqProduct::default_instance_,
      RqProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RqProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RqProduct));
  KqProduct_descriptor_ = file->message_type(5);
  static const int KqProduct_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KqProduct, kqlist_),
  };
  KqProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KqProduct_descriptor_,
      KqProduct::default_instance_,
      KqProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KqProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KqProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KqProduct));
  TypeRep_descriptor_ = file->message_type(6);
  static const int TypeRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeRep, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeRep, b_),
  };
  TypeRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TypeRep_descriptor_,
      TypeRep::default_instance_,
      TypeRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TypeRep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Lol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinearRq_descriptor_, &LinearRq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    R_descriptor_, &R::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rq1_descriptor_, &Rq1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Kq1_descriptor_, &Kq1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RqProduct_descriptor_, &RqProduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KqProduct_descriptor_, &KqProduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TypeRep_descriptor_, &TypeRep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Lol_2eproto() {
  delete LinearRq::default_instance_;
  delete LinearRq_reflection_;
  delete R::default_instance_;
  delete R_reflection_;
  delete Rq1::default_instance_;
  delete Rq1_reflection_;
  delete Kq1::default_instance_;
  delete Kq1_reflection_;
  delete RqProduct::default_instance_;
  delete RqProduct_reflection_;
  delete KqProduct::default_instance_;
  delete KqProduct_reflection_;
  delete TypeRep::default_instance_;
  delete TypeRep_reflection_;
}

void protobuf_AddDesc_Lol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tLol.proto\"<\n\010LinearRq\022\t\n\001e\030\001 \002(\r\022\t\n\001r\030"
    "\002 \002(\r\022\032\n\006coeffs\030\003 \003(\0132\n.RqProduct\"\032\n\001R\022\t"
    "\n\001m\030\001 \002(\r\022\n\n\002xs\030\002 \003(\022\"\'\n\003Rq1\022\t\n\001m\030\001 \002(\r\022"
    "\t\n\001q\030\002 \002(\004\022\n\n\002xs\030\003 \003(\022\"\'\n\003Kq1\022\t\n\001m\030\001 \002(\r"
    "\022\t\n\001q\030\002 \002(\004\022\n\n\002xs\030\003 \003(\001\"!\n\tRqProduct\022\024\n\006"
    "rqlist\030\001 \003(\0132\004.Rq1\"!\n\tKqProduct\022\024\n\006kqlis"
    "t\030\001 \003(\0132\004.Kq1\"\037\n\007TypeRep\022\t\n\001a\030\001 \002(\004\022\t\n\001b"
    "\030\002 \002(\004", 286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Lol.proto", &protobuf_RegisterTypes);
  LinearRq::default_instance_ = new LinearRq();
  R::default_instance_ = new R();
  Rq1::default_instance_ = new Rq1();
  Kq1::default_instance_ = new Kq1();
  RqProduct::default_instance_ = new RqProduct();
  KqProduct::default_instance_ = new KqProduct();
  TypeRep::default_instance_ = new TypeRep();
  LinearRq::default_instance_->InitAsDefaultInstance();
  R::default_instance_->InitAsDefaultInstance();
  Rq1::default_instance_->InitAsDefaultInstance();
  Kq1::default_instance_->InitAsDefaultInstance();
  RqProduct::default_instance_->InitAsDefaultInstance();
  KqProduct::default_instance_->InitAsDefaultInstance();
  TypeRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Lol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Lol_2eproto {
  StaticDescriptorInitializer_Lol_2eproto() {
    protobuf_AddDesc_Lol_2eproto();
  }
} static_descriptor_initializer_Lol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LinearRq::kEFieldNumber;
const int LinearRq::kRFieldNumber;
const int LinearRq::kCoeffsFieldNumber;
#endif  // !_MSC_VER

LinearRq::LinearRq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LinearRq)
}

void LinearRq::InitAsDefaultInstance() {
}

LinearRq::LinearRq(const LinearRq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LinearRq)
}

void LinearRq::SharedCtor() {
  _cached_size_ = 0;
  e_ = 0u;
  r_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearRq::~LinearRq() {
  // @@protoc_insertion_point(destructor:LinearRq)
  SharedDtor();
}

void LinearRq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LinearRq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearRq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearRq_descriptor_;
}

const LinearRq& LinearRq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Lol_2eproto();
  return *default_instance_;
}

LinearRq* LinearRq::default_instance_ = NULL;

LinearRq* LinearRq::New() const {
  return new LinearRq;
}

void LinearRq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LinearRq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(e_, r_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  coeffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinearRq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LinearRq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 e = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &e_)));
          set_has_e();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_r;
        break;
      }

      // required uint32 r = 2;
      case 2: {
        if (tag == 16) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coeffs;
        break;
      }

      // repeated .RqProduct coeffs = 3;
      case 3: {
        if (tag == 26) {
         parse_coeffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_coeffs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_coeffs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LinearRq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LinearRq)
  return false;
#undef DO_
}

void LinearRq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LinearRq)
  // required uint32 e = 1;
  if (has_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->e(), output);
  }

  // required uint32 r = 2;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->r(), output);
  }

  // repeated .RqProduct coeffs = 3;
  for (int i = 0; i < this->coeffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->coeffs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LinearRq)
}

::google::protobuf::uint8* LinearRq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LinearRq)
  // required uint32 e = 1;
  if (has_e()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->e(), target);
  }

  // required uint32 r = 2;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->r(), target);
  }

  // repeated .RqProduct coeffs = 3;
  for (int i = 0; i < this->coeffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->coeffs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LinearRq)
  return target;
}

int LinearRq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 e = 1;
    if (has_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->e());
    }

    // required uint32 r = 2;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

  }
  // repeated .RqProduct coeffs = 3;
  total_size += 1 * this->coeffs_size();
  for (int i = 0; i < this->coeffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->coeffs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearRq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinearRq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinearRq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinearRq::MergeFrom(const LinearRq& from) {
  GOOGLE_CHECK_NE(&from, this);
  coeffs_.MergeFrom(from.coeffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_e()) {
      set_e(from.e());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinearRq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearRq::CopyFrom(const LinearRq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearRq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->coeffs())) return false;
  return true;
}

void LinearRq::Swap(LinearRq* other) {
  if (other != this) {
    std::swap(e_, other->e_);
    std::swap(r_, other->r_);
    coeffs_.Swap(&other->coeffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinearRq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearRq_descriptor_;
  metadata.reflection = LinearRq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int R::kMFieldNumber;
const int R::kXsFieldNumber;
#endif  // !_MSC_VER

R::R()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:R)
}

void R::InitAsDefaultInstance() {
}

R::R(const R& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:R)
}

void R::SharedCtor() {
  _cached_size_ = 0;
  m_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

R::~R() {
  // @@protoc_insertion_point(destructor:R)
  SharedDtor();
}

void R::SharedDtor() {
  if (this != default_instance_) {
  }
}

void R::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* R::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return R_descriptor_;
}

const R& R::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Lol_2eproto();
  return *default_instance_;
}

R* R::default_instance_ = NULL;

R* R::New() const {
  return new R;
}

void R::Clear() {
  m_ = 0u;
  xs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool R::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:R)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_xs;
        break;
      }

      // repeated sint64 xs = 2;
      case 2: {
        if (tag == 16) {
         parse_xs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 16, input, this->mutable_xs())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_xs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_xs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:R)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:R)
  return false;
#undef DO_
}

void R::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:R)
  // required uint32 m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m(), output);
  }

  // repeated sint64 xs = 2;
  for (int i = 0; i < this->xs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      2, this->xs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:R)
}

::google::protobuf::uint8* R::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:R)
  // required uint32 m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m(), target);
  }

  // repeated sint64 xs = 2;
  for (int i = 0; i < this->xs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(2, this->xs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:R)
  return target;
}

int R::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m());
    }

  }
  // repeated sint64 xs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->xs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->xs(i));
    }
    total_size += 1 * this->xs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void R::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const R* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const R*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void R::MergeFrom(const R& from) {
  GOOGLE_CHECK_NE(&from, this);
  xs_.MergeFrom(from.xs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void R::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void R::CopyFrom(const R& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool R::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void R::Swap(R* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    xs_.Swap(&other->xs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata R::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = R_descriptor_;
  metadata.reflection = R_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rq1::kMFieldNumber;
const int Rq1::kQFieldNumber;
const int Rq1::kXsFieldNumber;
#endif  // !_MSC_VER

Rq1::Rq1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Rq1)
}

void Rq1::InitAsDefaultInstance() {
}

Rq1::Rq1(const Rq1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Rq1)
}

void Rq1::SharedCtor() {
  _cached_size_ = 0;
  m_ = 0u;
  q_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rq1::~Rq1() {
  // @@protoc_insertion_point(destructor:Rq1)
  SharedDtor();
}

void Rq1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rq1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rq1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rq1_descriptor_;
}

const Rq1& Rq1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Lol_2eproto();
  return *default_instance_;
}

Rq1* Rq1::default_instance_ = NULL;

Rq1* Rq1::New() const {
  return new Rq1;
}

void Rq1::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    m_ = 0u;
    q_ = GOOGLE_ULONGLONG(0);
  }
  xs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rq1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Rq1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_q;
        break;
      }

      // required uint64 q = 2;
      case 2: {
        if (tag == 16) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &q_)));
          set_has_q();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_xs;
        break;
      }

      // repeated sint64 xs = 3;
      case 3: {
        if (tag == 24) {
         parse_xs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 1, 24, input, this->mutable_xs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, this->mutable_xs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_xs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Rq1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Rq1)
  return false;
#undef DO_
}

void Rq1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Rq1)
  // required uint32 m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m(), output);
  }

  // required uint64 q = 2;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->q(), output);
  }

  // repeated sint64 xs = 3;
  for (int i = 0; i < this->xs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(
      3, this->xs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Rq1)
}

::google::protobuf::uint8* Rq1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rq1)
  // required uint32 m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m(), target);
  }

  // required uint64 q = 2;
  if (has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->q(), target);
  }

  // repeated sint64 xs = 3;
  for (int i = 0; i < this->xs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt64ToArray(3, this->xs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rq1)
  return target;
}

int Rq1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m());
    }

    // required uint64 q = 2;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->q());
    }

  }
  // repeated sint64 xs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->xs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt64Size(this->xs(i));
    }
    total_size += 1 * this->xs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rq1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rq1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rq1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rq1::MergeFrom(const Rq1& from) {
  GOOGLE_CHECK_NE(&from, this);
  xs_.MergeFrom(from.xs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_q()) {
      set_q(from.q());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rq1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rq1::CopyFrom(const Rq1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rq1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Rq1::Swap(Rq1* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(q_, other->q_);
    xs_.Swap(&other->xs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rq1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rq1_descriptor_;
  metadata.reflection = Rq1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Kq1::kMFieldNumber;
const int Kq1::kQFieldNumber;
const int Kq1::kXsFieldNumber;
#endif  // !_MSC_VER

Kq1::Kq1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kq1)
}

void Kq1::InitAsDefaultInstance() {
}

Kq1::Kq1(const Kq1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Kq1)
}

void Kq1::SharedCtor() {
  _cached_size_ = 0;
  m_ = 0u;
  q_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Kq1::~Kq1() {
  // @@protoc_insertion_point(destructor:Kq1)
  SharedDtor();
}

void Kq1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Kq1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Kq1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Kq1_descriptor_;
}

const Kq1& Kq1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Lol_2eproto();
  return *default_instance_;
}

Kq1* Kq1::default_instance_ = NULL;

Kq1* Kq1::New() const {
  return new Kq1;
}

void Kq1::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    m_ = 0u;
    q_ = GOOGLE_ULONGLONG(0);
  }
  xs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Kq1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kq1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 m = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_q;
        break;
      }

      // required uint64 q = 2;
      case 2: {
        if (tag == 16) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &q_)));
          set_has_q();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_xs;
        break;
      }

      // repeated double xs = 3;
      case 3: {
        if (tag == 25) {
         parse_xs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_xs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_xs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_xs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kq1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kq1)
  return false;
#undef DO_
}

void Kq1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kq1)
  // required uint32 m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->m(), output);
  }

  // required uint64 q = 2;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->q(), output);
  }

  // repeated double xs = 3;
  for (int i = 0; i < this->xs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->xs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Kq1)
}

::google::protobuf::uint8* Kq1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Kq1)
  // required uint32 m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->m(), target);
  }

  // required uint64 q = 2;
  if (has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->q(), target);
  }

  // repeated double xs = 3;
  for (int i = 0; i < this->xs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->xs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kq1)
  return target;
}

int Kq1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->m());
    }

    // required uint64 q = 2;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->q());
    }

  }
  // repeated double xs = 3;
  {
    int data_size = 0;
    data_size = 8 * this->xs_size();
    total_size += 1 * this->xs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Kq1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Kq1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Kq1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Kq1::MergeFrom(const Kq1& from) {
  GOOGLE_CHECK_NE(&from, this);
  xs_.MergeFrom(from.xs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_q()) {
      set_q(from.q());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Kq1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kq1::CopyFrom(const Kq1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kq1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Kq1::Swap(Kq1* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(q_, other->q_);
    xs_.Swap(&other->xs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Kq1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Kq1_descriptor_;
  metadata.reflection = Kq1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RqProduct::kRqlistFieldNumber;
#endif  // !_MSC_VER

RqProduct::RqProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RqProduct)
}

void RqProduct::InitAsDefaultInstance() {
}

RqProduct::RqProduct(const RqProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RqProduct)
}

void RqProduct::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RqProduct::~RqProduct() {
  // @@protoc_insertion_point(destructor:RqProduct)
  SharedDtor();
}

void RqProduct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RqProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RqProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RqProduct_descriptor_;
}

const RqProduct& RqProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Lol_2eproto();
  return *default_instance_;
}

RqProduct* RqProduct::default_instance_ = NULL;

RqProduct* RqProduct::New() const {
  return new RqProduct;
}

void RqProduct::Clear() {
  rqlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RqProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RqProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Rq1 rqlist = 1;
      case 1: {
        if (tag == 10) {
         parse_rqlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rqlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_rqlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RqProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RqProduct)
  return false;
#undef DO_
}

void RqProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RqProduct)
  // repeated .Rq1 rqlist = 1;
  for (int i = 0; i < this->rqlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rqlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RqProduct)
}

::google::protobuf::uint8* RqProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RqProduct)
  // repeated .Rq1 rqlist = 1;
  for (int i = 0; i < this->rqlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rqlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RqProduct)
  return target;
}

int RqProduct::ByteSize() const {
  int total_size = 0;

  // repeated .Rq1 rqlist = 1;
  total_size += 1 * this->rqlist_size();
  for (int i = 0; i < this->rqlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rqlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RqProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RqProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RqProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RqProduct::MergeFrom(const RqProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  rqlist_.MergeFrom(from.rqlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RqProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RqProduct::CopyFrom(const RqProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RqProduct::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rqlist())) return false;
  return true;
}

void RqProduct::Swap(RqProduct* other) {
  if (other != this) {
    rqlist_.Swap(&other->rqlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RqProduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RqProduct_descriptor_;
  metadata.reflection = RqProduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KqProduct::kKqlistFieldNumber;
#endif  // !_MSC_VER

KqProduct::KqProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KqProduct)
}

void KqProduct::InitAsDefaultInstance() {
}

KqProduct::KqProduct(const KqProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KqProduct)
}

void KqProduct::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KqProduct::~KqProduct() {
  // @@protoc_insertion_point(destructor:KqProduct)
  SharedDtor();
}

void KqProduct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KqProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KqProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KqProduct_descriptor_;
}

const KqProduct& KqProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Lol_2eproto();
  return *default_instance_;
}

KqProduct* KqProduct::default_instance_ = NULL;

KqProduct* KqProduct::New() const {
  return new KqProduct;
}

void KqProduct::Clear() {
  kqlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KqProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KqProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Kq1 kqlist = 1;
      case 1: {
        if (tag == 10) {
         parse_kqlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kqlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_kqlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KqProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KqProduct)
  return false;
#undef DO_
}

void KqProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KqProduct)
  // repeated .Kq1 kqlist = 1;
  for (int i = 0; i < this->kqlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kqlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KqProduct)
}

::google::protobuf::uint8* KqProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KqProduct)
  // repeated .Kq1 kqlist = 1;
  for (int i = 0; i < this->kqlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kqlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KqProduct)
  return target;
}

int KqProduct::ByteSize() const {
  int total_size = 0;

  // repeated .Kq1 kqlist = 1;
  total_size += 1 * this->kqlist_size();
  for (int i = 0; i < this->kqlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kqlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KqProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KqProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KqProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KqProduct::MergeFrom(const KqProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  kqlist_.MergeFrom(from.kqlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KqProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KqProduct::CopyFrom(const KqProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KqProduct::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->kqlist())) return false;
  return true;
}

void KqProduct::Swap(KqProduct* other) {
  if (other != this) {
    kqlist_.Swap(&other->kqlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KqProduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KqProduct_descriptor_;
  metadata.reflection = KqProduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TypeRep::kAFieldNumber;
const int TypeRep::kBFieldNumber;
#endif  // !_MSC_VER

TypeRep::TypeRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TypeRep)
}

void TypeRep::InitAsDefaultInstance() {
}

TypeRep::TypeRep(const TypeRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TypeRep)
}

void TypeRep::SharedCtor() {
  _cached_size_ = 0;
  a_ = GOOGLE_ULONGLONG(0);
  b_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TypeRep::~TypeRep() {
  // @@protoc_insertion_point(destructor:TypeRep)
  SharedDtor();
}

void TypeRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TypeRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeRep_descriptor_;
}

const TypeRep& TypeRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Lol_2eproto();
  return *default_instance_;
}

TypeRep* TypeRep::default_instance_ = NULL;

TypeRep* TypeRep::New() const {
  return new TypeRep;
}

void TypeRep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TypeRep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(a_, b_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TypeRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TypeRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 a = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_b;
        break;
      }

      // required uint64 b = 2;
      case 2: {
        if (tag == 16) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TypeRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TypeRep)
  return false;
#undef DO_
}

void TypeRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TypeRep)
  // required uint64 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->a(), output);
  }

  // required uint64 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TypeRep)
}

::google::protobuf::uint8* TypeRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TypeRep)
  // required uint64 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->a(), target);
  }

  // required uint64 b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TypeRep)
  return target;
}

int TypeRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->a());
    }

    // required uint64 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TypeRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TypeRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeRep::MergeFrom(const TypeRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TypeRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeRep::CopyFrom(const TypeRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TypeRep::Swap(TypeRep* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TypeRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeRep_descriptor_;
  metadata.reflection = TypeRep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
