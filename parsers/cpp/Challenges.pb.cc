// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Challenges.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Challenges.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ContParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiscParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiscParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* RLWRParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RLWRParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* Challenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Challenge_reflection_ = NULL;
struct ChallengeOneofInstance {
  const ::ContParams* cparams_;
  const ::DiscParams* dparams_;
  const ::RLWRParams* rparams_;
}* Challenge_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* InstanceCont1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceCont1_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceDisc1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceDisc1_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceRLWR1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceRLWR1_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceCont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceCont_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceDisc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceDisc_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceRLWR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceRLWR_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secret1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secret1_reflection_ = NULL;
const ::google::protobuf::Descriptor* Secret_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Secret_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Challenges_2eproto() {
  protobuf_AddDesc_Challenges_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Challenges.proto");
  GOOGLE_CHECK(file != NULL);
  ContParams_descriptor_ = file->message_type(0);
  static const int ContParams_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContParams, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContParams, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContParams, svar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContParams, bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContParams, numsamples_),
  };
  ContParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContParams_descriptor_,
      ContParams::default_instance_,
      ContParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContParams));
  DiscParams_descriptor_ = file->message_type(1);
  static const int DiscParams_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscParams, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscParams, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscParams, svar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscParams, bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscParams, numsamples_),
  };
  DiscParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiscParams_descriptor_,
      DiscParams::default_instance_,
      DiscParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiscParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiscParams));
  RLWRParams_descriptor_ = file->message_type(2);
  static const int RLWRParams_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RLWRParams, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RLWRParams, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RLWRParams, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RLWRParams, numsamples_),
  };
  RLWRParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RLWRParams_descriptor_,
      RLWRParams::default_instance_,
      RLWRParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RLWRParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RLWRParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RLWRParams));
  Challenge_descriptor_ = file->message_type(3);
  static const int Challenge_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, challengeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, numinstances_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, beaconepoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, beaconoffset_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Challenge_default_oneof_instance_, cparams_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Challenge_default_oneof_instance_, dparams_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Challenge_default_oneof_instance_, rparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, params_),
  };
  Challenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Challenge_descriptor_,
      Challenge::default_instance_,
      Challenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, _unknown_fields_),
      -1,
      Challenge_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Challenge, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Challenge));
  InstanceCont1_descriptor_ = file->message_type(4);
  static const int InstanceCont1_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont1, challengeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont1, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont1, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont1, samples_),
  };
  InstanceCont1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceCont1_descriptor_,
      InstanceCont1::default_instance_,
      InstanceCont1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceCont1));
  InstanceDisc1_descriptor_ = file->message_type(5);
  static const int InstanceDisc1_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc1, challengeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc1, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc1, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc1, samples_),
  };
  InstanceDisc1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceDisc1_descriptor_,
      InstanceDisc1::default_instance_,
      InstanceDisc1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceDisc1));
  InstanceRLWR1_descriptor_ = file->message_type(6);
  static const int InstanceRLWR1_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR1, challengeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR1, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR1, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR1, samples_),
  };
  InstanceRLWR1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceRLWR1_descriptor_,
      InstanceRLWR1::default_instance_,
      InstanceRLWR1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceRLWR1));
  InstanceCont_descriptor_ = file->message_type(7);
  static const int InstanceCont_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont, challengeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont, samples_),
  };
  InstanceCont_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceCont_descriptor_,
      InstanceCont::default_instance_,
      InstanceCont_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCont, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceCont));
  InstanceDisc_descriptor_ = file->message_type(8);
  static const int InstanceDisc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc, challengeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc, samples_),
  };
  InstanceDisc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceDisc_descriptor_,
      InstanceDisc::default_instance_,
      InstanceDisc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDisc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceDisc));
  InstanceRLWR_descriptor_ = file->message_type(9);
  static const int InstanceRLWR_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR, challengeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR, samples_),
  };
  InstanceRLWR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceRLWR_descriptor_,
      InstanceRLWR::default_instance_,
      InstanceRLWR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceRLWR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceRLWR));
  Secret1_descriptor_ = file->message_type(10);
  static const int Secret1_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret1, challengeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret1, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret1, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret1, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret1, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret1, s_),
  };
  Secret1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Secret1_descriptor_,
      Secret1::default_instance_,
      Secret1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Secret1));
  Secret_descriptor_ = file->message_type(11);
  static const int Secret_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, challengeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, q_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, s_),
  };
  Secret_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Secret_descriptor_,
      Secret::default_instance_,
      Secret_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Secret));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Challenges_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContParams_descriptor_, &ContParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiscParams_descriptor_, &DiscParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RLWRParams_descriptor_, &RLWRParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Challenge_descriptor_, &Challenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceCont1_descriptor_, &InstanceCont1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceDisc1_descriptor_, &InstanceDisc1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceRLWR1_descriptor_, &InstanceRLWR1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceCont_descriptor_, &InstanceCont::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceDisc_descriptor_, &InstanceDisc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceRLWR_descriptor_, &InstanceRLWR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Secret1_descriptor_, &Secret1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Secret_descriptor_, &Secret::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Challenges_2eproto() {
  delete ContParams::default_instance_;
  delete ContParams_reflection_;
  delete DiscParams::default_instance_;
  delete DiscParams_reflection_;
  delete RLWRParams::default_instance_;
  delete RLWRParams_reflection_;
  delete Challenge::default_instance_;
  delete Challenge_default_oneof_instance_;
  delete Challenge_reflection_;
  delete InstanceCont1::default_instance_;
  delete InstanceCont1_reflection_;
  delete InstanceDisc1::default_instance_;
  delete InstanceDisc1_reflection_;
  delete InstanceRLWR1::default_instance_;
  delete InstanceRLWR1_reflection_;
  delete InstanceCont::default_instance_;
  delete InstanceCont_reflection_;
  delete InstanceDisc::default_instance_;
  delete InstanceDisc_reflection_;
  delete InstanceRLWR::default_instance_;
  delete InstanceRLWR_reflection_;
  delete Secret1::default_instance_;
  delete Secret1_reflection_;
  delete Secret::default_instance_;
  delete Secret_reflection_;
}

void protobuf_AddDesc_Challenges_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Lol_2eproto();
  ::protobuf_AddDesc_RLWE_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Challenges.proto\032\tLol.proto\032\nRLWE.prot"
    "o\"S\n\nContParams\022\t\n\001m\030\001 \002(\005\022\t\n\001q\030\002 \002(\003\022\014\n"
    "\004svar\030\003 \002(\001\022\r\n\005bound\030\004 \002(\001\022\022\n\nnumSamples"
    "\030\005 \002(\005\"S\n\nDiscParams\022\t\n\001m\030\001 \002(\005\022\t\n\001q\030\002 \002"
    "(\003\022\014\n\004svar\030\003 \002(\001\022\r\n\005bound\030\004 \002(\003\022\022\n\nnumSa"
    "mples\030\005 \002(\005\"A\n\nRLWRParams\022\t\n\001m\030\001 \002(\005\022\t\n\001"
    "q\030\002 \002(\003\022\t\n\001p\030\003 \002(\003\022\022\n\nnumSamples\030\004 \002(\005\"\313"
    "\001\n\tChallenge\022\023\n\013challengeID\030\001 \002(\005\022\024\n\014num"
    "Instances\030\002 \002(\005\022\023\n\013beaconEpoch\030\003 \002(\003\022\024\n\014"
    "beaconOffset\030\004 \002(\005\022\036\n\007cparams\030\005 \001(\0132\013.Co"
    "ntParamsH\000\022\036\n\007dparams\030\006 \001(\0132\013.DiscParams"
    "H\000\022\036\n\007rparams\030\007 \001(\0132\013.RLWRParamsH\000B\010\n\006pa"
    "rams\"t\n\rInstanceCont1\022\023\n\013challengeID\030\001 \002"
    "(\005\022\022\n\ninstanceID\030\002 \002(\005\022\033\n\006params\030\003 \002(\0132\013"
    ".ContParams\022\035\n\007samples\030\004 \003(\0132\014.SampleCon"
    "t1\"t\n\rInstanceDisc1\022\023\n\013challengeID\030\001 \002(\005"
    "\022\022\n\ninstanceID\030\002 \002(\005\022\033\n\006params\030\003 \002(\0132\013.D"
    "iscParams\022\035\n\007samples\030\004 \003(\0132\014.SampleDisc1"
    "\"t\n\rInstanceRLWR1\022\023\n\013challengeID\030\001 \002(\005\022\022"
    "\n\ninstanceID\030\002 \002(\005\022\033\n\006params\030\003 \002(\0132\013.RLW"
    "RParams\022\035\n\007samples\030\004 \003(\0132\014.SampleRLWR1\"r"
    "\n\014InstanceCont\022\023\n\013challengeID\030\001 \002(\005\022\022\n\ni"
    "nstanceID\030\002 \002(\005\022\033\n\006params\030\003 \002(\0132\013.ContPa"
    "rams\022\034\n\007samples\030\004 \003(\0132\013.SampleCont\"r\n\014In"
    "stanceDisc\022\023\n\013challengeID\030\001 \002(\005\022\022\n\ninsta"
    "nceID\030\002 \002(\005\022\033\n\006params\030\003 \002(\0132\013.DiscParams"
    "\022\034\n\007samples\030\004 \003(\0132\013.SampleDisc\"r\n\014Instan"
    "ceRLWR\022\023\n\013challengeID\030\001 \002(\005\022\022\n\ninstanceI"
    "D\030\002 \002(\005\022\033\n\006params\030\003 \002(\0132\013.RLWRParams\022\034\n\007"
    "samples\030\004 \003(\0132\013.SampleRLWR\"g\n\007Secret1\022\023\n"
    "\013challengeID\030\001 \002(\005\022\022\n\ninstanceID\030\002 \002(\005\022\t"
    "\n\001m\030\003 \002(\005\022\t\n\001q\030\004 \002(\003\022\014\n\004seed\030\005 \002(\014\022\017\n\001s\030"
    "\006 \002(\0132\004.Rq1\"l\n\006Secret\022\023\n\013challengeID\030\001 \002"
    "(\005\022\022\n\ninstanceID\030\002 \002(\005\022\t\n\001m\030\003 \002(\005\022\t\n\001q\030\004"
    " \002(\003\022\014\n\004seed\030\005 \002(\014\022\025\n\001s\030\006 \002(\0132\n.RqProduc"
    "t", 1401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Challenges.proto", &protobuf_RegisterTypes);
  ContParams::default_instance_ = new ContParams();
  DiscParams::default_instance_ = new DiscParams();
  RLWRParams::default_instance_ = new RLWRParams();
  Challenge::default_instance_ = new Challenge();
  Challenge_default_oneof_instance_ = new ChallengeOneofInstance;
  InstanceCont1::default_instance_ = new InstanceCont1();
  InstanceDisc1::default_instance_ = new InstanceDisc1();
  InstanceRLWR1::default_instance_ = new InstanceRLWR1();
  InstanceCont::default_instance_ = new InstanceCont();
  InstanceDisc::default_instance_ = new InstanceDisc();
  InstanceRLWR::default_instance_ = new InstanceRLWR();
  Secret1::default_instance_ = new Secret1();
  Secret::default_instance_ = new Secret();
  ContParams::default_instance_->InitAsDefaultInstance();
  DiscParams::default_instance_->InitAsDefaultInstance();
  RLWRParams::default_instance_->InitAsDefaultInstance();
  Challenge::default_instance_->InitAsDefaultInstance();
  InstanceCont1::default_instance_->InitAsDefaultInstance();
  InstanceDisc1::default_instance_->InitAsDefaultInstance();
  InstanceRLWR1::default_instance_->InitAsDefaultInstance();
  InstanceCont::default_instance_->InitAsDefaultInstance();
  InstanceDisc::default_instance_->InitAsDefaultInstance();
  InstanceRLWR::default_instance_->InitAsDefaultInstance();
  Secret1::default_instance_->InitAsDefaultInstance();
  Secret::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Challenges_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Challenges_2eproto {
  StaticDescriptorInitializer_Challenges_2eproto() {
    protobuf_AddDesc_Challenges_2eproto();
  }
} static_descriptor_initializer_Challenges_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ContParams::kMFieldNumber;
const int ContParams::kQFieldNumber;
const int ContParams::kSvarFieldNumber;
const int ContParams::kBoundFieldNumber;
const int ContParams::kNumSamplesFieldNumber;
#endif  // !_MSC_VER

ContParams::ContParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ContParams)
}

void ContParams::InitAsDefaultInstance() {
}

ContParams::ContParams(const ContParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ContParams)
}

void ContParams::SharedCtor() {
  _cached_size_ = 0;
  m_ = 0;
  q_ = GOOGLE_LONGLONG(0);
  svar_ = 0;
  bound_ = 0;
  numsamples_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContParams::~ContParams() {
  // @@protoc_insertion_point(destructor:ContParams)
  SharedDtor();
}

void ContParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContParams_descriptor_;
}

const ContParams& ContParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

ContParams* ContParams::default_instance_ = NULL;

ContParams* ContParams::New() const {
  return new ContParams;
}

void ContParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ContParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(q_, bound_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ContParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_q;
        break;
      }

      // required int64 q = 2;
      case 2: {
        if (tag == 16) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &q_)));
          set_has_q();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_svar;
        break;
      }

      // required double svar = 3;
      case 3: {
        if (tag == 25) {
         parse_svar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &svar_)));
          set_has_svar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bound;
        break;
      }

      // required double bound = 4;
      case 4: {
        if (tag == 33) {
         parse_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bound_)));
          set_has_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_numSamples;
        break;
      }

      // required int32 numSamples = 5;
      case 5: {
        if (tag == 40) {
         parse_numSamples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numsamples_)));
          set_has_numsamples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ContParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ContParams)
  return false;
#undef DO_
}

void ContParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ContParams)
  // required int32 m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m(), output);
  }

  // required int64 q = 2;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->q(), output);
  }

  // required double svar = 3;
  if (has_svar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->svar(), output);
  }

  // required double bound = 4;
  if (has_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bound(), output);
  }

  // required int32 numSamples = 5;
  if (has_numsamples()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numsamples(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ContParams)
}

::google::protobuf::uint8* ContParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ContParams)
  // required int32 m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m(), target);
  }

  // required int64 q = 2;
  if (has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->q(), target);
  }

  // required double svar = 3;
  if (has_svar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->svar(), target);
  }

  // required double bound = 4;
  if (has_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bound(), target);
  }

  // required int32 numSamples = 5;
  if (has_numsamples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numsamples(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ContParams)
  return target;
}

int ContParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m());
    }

    // required int64 q = 2;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->q());
    }

    // required double svar = 3;
    if (has_svar()) {
      total_size += 1 + 8;
    }

    // required double bound = 4;
    if (has_bound()) {
      total_size += 1 + 8;
    }

    // required int32 numSamples = 5;
    if (has_numsamples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numsamples());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContParams::MergeFrom(const ContParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_q()) {
      set_q(from.q());
    }
    if (from.has_svar()) {
      set_svar(from.svar());
    }
    if (from.has_bound()) {
      set_bound(from.bound());
    }
    if (from.has_numsamples()) {
      set_numsamples(from.numsamples());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContParams::CopyFrom(const ContParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ContParams::Swap(ContParams* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(q_, other->q_);
    std::swap(svar_, other->svar_);
    std::swap(bound_, other->bound_);
    std::swap(numsamples_, other->numsamples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContParams_descriptor_;
  metadata.reflection = ContParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiscParams::kMFieldNumber;
const int DiscParams::kQFieldNumber;
const int DiscParams::kSvarFieldNumber;
const int DiscParams::kBoundFieldNumber;
const int DiscParams::kNumSamplesFieldNumber;
#endif  // !_MSC_VER

DiscParams::DiscParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DiscParams)
}

void DiscParams::InitAsDefaultInstance() {
}

DiscParams::DiscParams(const DiscParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DiscParams)
}

void DiscParams::SharedCtor() {
  _cached_size_ = 0;
  m_ = 0;
  q_ = GOOGLE_LONGLONG(0);
  svar_ = 0;
  bound_ = GOOGLE_LONGLONG(0);
  numsamples_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiscParams::~DiscParams() {
  // @@protoc_insertion_point(destructor:DiscParams)
  SharedDtor();
}

void DiscParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiscParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiscParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiscParams_descriptor_;
}

const DiscParams& DiscParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

DiscParams* DiscParams::default_instance_ = NULL;

DiscParams* DiscParams::New() const {
  return new DiscParams;
}

void DiscParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DiscParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(q_, bound_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiscParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DiscParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_q;
        break;
      }

      // required int64 q = 2;
      case 2: {
        if (tag == 16) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &q_)));
          set_has_q();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_svar;
        break;
      }

      // required double svar = 3;
      case 3: {
        if (tag == 25) {
         parse_svar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &svar_)));
          set_has_svar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bound;
        break;
      }

      // required int64 bound = 4;
      case 4: {
        if (tag == 32) {
         parse_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bound_)));
          set_has_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_numSamples;
        break;
      }

      // required int32 numSamples = 5;
      case 5: {
        if (tag == 40) {
         parse_numSamples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numsamples_)));
          set_has_numsamples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DiscParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DiscParams)
  return false;
#undef DO_
}

void DiscParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DiscParams)
  // required int32 m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m(), output);
  }

  // required int64 q = 2;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->q(), output);
  }

  // required double svar = 3;
  if (has_svar()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->svar(), output);
  }

  // required int64 bound = 4;
  if (has_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->bound(), output);
  }

  // required int32 numSamples = 5;
  if (has_numsamples()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numsamples(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DiscParams)
}

::google::protobuf::uint8* DiscParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DiscParams)
  // required int32 m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m(), target);
  }

  // required int64 q = 2;
  if (has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->q(), target);
  }

  // required double svar = 3;
  if (has_svar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->svar(), target);
  }

  // required int64 bound = 4;
  if (has_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->bound(), target);
  }

  // required int32 numSamples = 5;
  if (has_numsamples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numsamples(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DiscParams)
  return target;
}

int DiscParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m());
    }

    // required int64 q = 2;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->q());
    }

    // required double svar = 3;
    if (has_svar()) {
      total_size += 1 + 8;
    }

    // required int64 bound = 4;
    if (has_bound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bound());
    }

    // required int32 numSamples = 5;
    if (has_numsamples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numsamples());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiscParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiscParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiscParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiscParams::MergeFrom(const DiscParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_q()) {
      set_q(from.q());
    }
    if (from.has_svar()) {
      set_svar(from.svar());
    }
    if (from.has_bound()) {
      set_bound(from.bound());
    }
    if (from.has_numsamples()) {
      set_numsamples(from.numsamples());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiscParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiscParams::CopyFrom(const DiscParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DiscParams::Swap(DiscParams* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(q_, other->q_);
    std::swap(svar_, other->svar_);
    std::swap(bound_, other->bound_);
    std::swap(numsamples_, other->numsamples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiscParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiscParams_descriptor_;
  metadata.reflection = DiscParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RLWRParams::kMFieldNumber;
const int RLWRParams::kQFieldNumber;
const int RLWRParams::kPFieldNumber;
const int RLWRParams::kNumSamplesFieldNumber;
#endif  // !_MSC_VER

RLWRParams::RLWRParams()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RLWRParams)
}

void RLWRParams::InitAsDefaultInstance() {
}

RLWRParams::RLWRParams(const RLWRParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RLWRParams)
}

void RLWRParams::SharedCtor() {
  _cached_size_ = 0;
  m_ = 0;
  q_ = GOOGLE_LONGLONG(0);
  p_ = GOOGLE_LONGLONG(0);
  numsamples_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RLWRParams::~RLWRParams() {
  // @@protoc_insertion_point(destructor:RLWRParams)
  SharedDtor();
}

void RLWRParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RLWRParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RLWRParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RLWRParams_descriptor_;
}

const RLWRParams& RLWRParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

RLWRParams* RLWRParams::default_instance_ = NULL;

RLWRParams* RLWRParams::New() const {
  return new RLWRParams;
}

void RLWRParams::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RLWRParams*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(q_, p_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RLWRParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RLWRParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 m = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_q;
        break;
      }

      // required int64 q = 2;
      case 2: {
        if (tag == 16) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &q_)));
          set_has_q();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_p;
        break;
      }

      // required int64 p = 3;
      case 3: {
        if (tag == 24) {
         parse_p:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &p_)));
          set_has_p();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_numSamples;
        break;
      }

      // required int32 numSamples = 4;
      case 4: {
        if (tag == 32) {
         parse_numSamples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numsamples_)));
          set_has_numsamples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RLWRParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RLWRParams)
  return false;
#undef DO_
}

void RLWRParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RLWRParams)
  // required int32 m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m(), output);
  }

  // required int64 q = 2;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->q(), output);
  }

  // required int64 p = 3;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->p(), output);
  }

  // required int32 numSamples = 4;
  if (has_numsamples()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->numsamples(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RLWRParams)
}

::google::protobuf::uint8* RLWRParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RLWRParams)
  // required int32 m = 1;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m(), target);
  }

  // required int64 q = 2;
  if (has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->q(), target);
  }

  // required int64 p = 3;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->p(), target);
  }

  // required int32 numSamples = 4;
  if (has_numsamples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->numsamples(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RLWRParams)
  return target;
}

int RLWRParams::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m());
    }

    // required int64 q = 2;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->q());
    }

    // required int64 p = 3;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->p());
    }

    // required int32 numSamples = 4;
    if (has_numsamples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numsamples());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RLWRParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RLWRParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RLWRParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RLWRParams::MergeFrom(const RLWRParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_q()) {
      set_q(from.q());
    }
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_numsamples()) {
      set_numsamples(from.numsamples());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RLWRParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RLWRParams::CopyFrom(const RLWRParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RLWRParams::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RLWRParams::Swap(RLWRParams* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(q_, other->q_);
    std::swap(p_, other->p_);
    std::swap(numsamples_, other->numsamples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RLWRParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RLWRParams_descriptor_;
  metadata.reflection = RLWRParams_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Challenge::kChallengeIDFieldNumber;
const int Challenge::kNumInstancesFieldNumber;
const int Challenge::kBeaconEpochFieldNumber;
const int Challenge::kBeaconOffsetFieldNumber;
const int Challenge::kCparamsFieldNumber;
const int Challenge::kDparamsFieldNumber;
const int Challenge::kRparamsFieldNumber;
#endif  // !_MSC_VER

Challenge::Challenge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Challenge)
}

void Challenge::InitAsDefaultInstance() {
  Challenge_default_oneof_instance_->cparams_ = const_cast< ::ContParams*>(&::ContParams::default_instance());
  Challenge_default_oneof_instance_->dparams_ = const_cast< ::DiscParams*>(&::DiscParams::default_instance());
  Challenge_default_oneof_instance_->rparams_ = const_cast< ::RLWRParams*>(&::RLWRParams::default_instance());
}

Challenge::Challenge(const Challenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Challenge)
}

void Challenge::SharedCtor() {
  _cached_size_ = 0;
  challengeid_ = 0;
  numinstances_ = 0;
  beaconepoch_ = GOOGLE_LONGLONG(0);
  beaconoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_params();
}

Challenge::~Challenge() {
  // @@protoc_insertion_point(destructor:Challenge)
  SharedDtor();
}

void Challenge::SharedDtor() {
  if (has_params()) {
    clear_params();
  }
  if (this != default_instance_) {
  }
}

void Challenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Challenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Challenge_descriptor_;
}

const Challenge& Challenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

Challenge* Challenge::default_instance_ = NULL;

Challenge* Challenge::New() const {
  return new Challenge;
}

void Challenge::clear_params() {
  switch(params_case()) {
    case kCparams: {
      delete params_.cparams_;
      break;
    }
    case kDparams: {
      delete params_.dparams_;
      break;
    }
    case kRparams: {
      delete params_.rparams_;
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMS_NOT_SET;
}


void Challenge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Challenge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(challengeid_, beaconoffset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  clear_params();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Challenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Challenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 challengeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeid_)));
          set_has_challengeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_numInstances;
        break;
      }

      // required int32 numInstances = 2;
      case 2: {
        if (tag == 16) {
         parse_numInstances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numinstances_)));
          set_has_numinstances();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_beaconEpoch;
        break;
      }

      // required int64 beaconEpoch = 3;
      case 3: {
        if (tag == 24) {
         parse_beaconEpoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &beaconepoch_)));
          set_has_beaconepoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_beaconOffset;
        break;
      }

      // required int32 beaconOffset = 4;
      case 4: {
        if (tag == 32) {
         parse_beaconOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beaconoffset_)));
          set_has_beaconoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_cparams;
        break;
      }

      // optional .ContParams cparams = 5;
      case 5: {
        if (tag == 42) {
         parse_cparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dparams;
        break;
      }

      // optional .DiscParams dparams = 6;
      case 6: {
        if (tag == 50) {
         parse_dparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_rparams;
        break;
      }

      // optional .RLWRParams rparams = 7;
      case 7: {
        if (tag == 58) {
         parse_rparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Challenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Challenge)
  return false;
#undef DO_
}

void Challenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Challenge)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challengeid(), output);
  }

  // required int32 numInstances = 2;
  if (has_numinstances()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numinstances(), output);
  }

  // required int64 beaconEpoch = 3;
  if (has_beaconepoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->beaconepoch(), output);
  }

  // required int32 beaconOffset = 4;
  if (has_beaconoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->beaconoffset(), output);
  }

  // optional .ContParams cparams = 5;
  if (has_cparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cparams(), output);
  }

  // optional .DiscParams dparams = 6;
  if (has_dparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dparams(), output);
  }

  // optional .RLWRParams rparams = 7;
  if (has_rparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rparams(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Challenge)
}

::google::protobuf::uint8* Challenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Challenge)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->challengeid(), target);
  }

  // required int32 numInstances = 2;
  if (has_numinstances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numinstances(), target);
  }

  // required int64 beaconEpoch = 3;
  if (has_beaconepoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->beaconepoch(), target);
  }

  // required int32 beaconOffset = 4;
  if (has_beaconoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->beaconoffset(), target);
  }

  // optional .ContParams cparams = 5;
  if (has_cparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cparams(), target);
  }

  // optional .DiscParams dparams = 6;
  if (has_dparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->dparams(), target);
  }

  // optional .RLWRParams rparams = 7;
  if (has_rparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rparams(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Challenge)
  return target;
}

int Challenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 challengeID = 1;
    if (has_challengeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeid());
    }

    // required int32 numInstances = 2;
    if (has_numinstances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numinstances());
    }

    // required int64 beaconEpoch = 3;
    if (has_beaconepoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->beaconepoch());
    }

    // required int32 beaconOffset = 4;
    if (has_beaconoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beaconoffset());
    }

  }
  switch (params_case()) {
    // optional .ContParams cparams = 5;
    case kCparams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cparams());
      break;
    }
    // optional .DiscParams dparams = 6;
    case kDparams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dparams());
      break;
    }
    // optional .RLWRParams rparams = 7;
    case kRparams: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rparams());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Challenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Challenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Challenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Challenge::MergeFrom(const Challenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.params_case()) {
    case kCparams: {
      mutable_cparams()->::ContParams::MergeFrom(from.cparams());
      break;
    }
    case kDparams: {
      mutable_dparams()->::DiscParams::MergeFrom(from.dparams());
      break;
    }
    case kRparams: {
      mutable_rparams()->::RLWRParams::MergeFrom(from.rparams());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengeid()) {
      set_challengeid(from.challengeid());
    }
    if (from.has_numinstances()) {
      set_numinstances(from.numinstances());
    }
    if (from.has_beaconepoch()) {
      set_beaconepoch(from.beaconepoch());
    }
    if (from.has_beaconoffset()) {
      set_beaconoffset(from.beaconoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Challenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Challenge::CopyFrom(const Challenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Challenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_cparams()) {
    if (!this->cparams().IsInitialized()) return false;
  }
  if (has_dparams()) {
    if (!this->dparams().IsInitialized()) return false;
  }
  if (has_rparams()) {
    if (!this->rparams().IsInitialized()) return false;
  }
  return true;
}

void Challenge::Swap(Challenge* other) {
  if (other != this) {
    std::swap(challengeid_, other->challengeid_);
    std::swap(numinstances_, other->numinstances_);
    std::swap(beaconepoch_, other->beaconepoch_);
    std::swap(beaconoffset_, other->beaconoffset_);
    std::swap(params_, other->params_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Challenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Challenge_descriptor_;
  metadata.reflection = Challenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceCont1::kChallengeIDFieldNumber;
const int InstanceCont1::kInstanceIDFieldNumber;
const int InstanceCont1::kParamsFieldNumber;
const int InstanceCont1::kSamplesFieldNumber;
#endif  // !_MSC_VER

InstanceCont1::InstanceCont1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InstanceCont1)
}

void InstanceCont1::InitAsDefaultInstance() {
  params_ = const_cast< ::ContParams*>(&::ContParams::default_instance());
}

InstanceCont1::InstanceCont1(const InstanceCont1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InstanceCont1)
}

void InstanceCont1::SharedCtor() {
  _cached_size_ = 0;
  challengeid_ = 0;
  instanceid_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceCont1::~InstanceCont1() {
  // @@protoc_insertion_point(destructor:InstanceCont1)
  SharedDtor();
}

void InstanceCont1::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void InstanceCont1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceCont1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceCont1_descriptor_;
}

const InstanceCont1& InstanceCont1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

InstanceCont1* InstanceCont1::default_instance_ = NULL;

InstanceCont1* InstanceCont1::New() const {
  return new InstanceCont1;
}

void InstanceCont1::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstanceCont1*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(challengeid_, instanceid_);
    if (has_params()) {
      if (params_ != NULL) params_->::ContParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceCont1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InstanceCont1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 challengeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeid_)));
          set_has_challengeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // required int32 instanceID = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // required .ContParams params = 3;
      case 3: {
        if (tag == 26) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        break;
      }

      // repeated .SampleCont1 samples = 4;
      case 4: {
        if (tag == 34) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InstanceCont1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InstanceCont1)
  return false;
#undef DO_
}

void InstanceCont1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InstanceCont1)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challengeid(), output);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  // required .ContParams params = 3;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params(), output);
  }

  // repeated .SampleCont1 samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->samples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InstanceCont1)
}

::google::protobuf::uint8* InstanceCont1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstanceCont1)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->challengeid(), target);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  // required .ContParams params = 3;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->params(), target);
  }

  // repeated .SampleCont1 samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->samples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstanceCont1)
  return target;
}

int InstanceCont1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 challengeID = 1;
    if (has_challengeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeid());
    }

    // required int32 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required .ContParams params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  // repeated .SampleCont1 samples = 4;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceCont1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceCont1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceCont1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceCont1::MergeFrom(const InstanceCont1& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengeid()) {
      set_challengeid(from.challengeid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_params()) {
      mutable_params()->::ContParams::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceCont1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceCont1::CopyFrom(const InstanceCont1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceCont1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->samples())) return false;
  return true;
}

void InstanceCont1::Swap(InstanceCont1* other) {
  if (other != this) {
    std::swap(challengeid_, other->challengeid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(params_, other->params_);
    samples_.Swap(&other->samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceCont1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceCont1_descriptor_;
  metadata.reflection = InstanceCont1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceDisc1::kChallengeIDFieldNumber;
const int InstanceDisc1::kInstanceIDFieldNumber;
const int InstanceDisc1::kParamsFieldNumber;
const int InstanceDisc1::kSamplesFieldNumber;
#endif  // !_MSC_VER

InstanceDisc1::InstanceDisc1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InstanceDisc1)
}

void InstanceDisc1::InitAsDefaultInstance() {
  params_ = const_cast< ::DiscParams*>(&::DiscParams::default_instance());
}

InstanceDisc1::InstanceDisc1(const InstanceDisc1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InstanceDisc1)
}

void InstanceDisc1::SharedCtor() {
  _cached_size_ = 0;
  challengeid_ = 0;
  instanceid_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceDisc1::~InstanceDisc1() {
  // @@protoc_insertion_point(destructor:InstanceDisc1)
  SharedDtor();
}

void InstanceDisc1::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void InstanceDisc1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceDisc1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceDisc1_descriptor_;
}

const InstanceDisc1& InstanceDisc1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

InstanceDisc1* InstanceDisc1::default_instance_ = NULL;

InstanceDisc1* InstanceDisc1::New() const {
  return new InstanceDisc1;
}

void InstanceDisc1::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstanceDisc1*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(challengeid_, instanceid_);
    if (has_params()) {
      if (params_ != NULL) params_->::DiscParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceDisc1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InstanceDisc1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 challengeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeid_)));
          set_has_challengeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // required int32 instanceID = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // required .DiscParams params = 3;
      case 3: {
        if (tag == 26) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        break;
      }

      // repeated .SampleDisc1 samples = 4;
      case 4: {
        if (tag == 34) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InstanceDisc1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InstanceDisc1)
  return false;
#undef DO_
}

void InstanceDisc1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InstanceDisc1)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challengeid(), output);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  // required .DiscParams params = 3;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params(), output);
  }

  // repeated .SampleDisc1 samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->samples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InstanceDisc1)
}

::google::protobuf::uint8* InstanceDisc1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstanceDisc1)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->challengeid(), target);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  // required .DiscParams params = 3;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->params(), target);
  }

  // repeated .SampleDisc1 samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->samples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstanceDisc1)
  return target;
}

int InstanceDisc1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 challengeID = 1;
    if (has_challengeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeid());
    }

    // required int32 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required .DiscParams params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  // repeated .SampleDisc1 samples = 4;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceDisc1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceDisc1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceDisc1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceDisc1::MergeFrom(const InstanceDisc1& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengeid()) {
      set_challengeid(from.challengeid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_params()) {
      mutable_params()->::DiscParams::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceDisc1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceDisc1::CopyFrom(const InstanceDisc1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceDisc1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->samples())) return false;
  return true;
}

void InstanceDisc1::Swap(InstanceDisc1* other) {
  if (other != this) {
    std::swap(challengeid_, other->challengeid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(params_, other->params_);
    samples_.Swap(&other->samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceDisc1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceDisc1_descriptor_;
  metadata.reflection = InstanceDisc1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceRLWR1::kChallengeIDFieldNumber;
const int InstanceRLWR1::kInstanceIDFieldNumber;
const int InstanceRLWR1::kParamsFieldNumber;
const int InstanceRLWR1::kSamplesFieldNumber;
#endif  // !_MSC_VER

InstanceRLWR1::InstanceRLWR1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InstanceRLWR1)
}

void InstanceRLWR1::InitAsDefaultInstance() {
  params_ = const_cast< ::RLWRParams*>(&::RLWRParams::default_instance());
}

InstanceRLWR1::InstanceRLWR1(const InstanceRLWR1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InstanceRLWR1)
}

void InstanceRLWR1::SharedCtor() {
  _cached_size_ = 0;
  challengeid_ = 0;
  instanceid_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceRLWR1::~InstanceRLWR1() {
  // @@protoc_insertion_point(destructor:InstanceRLWR1)
  SharedDtor();
}

void InstanceRLWR1::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void InstanceRLWR1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceRLWR1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceRLWR1_descriptor_;
}

const InstanceRLWR1& InstanceRLWR1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

InstanceRLWR1* InstanceRLWR1::default_instance_ = NULL;

InstanceRLWR1* InstanceRLWR1::New() const {
  return new InstanceRLWR1;
}

void InstanceRLWR1::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstanceRLWR1*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(challengeid_, instanceid_);
    if (has_params()) {
      if (params_ != NULL) params_->::RLWRParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceRLWR1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InstanceRLWR1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 challengeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeid_)));
          set_has_challengeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // required int32 instanceID = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // required .RLWRParams params = 3;
      case 3: {
        if (tag == 26) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        break;
      }

      // repeated .SampleRLWR1 samples = 4;
      case 4: {
        if (tag == 34) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InstanceRLWR1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InstanceRLWR1)
  return false;
#undef DO_
}

void InstanceRLWR1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InstanceRLWR1)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challengeid(), output);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  // required .RLWRParams params = 3;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params(), output);
  }

  // repeated .SampleRLWR1 samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->samples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InstanceRLWR1)
}

::google::protobuf::uint8* InstanceRLWR1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstanceRLWR1)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->challengeid(), target);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  // required .RLWRParams params = 3;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->params(), target);
  }

  // repeated .SampleRLWR1 samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->samples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstanceRLWR1)
  return target;
}

int InstanceRLWR1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 challengeID = 1;
    if (has_challengeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeid());
    }

    // required int32 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required .RLWRParams params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  // repeated .SampleRLWR1 samples = 4;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceRLWR1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceRLWR1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceRLWR1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceRLWR1::MergeFrom(const InstanceRLWR1& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengeid()) {
      set_challengeid(from.challengeid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_params()) {
      mutable_params()->::RLWRParams::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceRLWR1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceRLWR1::CopyFrom(const InstanceRLWR1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceRLWR1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->samples())) return false;
  return true;
}

void InstanceRLWR1::Swap(InstanceRLWR1* other) {
  if (other != this) {
    std::swap(challengeid_, other->challengeid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(params_, other->params_);
    samples_.Swap(&other->samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceRLWR1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceRLWR1_descriptor_;
  metadata.reflection = InstanceRLWR1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceCont::kChallengeIDFieldNumber;
const int InstanceCont::kInstanceIDFieldNumber;
const int InstanceCont::kParamsFieldNumber;
const int InstanceCont::kSamplesFieldNumber;
#endif  // !_MSC_VER

InstanceCont::InstanceCont()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InstanceCont)
}

void InstanceCont::InitAsDefaultInstance() {
  params_ = const_cast< ::ContParams*>(&::ContParams::default_instance());
}

InstanceCont::InstanceCont(const InstanceCont& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InstanceCont)
}

void InstanceCont::SharedCtor() {
  _cached_size_ = 0;
  challengeid_ = 0;
  instanceid_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceCont::~InstanceCont() {
  // @@protoc_insertion_point(destructor:InstanceCont)
  SharedDtor();
}

void InstanceCont::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void InstanceCont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceCont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceCont_descriptor_;
}

const InstanceCont& InstanceCont::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

InstanceCont* InstanceCont::default_instance_ = NULL;

InstanceCont* InstanceCont::New() const {
  return new InstanceCont;
}

void InstanceCont::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstanceCont*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(challengeid_, instanceid_);
    if (has_params()) {
      if (params_ != NULL) params_->::ContParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceCont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InstanceCont)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 challengeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeid_)));
          set_has_challengeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // required int32 instanceID = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // required .ContParams params = 3;
      case 3: {
        if (tag == 26) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        break;
      }

      // repeated .SampleCont samples = 4;
      case 4: {
        if (tag == 34) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InstanceCont)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InstanceCont)
  return false;
#undef DO_
}

void InstanceCont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InstanceCont)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challengeid(), output);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  // required .ContParams params = 3;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params(), output);
  }

  // repeated .SampleCont samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->samples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InstanceCont)
}

::google::protobuf::uint8* InstanceCont::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstanceCont)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->challengeid(), target);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  // required .ContParams params = 3;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->params(), target);
  }

  // repeated .SampleCont samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->samples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstanceCont)
  return target;
}

int InstanceCont::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 challengeID = 1;
    if (has_challengeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeid());
    }

    // required int32 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required .ContParams params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  // repeated .SampleCont samples = 4;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceCont::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceCont* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceCont*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceCont::MergeFrom(const InstanceCont& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengeid()) {
      set_challengeid(from.challengeid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_params()) {
      mutable_params()->::ContParams::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceCont::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceCont::CopyFrom(const InstanceCont& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceCont::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->samples())) return false;
  return true;
}

void InstanceCont::Swap(InstanceCont* other) {
  if (other != this) {
    std::swap(challengeid_, other->challengeid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(params_, other->params_);
    samples_.Swap(&other->samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceCont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceCont_descriptor_;
  metadata.reflection = InstanceCont_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceDisc::kChallengeIDFieldNumber;
const int InstanceDisc::kInstanceIDFieldNumber;
const int InstanceDisc::kParamsFieldNumber;
const int InstanceDisc::kSamplesFieldNumber;
#endif  // !_MSC_VER

InstanceDisc::InstanceDisc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InstanceDisc)
}

void InstanceDisc::InitAsDefaultInstance() {
  params_ = const_cast< ::DiscParams*>(&::DiscParams::default_instance());
}

InstanceDisc::InstanceDisc(const InstanceDisc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InstanceDisc)
}

void InstanceDisc::SharedCtor() {
  _cached_size_ = 0;
  challengeid_ = 0;
  instanceid_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceDisc::~InstanceDisc() {
  // @@protoc_insertion_point(destructor:InstanceDisc)
  SharedDtor();
}

void InstanceDisc::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void InstanceDisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceDisc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceDisc_descriptor_;
}

const InstanceDisc& InstanceDisc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

InstanceDisc* InstanceDisc::default_instance_ = NULL;

InstanceDisc* InstanceDisc::New() const {
  return new InstanceDisc;
}

void InstanceDisc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstanceDisc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(challengeid_, instanceid_);
    if (has_params()) {
      if (params_ != NULL) params_->::DiscParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceDisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InstanceDisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 challengeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeid_)));
          set_has_challengeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // required int32 instanceID = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // required .DiscParams params = 3;
      case 3: {
        if (tag == 26) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        break;
      }

      // repeated .SampleDisc samples = 4;
      case 4: {
        if (tag == 34) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InstanceDisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InstanceDisc)
  return false;
#undef DO_
}

void InstanceDisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InstanceDisc)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challengeid(), output);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  // required .DiscParams params = 3;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params(), output);
  }

  // repeated .SampleDisc samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->samples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InstanceDisc)
}

::google::protobuf::uint8* InstanceDisc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstanceDisc)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->challengeid(), target);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  // required .DiscParams params = 3;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->params(), target);
  }

  // repeated .SampleDisc samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->samples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstanceDisc)
  return target;
}

int InstanceDisc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 challengeID = 1;
    if (has_challengeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeid());
    }

    // required int32 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required .DiscParams params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  // repeated .SampleDisc samples = 4;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceDisc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceDisc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceDisc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceDisc::MergeFrom(const InstanceDisc& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengeid()) {
      set_challengeid(from.challengeid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_params()) {
      mutable_params()->::DiscParams::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceDisc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceDisc::CopyFrom(const InstanceDisc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceDisc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->samples())) return false;
  return true;
}

void InstanceDisc::Swap(InstanceDisc* other) {
  if (other != this) {
    std::swap(challengeid_, other->challengeid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(params_, other->params_);
    samples_.Swap(&other->samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceDisc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceDisc_descriptor_;
  metadata.reflection = InstanceDisc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceRLWR::kChallengeIDFieldNumber;
const int InstanceRLWR::kInstanceIDFieldNumber;
const int InstanceRLWR::kParamsFieldNumber;
const int InstanceRLWR::kSamplesFieldNumber;
#endif  // !_MSC_VER

InstanceRLWR::InstanceRLWR()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InstanceRLWR)
}

void InstanceRLWR::InitAsDefaultInstance() {
  params_ = const_cast< ::RLWRParams*>(&::RLWRParams::default_instance());
}

InstanceRLWR::InstanceRLWR(const InstanceRLWR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InstanceRLWR)
}

void InstanceRLWR::SharedCtor() {
  _cached_size_ = 0;
  challengeid_ = 0;
  instanceid_ = 0;
  params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceRLWR::~InstanceRLWR() {
  // @@protoc_insertion_point(destructor:InstanceRLWR)
  SharedDtor();
}

void InstanceRLWR::SharedDtor() {
  if (this != default_instance_) {
    delete params_;
  }
}

void InstanceRLWR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceRLWR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceRLWR_descriptor_;
}

const InstanceRLWR& InstanceRLWR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

InstanceRLWR* InstanceRLWR::default_instance_ = NULL;

InstanceRLWR* InstanceRLWR::New() const {
  return new InstanceRLWR;
}

void InstanceRLWR::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InstanceRLWR*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(challengeid_, instanceid_);
    if (has_params()) {
      if (params_ != NULL) params_->::RLWRParams::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  samples_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceRLWR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InstanceRLWR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 challengeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeid_)));
          set_has_challengeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // required int32 instanceID = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_params;
        break;
      }

      // required .RLWRParams params = 3;
      case 3: {
        if (tag == 26) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        break;
      }

      // repeated .SampleRLWR samples = 4;
      case 4: {
        if (tag == 34) {
         parse_samples:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_samples()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_samples;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InstanceRLWR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InstanceRLWR)
  return false;
#undef DO_
}

void InstanceRLWR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InstanceRLWR)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challengeid(), output);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  // required .RLWRParams params = 3;
  if (has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->params(), output);
  }

  // repeated .SampleRLWR samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->samples(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InstanceRLWR)
}

::google::protobuf::uint8* InstanceRLWR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InstanceRLWR)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->challengeid(), target);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  // required .RLWRParams params = 3;
  if (has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->params(), target);
  }

  // repeated .SampleRLWR samples = 4;
  for (int i = 0; i < this->samples_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->samples(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InstanceRLWR)
  return target;
}

int InstanceRLWR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 challengeID = 1;
    if (has_challengeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeid());
    }

    // required int32 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required .RLWRParams params = 3;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->params());
    }

  }
  // repeated .SampleRLWR samples = 4;
  total_size += 1 * this->samples_size();
  for (int i = 0; i < this->samples_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->samples(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceRLWR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceRLWR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceRLWR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceRLWR::MergeFrom(const InstanceRLWR& from) {
  GOOGLE_CHECK_NE(&from, this);
  samples_.MergeFrom(from.samples_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengeid()) {
      set_challengeid(from.challengeid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_params()) {
      mutable_params()->::RLWRParams::MergeFrom(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceRLWR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceRLWR::CopyFrom(const InstanceRLWR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceRLWR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_params()) {
    if (!this->params().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->samples())) return false;
  return true;
}

void InstanceRLWR::Swap(InstanceRLWR* other) {
  if (other != this) {
    std::swap(challengeid_, other->challengeid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(params_, other->params_);
    samples_.Swap(&other->samples_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceRLWR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceRLWR_descriptor_;
  metadata.reflection = InstanceRLWR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Secret1::kChallengeIDFieldNumber;
const int Secret1::kInstanceIDFieldNumber;
const int Secret1::kMFieldNumber;
const int Secret1::kQFieldNumber;
const int Secret1::kSeedFieldNumber;
const int Secret1::kSFieldNumber;
#endif  // !_MSC_VER

Secret1::Secret1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Secret1)
}

void Secret1::InitAsDefaultInstance() {
  s_ = const_cast< ::Rq1*>(&::Rq1::default_instance());
}

Secret1::Secret1(const Secret1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Secret1)
}

void Secret1::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  challengeid_ = 0;
  instanceid_ = 0;
  m_ = 0;
  q_ = GOOGLE_LONGLONG(0);
  seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secret1::~Secret1() {
  // @@protoc_insertion_point(destructor:Secret1)
  SharedDtor();
}

void Secret1::SharedDtor() {
  if (seed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seed_;
  }
  if (this != default_instance_) {
    delete s_;
  }
}

void Secret1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secret1_descriptor_;
}

const Secret1& Secret1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

Secret1* Secret1::default_instance_ = NULL;

Secret1* Secret1::New() const {
  return new Secret1;
}

void Secret1::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Secret1*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(challengeid_, q_);
    m_ = 0;
    if (has_seed()) {
      if (seed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        seed_->clear();
      }
    }
    if (has_s()) {
      if (s_ != NULL) s_->::Rq1::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Secret1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Secret1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 challengeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeid_)));
          set_has_challengeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // required int32 instanceID = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m;
        break;
      }

      // required int32 m = 3;
      case 3: {
        if (tag == 24) {
         parse_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_q;
        break;
      }

      // required int64 q = 4;
      case 4: {
        if (tag == 32) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &q_)));
          set_has_q();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_seed;
        break;
      }

      // required bytes seed = 5;
      case 5: {
        if (tag == 42) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_s;
        break;
      }

      // required .Rq1 s = 6;
      case 6: {
        if (tag == 50) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Secret1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Secret1)
  return false;
#undef DO_
}

void Secret1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Secret1)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challengeid(), output);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  // required int32 m = 3;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m(), output);
  }

  // required int64 q = 4;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->q(), output);
  }

  // required bytes seed = 5;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->seed(), output);
  }

  // required .Rq1 s = 6;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Secret1)
}

::google::protobuf::uint8* Secret1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Secret1)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->challengeid(), target);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  // required int32 m = 3;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m(), target);
  }

  // required int64 q = 4;
  if (has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->q(), target);
  }

  // required bytes seed = 5;
  if (has_seed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->seed(), target);
  }

  // required .Rq1 s = 6;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Secret1)
  return target;
}

int Secret1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 challengeID = 1;
    if (has_challengeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeid());
    }

    // required int32 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required int32 m = 3;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m());
    }

    // required int64 q = 4;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->q());
    }

    // required bytes seed = 5;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->seed());
    }

    // required .Rq1 s = 6;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Secret1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Secret1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secret1::MergeFrom(const Secret1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengeid()) {
      set_challengeid(from.challengeid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_q()) {
      set_q(from.q());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_s()) {
      mutable_s()->::Rq1::MergeFrom(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Secret1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret1::CopyFrom(const Secret1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret1::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_s()) {
    if (!this->s().IsInitialized()) return false;
  }
  return true;
}

void Secret1::Swap(Secret1* other) {
  if (other != this) {
    std::swap(challengeid_, other->challengeid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(m_, other->m_);
    std::swap(q_, other->q_);
    std::swap(seed_, other->seed_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Secret1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secret1_descriptor_;
  metadata.reflection = Secret1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Secret::kChallengeIDFieldNumber;
const int Secret::kInstanceIDFieldNumber;
const int Secret::kMFieldNumber;
const int Secret::kQFieldNumber;
const int Secret::kSeedFieldNumber;
const int Secret::kSFieldNumber;
#endif  // !_MSC_VER

Secret::Secret()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Secret)
}

void Secret::InitAsDefaultInstance() {
  s_ = const_cast< ::RqProduct*>(&::RqProduct::default_instance());
}

Secret::Secret(const Secret& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Secret)
}

void Secret::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  challengeid_ = 0;
  instanceid_ = 0;
  m_ = 0;
  q_ = GOOGLE_LONGLONG(0);
  seed_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Secret::~Secret() {
  // @@protoc_insertion_point(destructor:Secret)
  SharedDtor();
}

void Secret::SharedDtor() {
  if (seed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seed_;
  }
  if (this != default_instance_) {
    delete s_;
  }
}

void Secret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Secret_descriptor_;
}

const Secret& Secret::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Challenges_2eproto();
  return *default_instance_;
}

Secret* Secret::default_instance_ = NULL;

Secret* Secret::New() const {
  return new Secret;
}

void Secret::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Secret*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(challengeid_, q_);
    m_ = 0;
    if (has_seed()) {
      if (seed_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        seed_->clear();
      }
    }
    if (has_s()) {
      if (s_ != NULL) s_->::RqProduct::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Secret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Secret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 challengeID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengeid_)));
          set_has_challengeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instanceID;
        break;
      }

      // required int32 instanceID = 2;
      case 2: {
        if (tag == 16) {
         parse_instanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_m;
        break;
      }

      // required int32 m = 3;
      case 3: {
        if (tag == 24) {
         parse_m:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_)));
          set_has_m();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_q;
        break;
      }

      // required int64 q = 4;
      case 4: {
        if (tag == 32) {
         parse_q:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &q_)));
          set_has_q();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_seed;
        break;
      }

      // required bytes seed = 5;
      case 5: {
        if (tag == 42) {
         parse_seed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_seed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_s;
        break;
      }

      // required .RqProduct s = 6;
      case 6: {
        if (tag == 50) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_s()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Secret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Secret)
  return false;
#undef DO_
}

void Secret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Secret)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challengeid(), output);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  // required int32 m = 3;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m(), output);
  }

  // required int64 q = 4;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->q(), output);
  }

  // required bytes seed = 5;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->seed(), output);
  }

  // required .RqProduct s = 6;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->s(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Secret)
}

::google::protobuf::uint8* Secret::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Secret)
  // required int32 challengeID = 1;
  if (has_challengeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->challengeid(), target);
  }

  // required int32 instanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  // required int32 m = 3;
  if (has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m(), target);
  }

  // required int64 q = 4;
  if (has_q()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->q(), target);
  }

  // required bytes seed = 5;
  if (has_seed()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->seed(), target);
  }

  // required .RqProduct s = 6;
  if (has_s()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->s(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Secret)
  return target;
}

int Secret::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 challengeID = 1;
    if (has_challengeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengeid());
    }

    // required int32 instanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required int32 m = 3;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m());
    }

    // required int64 q = 4;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->q());
    }

    // required bytes seed = 5;
    if (has_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->seed());
    }

    // required .RqProduct s = 6;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->s());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Secret* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Secret*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Secret::MergeFrom(const Secret& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengeid()) {
      set_challengeid(from.challengeid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_q()) {
      set_q(from.q());
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_s()) {
      mutable_s()->::RqProduct::MergeFrom(from.s());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Secret::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret::CopyFrom(const Secret& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_s()) {
    if (!this->s().IsInitialized()) return false;
  }
  return true;
}

void Secret::Swap(Secret* other) {
  if (other != this) {
    std::swap(challengeid_, other->challengeid_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(m_, other->m_);
    std::swap(q_, other->q_);
    std::swap(seed_, other->seed_);
    std::swap(s_, other->s_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Secret::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Secret_descriptor_;
  metadata.reflection = Secret_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
