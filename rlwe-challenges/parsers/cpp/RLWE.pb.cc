// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RLWE.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RLWE.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SampleCont1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleCont1_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleDisc1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleDisc1_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleRLWR1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleRLWR1_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleCont_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleCont_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleDisc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleDisc_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleRLWR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleRLWR_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RLWE_2eproto() {
  protobuf_AddDesc_RLWE_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RLWE.proto");
  GOOGLE_CHECK(file != NULL);
  SampleCont1_descriptor_ = file->message_type(0);
  static const int SampleCont1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleCont1, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleCont1, b_),
  };
  SampleCont1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleCont1_descriptor_,
      SampleCont1::default_instance_,
      SampleCont1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleCont1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleCont1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleCont1));
  SampleDisc1_descriptor_ = file->message_type(1);
  static const int SampleDisc1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleDisc1, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleDisc1, b_),
  };
  SampleDisc1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleDisc1_descriptor_,
      SampleDisc1::default_instance_,
      SampleDisc1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleDisc1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleDisc1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleDisc1));
  SampleRLWR1_descriptor_ = file->message_type(2);
  static const int SampleRLWR1_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRLWR1, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRLWR1, b_),
  };
  SampleRLWR1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleRLWR1_descriptor_,
      SampleRLWR1::default_instance_,
      SampleRLWR1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRLWR1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRLWR1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleRLWR1));
  SampleCont_descriptor_ = file->message_type(3);
  static const int SampleCont_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleCont, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleCont, b_),
  };
  SampleCont_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleCont_descriptor_,
      SampleCont::default_instance_,
      SampleCont_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleCont, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleCont, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleCont));
  SampleDisc_descriptor_ = file->message_type(4);
  static const int SampleDisc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleDisc, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleDisc, b_),
  };
  SampleDisc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleDisc_descriptor_,
      SampleDisc::default_instance_,
      SampleDisc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleDisc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleDisc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleDisc));
  SampleRLWR_descriptor_ = file->message_type(5);
  static const int SampleRLWR_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRLWR, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRLWR, b_),
  };
  SampleRLWR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleRLWR_descriptor_,
      SampleRLWR::default_instance_,
      SampleRLWR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRLWR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleRLWR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleRLWR));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RLWE_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleCont1_descriptor_, &SampleCont1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleDisc1_descriptor_, &SampleDisc1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleRLWR1_descriptor_, &SampleRLWR1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleCont_descriptor_, &SampleCont::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleDisc_descriptor_, &SampleDisc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleRLWR_descriptor_, &SampleRLWR::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RLWE_2eproto() {
  delete SampleCont1::default_instance_;
  delete SampleCont1_reflection_;
  delete SampleDisc1::default_instance_;
  delete SampleDisc1_reflection_;
  delete SampleRLWR1::default_instance_;
  delete SampleRLWR1_reflection_;
  delete SampleCont::default_instance_;
  delete SampleCont_reflection_;
  delete SampleDisc::default_instance_;
  delete SampleDisc_reflection_;
  delete SampleRLWR::default_instance_;
  delete SampleRLWR_reflection_;
}

void protobuf_AddDesc_RLWE_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_Lol_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nRLWE.proto\032\tLol.proto\"/\n\013SampleCont1\022\017"
    "\n\001a\030\001 \002(\0132\004.Rq1\022\017\n\001b\030\002 \002(\0132\004.Kq1\"/\n\013Samp"
    "leDisc1\022\017\n\001a\030\001 \002(\0132\004.Rq1\022\017\n\001b\030\002 \002(\0132\004.Rq"
    "1\"/\n\013SampleRLWR1\022\017\n\001a\030\001 \002(\0132\004.Rq1\022\017\n\001b\030\002"
    " \002(\0132\004.Rq1\":\n\nSampleCont\022\025\n\001a\030\001 \002(\0132\n.Rq"
    "Product\022\025\n\001b\030\002 \002(\0132\n.KqProduct\":\n\nSample"
    "Disc\022\025\n\001a\030\001 \002(\0132\n.RqProduct\022\025\n\001b\030\002 \002(\0132\n"
    ".RqProduct\":\n\nSampleRLWR\022\025\n\001a\030\001 \002(\0132\n.Rq"
    "Product\022\025\n\001b\030\002 \002(\0132\n.RqProduct", 350);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RLWE.proto", &protobuf_RegisterTypes);
  SampleCont1::default_instance_ = new SampleCont1();
  SampleDisc1::default_instance_ = new SampleDisc1();
  SampleRLWR1::default_instance_ = new SampleRLWR1();
  SampleCont::default_instance_ = new SampleCont();
  SampleDisc::default_instance_ = new SampleDisc();
  SampleRLWR::default_instance_ = new SampleRLWR();
  SampleCont1::default_instance_->InitAsDefaultInstance();
  SampleDisc1::default_instance_->InitAsDefaultInstance();
  SampleRLWR1::default_instance_->InitAsDefaultInstance();
  SampleCont::default_instance_->InitAsDefaultInstance();
  SampleDisc::default_instance_->InitAsDefaultInstance();
  SampleRLWR::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RLWE_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RLWE_2eproto {
  StaticDescriptorInitializer_RLWE_2eproto() {
    protobuf_AddDesc_RLWE_2eproto();
  }
} static_descriptor_initializer_RLWE_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SampleCont1::kAFieldNumber;
const int SampleCont1::kBFieldNumber;
#endif  // !_MSC_VER

SampleCont1::SampleCont1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SampleCont1)
}

void SampleCont1::InitAsDefaultInstance() {
  a_ = const_cast< ::Rq1*>(&::Rq1::default_instance());
  b_ = const_cast< ::Kq1*>(&::Kq1::default_instance());
}

SampleCont1::SampleCont1(const SampleCont1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SampleCont1)
}

void SampleCont1::SharedCtor() {
  _cached_size_ = 0;
  a_ = NULL;
  b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleCont1::~SampleCont1() {
  // @@protoc_insertion_point(destructor:SampleCont1)
  SharedDtor();
}

void SampleCont1::SharedDtor() {
  if (this != default_instance_) {
    delete a_;
    delete b_;
  }
}

void SampleCont1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleCont1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleCont1_descriptor_;
}

const SampleCont1& SampleCont1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RLWE_2eproto();
  return *default_instance_;
}

SampleCont1* SampleCont1::default_instance_ = NULL;

SampleCont1* SampleCont1::New() const {
  return new SampleCont1;
}

void SampleCont1::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_a()) {
      if (a_ != NULL) a_->::Rq1::Clear();
    }
    if (has_b()) {
      if (b_ != NULL) b_->::Kq1::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleCont1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SampleCont1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Rq1 a = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // required .Kq1 b = 2;
      case 2: {
        if (tag == 18) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SampleCont1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SampleCont1)
  return false;
#undef DO_
}

void SampleCont1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SampleCont1)
  // required .Rq1 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->a(), output);
  }

  // required .Kq1 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SampleCont1)
}

::google::protobuf::uint8* SampleCont1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SampleCont1)
  // required .Rq1 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->a(), target);
  }

  // required .Kq1 b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SampleCont1)
  return target;
}

int SampleCont1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Rq1 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a());
    }

    // required .Kq1 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleCont1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleCont1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleCont1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleCont1::MergeFrom(const SampleCont1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      mutable_a()->::Rq1::MergeFrom(from.a());
    }
    if (from.has_b()) {
      mutable_b()->::Kq1::MergeFrom(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleCont1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleCont1::CopyFrom(const SampleCont1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleCont1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_a()) {
    if (!this->a().IsInitialized()) return false;
  }
  if (has_b()) {
    if (!this->b().IsInitialized()) return false;
  }
  return true;
}

void SampleCont1::Swap(SampleCont1* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleCont1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleCont1_descriptor_;
  metadata.reflection = SampleCont1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SampleDisc1::kAFieldNumber;
const int SampleDisc1::kBFieldNumber;
#endif  // !_MSC_VER

SampleDisc1::SampleDisc1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SampleDisc1)
}

void SampleDisc1::InitAsDefaultInstance() {
  a_ = const_cast< ::Rq1*>(&::Rq1::default_instance());
  b_ = const_cast< ::Rq1*>(&::Rq1::default_instance());
}

SampleDisc1::SampleDisc1(const SampleDisc1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SampleDisc1)
}

void SampleDisc1::SharedCtor() {
  _cached_size_ = 0;
  a_ = NULL;
  b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleDisc1::~SampleDisc1() {
  // @@protoc_insertion_point(destructor:SampleDisc1)
  SharedDtor();
}

void SampleDisc1::SharedDtor() {
  if (this != default_instance_) {
    delete a_;
    delete b_;
  }
}

void SampleDisc1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleDisc1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleDisc1_descriptor_;
}

const SampleDisc1& SampleDisc1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RLWE_2eproto();
  return *default_instance_;
}

SampleDisc1* SampleDisc1::default_instance_ = NULL;

SampleDisc1* SampleDisc1::New() const {
  return new SampleDisc1;
}

void SampleDisc1::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_a()) {
      if (a_ != NULL) a_->::Rq1::Clear();
    }
    if (has_b()) {
      if (b_ != NULL) b_->::Rq1::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleDisc1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SampleDisc1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Rq1 a = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // required .Rq1 b = 2;
      case 2: {
        if (tag == 18) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SampleDisc1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SampleDisc1)
  return false;
#undef DO_
}

void SampleDisc1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SampleDisc1)
  // required .Rq1 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->a(), output);
  }

  // required .Rq1 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SampleDisc1)
}

::google::protobuf::uint8* SampleDisc1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SampleDisc1)
  // required .Rq1 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->a(), target);
  }

  // required .Rq1 b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SampleDisc1)
  return target;
}

int SampleDisc1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Rq1 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a());
    }

    // required .Rq1 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleDisc1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleDisc1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleDisc1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleDisc1::MergeFrom(const SampleDisc1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      mutable_a()->::Rq1::MergeFrom(from.a());
    }
    if (from.has_b()) {
      mutable_b()->::Rq1::MergeFrom(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleDisc1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleDisc1::CopyFrom(const SampleDisc1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleDisc1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_a()) {
    if (!this->a().IsInitialized()) return false;
  }
  if (has_b()) {
    if (!this->b().IsInitialized()) return false;
  }
  return true;
}

void SampleDisc1::Swap(SampleDisc1* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleDisc1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleDisc1_descriptor_;
  metadata.reflection = SampleDisc1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SampleRLWR1::kAFieldNumber;
const int SampleRLWR1::kBFieldNumber;
#endif  // !_MSC_VER

SampleRLWR1::SampleRLWR1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SampleRLWR1)
}

void SampleRLWR1::InitAsDefaultInstance() {
  a_ = const_cast< ::Rq1*>(&::Rq1::default_instance());
  b_ = const_cast< ::Rq1*>(&::Rq1::default_instance());
}

SampleRLWR1::SampleRLWR1(const SampleRLWR1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SampleRLWR1)
}

void SampleRLWR1::SharedCtor() {
  _cached_size_ = 0;
  a_ = NULL;
  b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleRLWR1::~SampleRLWR1() {
  // @@protoc_insertion_point(destructor:SampleRLWR1)
  SharedDtor();
}

void SampleRLWR1::SharedDtor() {
  if (this != default_instance_) {
    delete a_;
    delete b_;
  }
}

void SampleRLWR1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleRLWR1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleRLWR1_descriptor_;
}

const SampleRLWR1& SampleRLWR1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RLWE_2eproto();
  return *default_instance_;
}

SampleRLWR1* SampleRLWR1::default_instance_ = NULL;

SampleRLWR1* SampleRLWR1::New() const {
  return new SampleRLWR1;
}

void SampleRLWR1::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_a()) {
      if (a_ != NULL) a_->::Rq1::Clear();
    }
    if (has_b()) {
      if (b_ != NULL) b_->::Rq1::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleRLWR1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SampleRLWR1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Rq1 a = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // required .Rq1 b = 2;
      case 2: {
        if (tag == 18) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SampleRLWR1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SampleRLWR1)
  return false;
#undef DO_
}

void SampleRLWR1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SampleRLWR1)
  // required .Rq1 a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->a(), output);
  }

  // required .Rq1 b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SampleRLWR1)
}

::google::protobuf::uint8* SampleRLWR1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SampleRLWR1)
  // required .Rq1 a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->a(), target);
  }

  // required .Rq1 b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SampleRLWR1)
  return target;
}

int SampleRLWR1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Rq1 a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a());
    }

    // required .Rq1 b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleRLWR1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleRLWR1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleRLWR1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleRLWR1::MergeFrom(const SampleRLWR1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      mutable_a()->::Rq1::MergeFrom(from.a());
    }
    if (from.has_b()) {
      mutable_b()->::Rq1::MergeFrom(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleRLWR1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleRLWR1::CopyFrom(const SampleRLWR1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleRLWR1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_a()) {
    if (!this->a().IsInitialized()) return false;
  }
  if (has_b()) {
    if (!this->b().IsInitialized()) return false;
  }
  return true;
}

void SampleRLWR1::Swap(SampleRLWR1* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleRLWR1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleRLWR1_descriptor_;
  metadata.reflection = SampleRLWR1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SampleCont::kAFieldNumber;
const int SampleCont::kBFieldNumber;
#endif  // !_MSC_VER

SampleCont::SampleCont()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SampleCont)
}

void SampleCont::InitAsDefaultInstance() {
  a_ = const_cast< ::RqProduct*>(&::RqProduct::default_instance());
  b_ = const_cast< ::KqProduct*>(&::KqProduct::default_instance());
}

SampleCont::SampleCont(const SampleCont& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SampleCont)
}

void SampleCont::SharedCtor() {
  _cached_size_ = 0;
  a_ = NULL;
  b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleCont::~SampleCont() {
  // @@protoc_insertion_point(destructor:SampleCont)
  SharedDtor();
}

void SampleCont::SharedDtor() {
  if (this != default_instance_) {
    delete a_;
    delete b_;
  }
}

void SampleCont::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleCont::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleCont_descriptor_;
}

const SampleCont& SampleCont::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RLWE_2eproto();
  return *default_instance_;
}

SampleCont* SampleCont::default_instance_ = NULL;

SampleCont* SampleCont::New() const {
  return new SampleCont;
}

void SampleCont::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_a()) {
      if (a_ != NULL) a_->::RqProduct::Clear();
    }
    if (has_b()) {
      if (b_ != NULL) b_->::KqProduct::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleCont::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SampleCont)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RqProduct a = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // required .KqProduct b = 2;
      case 2: {
        if (tag == 18) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SampleCont)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SampleCont)
  return false;
#undef DO_
}

void SampleCont::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SampleCont)
  // required .RqProduct a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->a(), output);
  }

  // required .KqProduct b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SampleCont)
}

::google::protobuf::uint8* SampleCont::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SampleCont)
  // required .RqProduct a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->a(), target);
  }

  // required .KqProduct b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SampleCont)
  return target;
}

int SampleCont::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RqProduct a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a());
    }

    // required .KqProduct b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleCont::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleCont* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleCont*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleCont::MergeFrom(const SampleCont& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      mutable_a()->::RqProduct::MergeFrom(from.a());
    }
    if (from.has_b()) {
      mutable_b()->::KqProduct::MergeFrom(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleCont::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleCont::CopyFrom(const SampleCont& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleCont::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_a()) {
    if (!this->a().IsInitialized()) return false;
  }
  if (has_b()) {
    if (!this->b().IsInitialized()) return false;
  }
  return true;
}

void SampleCont::Swap(SampleCont* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleCont::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleCont_descriptor_;
  metadata.reflection = SampleCont_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SampleDisc::kAFieldNumber;
const int SampleDisc::kBFieldNumber;
#endif  // !_MSC_VER

SampleDisc::SampleDisc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SampleDisc)
}

void SampleDisc::InitAsDefaultInstance() {
  a_ = const_cast< ::RqProduct*>(&::RqProduct::default_instance());
  b_ = const_cast< ::RqProduct*>(&::RqProduct::default_instance());
}

SampleDisc::SampleDisc(const SampleDisc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SampleDisc)
}

void SampleDisc::SharedCtor() {
  _cached_size_ = 0;
  a_ = NULL;
  b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleDisc::~SampleDisc() {
  // @@protoc_insertion_point(destructor:SampleDisc)
  SharedDtor();
}

void SampleDisc::SharedDtor() {
  if (this != default_instance_) {
    delete a_;
    delete b_;
  }
}

void SampleDisc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleDisc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleDisc_descriptor_;
}

const SampleDisc& SampleDisc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RLWE_2eproto();
  return *default_instance_;
}

SampleDisc* SampleDisc::default_instance_ = NULL;

SampleDisc* SampleDisc::New() const {
  return new SampleDisc;
}

void SampleDisc::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_a()) {
      if (a_ != NULL) a_->::RqProduct::Clear();
    }
    if (has_b()) {
      if (b_ != NULL) b_->::RqProduct::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleDisc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SampleDisc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RqProduct a = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // required .RqProduct b = 2;
      case 2: {
        if (tag == 18) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SampleDisc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SampleDisc)
  return false;
#undef DO_
}

void SampleDisc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SampleDisc)
  // required .RqProduct a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->a(), output);
  }

  // required .RqProduct b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SampleDisc)
}

::google::protobuf::uint8* SampleDisc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SampleDisc)
  // required .RqProduct a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->a(), target);
  }

  // required .RqProduct b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SampleDisc)
  return target;
}

int SampleDisc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RqProduct a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a());
    }

    // required .RqProduct b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleDisc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleDisc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleDisc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleDisc::MergeFrom(const SampleDisc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      mutable_a()->::RqProduct::MergeFrom(from.a());
    }
    if (from.has_b()) {
      mutable_b()->::RqProduct::MergeFrom(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleDisc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleDisc::CopyFrom(const SampleDisc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleDisc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_a()) {
    if (!this->a().IsInitialized()) return false;
  }
  if (has_b()) {
    if (!this->b().IsInitialized()) return false;
  }
  return true;
}

void SampleDisc::Swap(SampleDisc* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleDisc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleDisc_descriptor_;
  metadata.reflection = SampleDisc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SampleRLWR::kAFieldNumber;
const int SampleRLWR::kBFieldNumber;
#endif  // !_MSC_VER

SampleRLWR::SampleRLWR()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SampleRLWR)
}

void SampleRLWR::InitAsDefaultInstance() {
  a_ = const_cast< ::RqProduct*>(&::RqProduct::default_instance());
  b_ = const_cast< ::RqProduct*>(&::RqProduct::default_instance());
}

SampleRLWR::SampleRLWR(const SampleRLWR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SampleRLWR)
}

void SampleRLWR::SharedCtor() {
  _cached_size_ = 0;
  a_ = NULL;
  b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleRLWR::~SampleRLWR() {
  // @@protoc_insertion_point(destructor:SampleRLWR)
  SharedDtor();
}

void SampleRLWR::SharedDtor() {
  if (this != default_instance_) {
    delete a_;
    delete b_;
  }
}

void SampleRLWR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleRLWR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleRLWR_descriptor_;
}

const SampleRLWR& SampleRLWR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RLWE_2eproto();
  return *default_instance_;
}

SampleRLWR* SampleRLWR::default_instance_ = NULL;

SampleRLWR* SampleRLWR::New() const {
  return new SampleRLWR;
}

void SampleRLWR::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_a()) {
      if (a_ != NULL) a_->::RqProduct::Clear();
    }
    if (has_b()) {
      if (b_ != NULL) b_->::RqProduct::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleRLWR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SampleRLWR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RqProduct a = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }

      // required .RqProduct b = 2;
      case 2: {
        if (tag == 18) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SampleRLWR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SampleRLWR)
  return false;
#undef DO_
}

void SampleRLWR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SampleRLWR)
  // required .RqProduct a = 1;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->a(), output);
  }

  // required .RqProduct b = 2;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->b(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SampleRLWR)
}

::google::protobuf::uint8* SampleRLWR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SampleRLWR)
  // required .RqProduct a = 1;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->a(), target);
  }

  // required .RqProduct b = 2;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->b(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SampleRLWR)
  return target;
}

int SampleRLWR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RqProduct a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a());
    }

    // required .RqProduct b = 2;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->b());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleRLWR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleRLWR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleRLWR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleRLWR::MergeFrom(const SampleRLWR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_a()) {
      mutable_a()->::RqProduct::MergeFrom(from.a());
    }
    if (from.has_b()) {
      mutable_b()->::RqProduct::MergeFrom(from.b());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleRLWR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleRLWR::CopyFrom(const SampleRLWR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleRLWR::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_a()) {
    if (!this->a().IsInitialized()) return false;
  }
  if (has_b()) {
    if (!this->b().IsInitialized()) return false;
  }
  return true;
}

void SampleRLWR::Swap(SampleRLWR* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleRLWR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleRLWR_descriptor_;
  metadata.reflection = SampleRLWR_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
