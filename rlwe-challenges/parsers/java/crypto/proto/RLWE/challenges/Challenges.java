// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Challenges.proto

package crypto.proto.RLWE.challenges;

public final class Challenges {
  private Challenges() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ContParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.ContParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    boolean hasM();
    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    int getM();

    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    boolean hasQ();
    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    long getQ();

    /**
     * <code>required double svar = 3;</code>
     *
     * <pre>
     * scaled variance
     * </pre>
     */
    boolean hasSvar();
    /**
     * <code>required double svar = 3;</code>
     *
     * <pre>
     * scaled variance
     * </pre>
     */
    double getSvar();

    /**
     * <code>required double bound = 4;</code>
     *
     * <pre>
     * gSqNorm error bound
     * </pre>
     */
    boolean hasBound();
    /**
     * <code>required double bound = 4;</code>
     *
     * <pre>
     * gSqNorm error bound
     * </pre>
     */
    double getBound();

    /**
     * <code>required int32 numSamples = 5;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    boolean hasNumSamples();
    /**
     * <code>required int32 numSamples = 5;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    int getNumSamples();
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.ContParams}
   *
   * <pre>
   * continuous RLWE parameters
   * </pre>
   */
  public static final class ContParams extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.ContParams)
      ContParamsOrBuilder {
    // Use ContParams.newBuilder() to construct.
    private ContParams(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ContParams(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ContParams defaultInstance;
    public static ContParams getDefaultInstance() {
      return defaultInstance;
    }

    public ContParams getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ContParams(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              m_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              q_ = input.readInt64();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              svar_ = input.readDouble();
              break;
            }
            case 33: {
              bitField0_ |= 0x00000008;
              bound_ = input.readDouble();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              numSamples_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_ContParams_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_ContParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.ContParams.class, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder.class);
    }

    public static com.google.protobuf.Parser<ContParams> PARSER =
        new com.google.protobuf.AbstractParser<ContParams>() {
      public ContParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ContParams(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ContParams> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int M_FIELD_NUMBER = 1;
    private int m_;
    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    public boolean hasM() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    public int getM() {
      return m_;
    }

    public static final int Q_FIELD_NUMBER = 2;
    private long q_;
    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    public boolean hasQ() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    public long getQ() {
      return q_;
    }

    public static final int SVAR_FIELD_NUMBER = 3;
    private double svar_;
    /**
     * <code>required double svar = 3;</code>
     *
     * <pre>
     * scaled variance
     * </pre>
     */
    public boolean hasSvar() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double svar = 3;</code>
     *
     * <pre>
     * scaled variance
     * </pre>
     */
    public double getSvar() {
      return svar_;
    }

    public static final int BOUND_FIELD_NUMBER = 4;
    private double bound_;
    /**
     * <code>required double bound = 4;</code>
     *
     * <pre>
     * gSqNorm error bound
     * </pre>
     */
    public boolean hasBound() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required double bound = 4;</code>
     *
     * <pre>
     * gSqNorm error bound
     * </pre>
     */
    public double getBound() {
      return bound_;
    }

    public static final int NUMSAMPLES_FIELD_NUMBER = 5;
    private int numSamples_;
    /**
     * <code>required int32 numSamples = 5;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    public boolean hasNumSamples() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 numSamples = 5;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    public int getNumSamples() {
      return numSamples_;
    }

    private void initFields() {
      m_ = 0;
      q_ = 0L;
      svar_ = 0D;
      bound_ = 0D;
      numSamples_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasM()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasQ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSvar()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBound()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNumSamples()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, m_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, q_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, svar_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeDouble(4, bound_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, numSamples_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, m_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, q_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, svar_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(4, bound_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, numSamples_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.ContParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.ContParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.ContParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.ContParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.ContParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.ContParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.ContParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.ContParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.ContParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.ContParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.ContParams prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.ContParams}
     *
     * <pre>
     * continuous RLWE parameters
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.ContParams)
        crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_ContParams_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_ContParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.ContParams.class, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.ContParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        m_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        q_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        svar_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        bound_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000008);
        numSamples_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_ContParams_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.ContParams getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.ContParams build() {
        crypto.proto.RLWE.challenges.Challenges.ContParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.ContParams buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.ContParams result = new crypto.proto.RLWE.challenges.Challenges.ContParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.m_ = m_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.q_ = q_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.svar_ = svar_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bound_ = bound_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.numSamples_ = numSamples_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.ContParams) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.ContParams)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.ContParams other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance()) return this;
        if (other.hasM()) {
          setM(other.getM());
        }
        if (other.hasQ()) {
          setQ(other.getQ());
        }
        if (other.hasSvar()) {
          setSvar(other.getSvar());
        }
        if (other.hasBound()) {
          setBound(other.getBound());
        }
        if (other.hasNumSamples()) {
          setNumSamples(other.getNumSamples());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasM()) {
          
          return false;
        }
        if (!hasQ()) {
          
          return false;
        }
        if (!hasSvar()) {
          
          return false;
        }
        if (!hasBound()) {
          
          return false;
        }
        if (!hasNumSamples()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.ContParams parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.ContParams) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int m_ ;
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public boolean hasM() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public int getM() {
        return m_;
      }
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public Builder setM(int value) {
        bitField0_ |= 0x00000001;
        m_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public Builder clearM() {
        bitField0_ = (bitField0_ & ~0x00000001);
        m_ = 0;
        onChanged();
        return this;
      }

      private long q_ ;
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public boolean hasQ() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public long getQ() {
        return q_;
      }
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public Builder setQ(long value) {
        bitField0_ |= 0x00000002;
        q_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public Builder clearQ() {
        bitField0_ = (bitField0_ & ~0x00000002);
        q_ = 0L;
        onChanged();
        return this;
      }

      private double svar_ ;
      /**
       * <code>required double svar = 3;</code>
       *
       * <pre>
       * scaled variance
       * </pre>
       */
      public boolean hasSvar() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double svar = 3;</code>
       *
       * <pre>
       * scaled variance
       * </pre>
       */
      public double getSvar() {
        return svar_;
      }
      /**
       * <code>required double svar = 3;</code>
       *
       * <pre>
       * scaled variance
       * </pre>
       */
      public Builder setSvar(double value) {
        bitField0_ |= 0x00000004;
        svar_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double svar = 3;</code>
       *
       * <pre>
       * scaled variance
       * </pre>
       */
      public Builder clearSvar() {
        bitField0_ = (bitField0_ & ~0x00000004);
        svar_ = 0D;
        onChanged();
        return this;
      }

      private double bound_ ;
      /**
       * <code>required double bound = 4;</code>
       *
       * <pre>
       * gSqNorm error bound
       * </pre>
       */
      public boolean hasBound() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required double bound = 4;</code>
       *
       * <pre>
       * gSqNorm error bound
       * </pre>
       */
      public double getBound() {
        return bound_;
      }
      /**
       * <code>required double bound = 4;</code>
       *
       * <pre>
       * gSqNorm error bound
       * </pre>
       */
      public Builder setBound(double value) {
        bitField0_ |= 0x00000008;
        bound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double bound = 4;</code>
       *
       * <pre>
       * gSqNorm error bound
       * </pre>
       */
      public Builder clearBound() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bound_ = 0D;
        onChanged();
        return this;
      }

      private int numSamples_ ;
      /**
       * <code>required int32 numSamples = 5;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public boolean hasNumSamples() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 numSamples = 5;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public int getNumSamples() {
        return numSamples_;
      }
      /**
       * <code>required int32 numSamples = 5;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public Builder setNumSamples(int value) {
        bitField0_ |= 0x00000010;
        numSamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 numSamples = 5;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public Builder clearNumSamples() {
        bitField0_ = (bitField0_ & ~0x00000010);
        numSamples_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.ContParams)
    }

    static {
      defaultInstance = new ContParams(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.ContParams)
  }

  public interface DiscParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.DiscParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    boolean hasM();
    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    int getM();

    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    boolean hasQ();
    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    long getQ();

    /**
     * <code>required double svar = 3;</code>
     *
     * <pre>
     * scaled variance
     * </pre>
     */
    boolean hasSvar();
    /**
     * <code>required double svar = 3;</code>
     *
     * <pre>
     * scaled variance
     * </pre>
     */
    double getSvar();

    /**
     * <code>required int64 bound = 4;</code>
     *
     * <pre>
     * gSqNorm error bound
     * </pre>
     */
    boolean hasBound();
    /**
     * <code>required int64 bound = 4;</code>
     *
     * <pre>
     * gSqNorm error bound
     * </pre>
     */
    long getBound();

    /**
     * <code>required int32 numSamples = 5;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    boolean hasNumSamples();
    /**
     * <code>required int32 numSamples = 5;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    int getNumSamples();
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.DiscParams}
   *
   * <pre>
   * discrete RLWE parameters
   * </pre>
   */
  public static final class DiscParams extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.DiscParams)
      DiscParamsOrBuilder {
    // Use DiscParams.newBuilder() to construct.
    private DiscParams(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiscParams(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiscParams defaultInstance;
    public static DiscParams getDefaultInstance() {
      return defaultInstance;
    }

    public DiscParams getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiscParams(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              m_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              q_ = input.readInt64();
              break;
            }
            case 25: {
              bitField0_ |= 0x00000004;
              svar_ = input.readDouble();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              bound_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              numSamples_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_DiscParams_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_DiscParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.DiscParams.class, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder.class);
    }

    public static com.google.protobuf.Parser<DiscParams> PARSER =
        new com.google.protobuf.AbstractParser<DiscParams>() {
      public DiscParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiscParams(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiscParams> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int M_FIELD_NUMBER = 1;
    private int m_;
    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    public boolean hasM() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    public int getM() {
      return m_;
    }

    public static final int Q_FIELD_NUMBER = 2;
    private long q_;
    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    public boolean hasQ() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    public long getQ() {
      return q_;
    }

    public static final int SVAR_FIELD_NUMBER = 3;
    private double svar_;
    /**
     * <code>required double svar = 3;</code>
     *
     * <pre>
     * scaled variance
     * </pre>
     */
    public boolean hasSvar() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required double svar = 3;</code>
     *
     * <pre>
     * scaled variance
     * </pre>
     */
    public double getSvar() {
      return svar_;
    }

    public static final int BOUND_FIELD_NUMBER = 4;
    private long bound_;
    /**
     * <code>required int64 bound = 4;</code>
     *
     * <pre>
     * gSqNorm error bound
     * </pre>
     */
    public boolean hasBound() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int64 bound = 4;</code>
     *
     * <pre>
     * gSqNorm error bound
     * </pre>
     */
    public long getBound() {
      return bound_;
    }

    public static final int NUMSAMPLES_FIELD_NUMBER = 5;
    private int numSamples_;
    /**
     * <code>required int32 numSamples = 5;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    public boolean hasNumSamples() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 numSamples = 5;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    public int getNumSamples() {
      return numSamples_;
    }

    private void initFields() {
      m_ = 0;
      q_ = 0L;
      svar_ = 0D;
      bound_ = 0L;
      numSamples_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasM()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasQ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSvar()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBound()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNumSamples()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, m_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, q_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeDouble(3, svar_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, bound_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, numSamples_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, m_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, q_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(3, svar_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, bound_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, numSamples_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.DiscParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.DiscParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.DiscParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.DiscParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.DiscParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.DiscParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.DiscParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.DiscParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.DiscParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.DiscParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.DiscParams prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.DiscParams}
     *
     * <pre>
     * discrete RLWE parameters
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.DiscParams)
        crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_DiscParams_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_DiscParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.DiscParams.class, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.DiscParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        m_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        q_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        svar_ = 0D;
        bitField0_ = (bitField0_ & ~0x00000004);
        bound_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        numSamples_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_DiscParams_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.DiscParams getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.DiscParams build() {
        crypto.proto.RLWE.challenges.Challenges.DiscParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.DiscParams buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.DiscParams result = new crypto.proto.RLWE.challenges.Challenges.DiscParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.m_ = m_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.q_ = q_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.svar_ = svar_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.bound_ = bound_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.numSamples_ = numSamples_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.DiscParams) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.DiscParams)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.DiscParams other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance()) return this;
        if (other.hasM()) {
          setM(other.getM());
        }
        if (other.hasQ()) {
          setQ(other.getQ());
        }
        if (other.hasSvar()) {
          setSvar(other.getSvar());
        }
        if (other.hasBound()) {
          setBound(other.getBound());
        }
        if (other.hasNumSamples()) {
          setNumSamples(other.getNumSamples());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasM()) {
          
          return false;
        }
        if (!hasQ()) {
          
          return false;
        }
        if (!hasSvar()) {
          
          return false;
        }
        if (!hasBound()) {
          
          return false;
        }
        if (!hasNumSamples()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.DiscParams parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.DiscParams) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int m_ ;
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public boolean hasM() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public int getM() {
        return m_;
      }
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public Builder setM(int value) {
        bitField0_ |= 0x00000001;
        m_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public Builder clearM() {
        bitField0_ = (bitField0_ & ~0x00000001);
        m_ = 0;
        onChanged();
        return this;
      }

      private long q_ ;
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public boolean hasQ() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public long getQ() {
        return q_;
      }
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public Builder setQ(long value) {
        bitField0_ |= 0x00000002;
        q_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public Builder clearQ() {
        bitField0_ = (bitField0_ & ~0x00000002);
        q_ = 0L;
        onChanged();
        return this;
      }

      private double svar_ ;
      /**
       * <code>required double svar = 3;</code>
       *
       * <pre>
       * scaled variance
       * </pre>
       */
      public boolean hasSvar() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required double svar = 3;</code>
       *
       * <pre>
       * scaled variance
       * </pre>
       */
      public double getSvar() {
        return svar_;
      }
      /**
       * <code>required double svar = 3;</code>
       *
       * <pre>
       * scaled variance
       * </pre>
       */
      public Builder setSvar(double value) {
        bitField0_ |= 0x00000004;
        svar_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required double svar = 3;</code>
       *
       * <pre>
       * scaled variance
       * </pre>
       */
      public Builder clearSvar() {
        bitField0_ = (bitField0_ & ~0x00000004);
        svar_ = 0D;
        onChanged();
        return this;
      }

      private long bound_ ;
      /**
       * <code>required int64 bound = 4;</code>
       *
       * <pre>
       * gSqNorm error bound
       * </pre>
       */
      public boolean hasBound() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int64 bound = 4;</code>
       *
       * <pre>
       * gSqNorm error bound
       * </pre>
       */
      public long getBound() {
        return bound_;
      }
      /**
       * <code>required int64 bound = 4;</code>
       *
       * <pre>
       * gSqNorm error bound
       * </pre>
       */
      public Builder setBound(long value) {
        bitField0_ |= 0x00000008;
        bound_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 bound = 4;</code>
       *
       * <pre>
       * gSqNorm error bound
       * </pre>
       */
      public Builder clearBound() {
        bitField0_ = (bitField0_ & ~0x00000008);
        bound_ = 0L;
        onChanged();
        return this;
      }

      private int numSamples_ ;
      /**
       * <code>required int32 numSamples = 5;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public boolean hasNumSamples() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 numSamples = 5;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public int getNumSamples() {
        return numSamples_;
      }
      /**
       * <code>required int32 numSamples = 5;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public Builder setNumSamples(int value) {
        bitField0_ |= 0x00000010;
        numSamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 numSamples = 5;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public Builder clearNumSamples() {
        bitField0_ = (bitField0_ & ~0x00000010);
        numSamples_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.DiscParams)
    }

    static {
      defaultInstance = new DiscParams(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.DiscParams)
  }

  public interface RLWRParamsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.RLWRParams)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    boolean hasM();
    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    int getM();

    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    boolean hasQ();
    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    long getQ();

    /**
     * <code>required int64 p = 3;</code>
     *
     * <pre>
     * rounding modulus p &lt; q
     * </pre>
     */
    boolean hasP();
    /**
     * <code>required int64 p = 3;</code>
     *
     * <pre>
     * rounding modulus p &lt; q
     * </pre>
     */
    long getP();

    /**
     * <code>required int32 numSamples = 4;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    boolean hasNumSamples();
    /**
     * <code>required int32 numSamples = 4;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    int getNumSamples();
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.RLWRParams}
   *
   * <pre>
   * RLWR parameters
   * </pre>
   */
  public static final class RLWRParams extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.RLWRParams)
      RLWRParamsOrBuilder {
    // Use RLWRParams.newBuilder() to construct.
    private RLWRParams(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RLWRParams(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RLWRParams defaultInstance;
    public static RLWRParams getDefaultInstance() {
      return defaultInstance;
    }

    public RLWRParams getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RLWRParams(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              m_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              q_ = input.readInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              p_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              numSamples_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_RLWRParams_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_RLWRParams_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.RLWRParams.class, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder.class);
    }

    public static com.google.protobuf.Parser<RLWRParams> PARSER =
        new com.google.protobuf.AbstractParser<RLWRParams>() {
      public RLWRParams parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RLWRParams(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RLWRParams> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int M_FIELD_NUMBER = 1;
    private int m_;
    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    public boolean hasM() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 m = 1;</code>
     *
     * <pre>
     * cyclotomic index
     * </pre>
     */
    public int getM() {
      return m_;
    }

    public static final int Q_FIELD_NUMBER = 2;
    private long q_;
    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    public boolean hasQ() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int64 q = 2;</code>
     *
     * <pre>
     * modulus
     * </pre>
     */
    public long getQ() {
      return q_;
    }

    public static final int P_FIELD_NUMBER = 3;
    private long p_;
    /**
     * <code>required int64 p = 3;</code>
     *
     * <pre>
     * rounding modulus p &lt; q
     * </pre>
     */
    public boolean hasP() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int64 p = 3;</code>
     *
     * <pre>
     * rounding modulus p &lt; q
     * </pre>
     */
    public long getP() {
      return p_;
    }

    public static final int NUMSAMPLES_FIELD_NUMBER = 4;
    private int numSamples_;
    /**
     * <code>required int32 numSamples = 4;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    public boolean hasNumSamples() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 numSamples = 4;</code>
     *
     * <pre>
     * number of samples
     * </pre>
     */
    public int getNumSamples() {
      return numSamples_;
    }

    private void initFields() {
      m_ = 0;
      q_ = 0L;
      p_ = 0L;
      numSamples_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasM()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasQ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasP()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNumSamples()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, m_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, q_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, p_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, numSamples_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, m_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, q_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, p_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, numSamples_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.RLWRParams parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.RLWRParams parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.RLWRParams parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.RLWRParams parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.RLWRParams parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.RLWRParams parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.RLWRParams parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.RLWRParams parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.RLWRParams parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.RLWRParams parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.RLWRParams prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.RLWRParams}
     *
     * <pre>
     * RLWR parameters
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.RLWRParams)
        crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_RLWRParams_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_RLWRParams_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.RLWRParams.class, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.RLWRParams.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        m_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        q_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        p_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        numSamples_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_RLWRParams_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.RLWRParams getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.RLWRParams build() {
        crypto.proto.RLWE.challenges.Challenges.RLWRParams result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.RLWRParams buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.RLWRParams result = new crypto.proto.RLWE.challenges.Challenges.RLWRParams(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.m_ = m_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.q_ = q_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.p_ = p_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.numSamples_ = numSamples_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.RLWRParams) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.RLWRParams)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.RLWRParams other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance()) return this;
        if (other.hasM()) {
          setM(other.getM());
        }
        if (other.hasQ()) {
          setQ(other.getQ());
        }
        if (other.hasP()) {
          setP(other.getP());
        }
        if (other.hasNumSamples()) {
          setNumSamples(other.getNumSamples());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasM()) {
          
          return false;
        }
        if (!hasQ()) {
          
          return false;
        }
        if (!hasP()) {
          
          return false;
        }
        if (!hasNumSamples()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.RLWRParams parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.RLWRParams) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int m_ ;
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public boolean hasM() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public int getM() {
        return m_;
      }
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public Builder setM(int value) {
        bitField0_ |= 0x00000001;
        m_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 m = 1;</code>
       *
       * <pre>
       * cyclotomic index
       * </pre>
       */
      public Builder clearM() {
        bitField0_ = (bitField0_ & ~0x00000001);
        m_ = 0;
        onChanged();
        return this;
      }

      private long q_ ;
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public boolean hasQ() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public long getQ() {
        return q_;
      }
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public Builder setQ(long value) {
        bitField0_ |= 0x00000002;
        q_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 q = 2;</code>
       *
       * <pre>
       * modulus
       * </pre>
       */
      public Builder clearQ() {
        bitField0_ = (bitField0_ & ~0x00000002);
        q_ = 0L;
        onChanged();
        return this;
      }

      private long p_ ;
      /**
       * <code>required int64 p = 3;</code>
       *
       * <pre>
       * rounding modulus p &lt; q
       * </pre>
       */
      public boolean hasP() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int64 p = 3;</code>
       *
       * <pre>
       * rounding modulus p &lt; q
       * </pre>
       */
      public long getP() {
        return p_;
      }
      /**
       * <code>required int64 p = 3;</code>
       *
       * <pre>
       * rounding modulus p &lt; q
       * </pre>
       */
      public Builder setP(long value) {
        bitField0_ |= 0x00000004;
        p_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 p = 3;</code>
       *
       * <pre>
       * rounding modulus p &lt; q
       * </pre>
       */
      public Builder clearP() {
        bitField0_ = (bitField0_ & ~0x00000004);
        p_ = 0L;
        onChanged();
        return this;
      }

      private int numSamples_ ;
      /**
       * <code>required int32 numSamples = 4;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public boolean hasNumSamples() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 numSamples = 4;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public int getNumSamples() {
        return numSamples_;
      }
      /**
       * <code>required int32 numSamples = 4;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public Builder setNumSamples(int value) {
        bitField0_ |= 0x00000008;
        numSamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 numSamples = 4;</code>
       *
       * <pre>
       * number of samples
       * </pre>
       */
      public Builder clearNumSamples() {
        bitField0_ = (bitField0_ & ~0x00000008);
        numSamples_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.RLWRParams)
    }

    static {
      defaultInstance = new RLWRParams(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.RLWRParams)
  }

  public interface ChallengeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.Challenge)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * unique identifier of challenge
     * </pre>
     */
    boolean hasChallengeID();
    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * unique identifier of challenge
     * </pre>
     */
    int getChallengeID();

    /**
     * <code>required int32 numInstances = 2;</code>
     *
     * <pre>
     * number of instances in challenge
     * </pre>
     */
    boolean hasNumInstances();
    /**
     * <code>required int32 numInstances = 2;</code>
     *
     * <pre>
     * number of instances in challenge
     * </pre>
     */
    int getNumInstances();

    /**
     * <code>required int64 beaconEpoch = 3;</code>
     *
     * <pre>
     * beacon epoch for suppressing secret
     * </pre>
     */
    boolean hasBeaconEpoch();
    /**
     * <code>required int64 beaconEpoch = 3;</code>
     *
     * <pre>
     * beacon epoch for suppressing secret
     * </pre>
     */
    long getBeaconEpoch();

    /**
     * <code>required int32 beaconOffset = 4;</code>
     *
     * <pre>
     * byte of beacon value used
     * </pre>
     */
    boolean hasBeaconOffset();
    /**
     * <code>required int32 beaconOffset = 4;</code>
     *
     * <pre>
     * byte of beacon value used
     * </pre>
     */
    int getBeaconOffset();

    /**
     * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
     */
    boolean hasCparams();
    /**
     * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.ContParams getCparams();
    /**
     * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder getCparamsOrBuilder();

    /**
     * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
     */
    boolean hasDparams();
    /**
     * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.DiscParams getDparams();
    /**
     * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder getDparamsOrBuilder();

    /**
     * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
     */
    boolean hasRparams();
    /**
     * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.RLWRParams getRparams();
    /**
     * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder getRparamsOrBuilder();
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.Challenge}
   */
  public static final class Challenge extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.Challenge)
      ChallengeOrBuilder {
    // Use Challenge.newBuilder() to construct.
    private Challenge(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Challenge(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Challenge defaultInstance;
    public static Challenge getDefaultInstance() {
      return defaultInstance;
    }

    public Challenge getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Challenge(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              challengeID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              numInstances_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              beaconEpoch_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              beaconOffset_ = input.readInt32();
              break;
            }
            case 42: {
              crypto.proto.RLWE.challenges.Challenges.ContParams.Builder subBuilder = null;
              if (paramsCase_ == 5) {
                subBuilder = ((crypto.proto.RLWE.challenges.Challenges.ContParams) params_).toBuilder();
              }
              params_ = input.readMessage(crypto.proto.RLWE.challenges.Challenges.ContParams.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((crypto.proto.RLWE.challenges.Challenges.ContParams) params_);
                params_ = subBuilder.buildPartial();
              }
              paramsCase_ = 5;
              break;
            }
            case 50: {
              crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder subBuilder = null;
              if (paramsCase_ == 6) {
                subBuilder = ((crypto.proto.RLWE.challenges.Challenges.DiscParams) params_).toBuilder();
              }
              params_ = input.readMessage(crypto.proto.RLWE.challenges.Challenges.DiscParams.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((crypto.proto.RLWE.challenges.Challenges.DiscParams) params_);
                params_ = subBuilder.buildPartial();
              }
              paramsCase_ = 6;
              break;
            }
            case 58: {
              crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder subBuilder = null;
              if (paramsCase_ == 7) {
                subBuilder = ((crypto.proto.RLWE.challenges.Challenges.RLWRParams) params_).toBuilder();
              }
              params_ = input.readMessage(crypto.proto.RLWE.challenges.Challenges.RLWRParams.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((crypto.proto.RLWE.challenges.Challenges.RLWRParams) params_);
                params_ = subBuilder.buildPartial();
              }
              paramsCase_ = 7;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_Challenge_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_Challenge_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.Challenge.class, crypto.proto.RLWE.challenges.Challenges.Challenge.Builder.class);
    }

    public static com.google.protobuf.Parser<Challenge> PARSER =
        new com.google.protobuf.AbstractParser<Challenge>() {
      public Challenge parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Challenge(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Challenge> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int paramsCase_ = 0;
    private java.lang.Object params_;
    public enum ParamsCase
        implements com.google.protobuf.Internal.EnumLite {
      CPARAMS(5),
      DPARAMS(6),
      RPARAMS(7),
      PARAMS_NOT_SET(0);
      private int value = 0;
      private ParamsCase(int value) {
        this.value = value;
      }
      public static ParamsCase valueOf(int value) {
        switch (value) {
          case 5: return CPARAMS;
          case 6: return DPARAMS;
          case 7: return RPARAMS;
          case 0: return PARAMS_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ParamsCase
    getParamsCase() {
      return ParamsCase.valueOf(
          paramsCase_);
    }

    public static final int CHALLENGEID_FIELD_NUMBER = 1;
    private int challengeID_;
    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * unique identifier of challenge
     * </pre>
     */
    public boolean hasChallengeID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * unique identifier of challenge
     * </pre>
     */
    public int getChallengeID() {
      return challengeID_;
    }

    public static final int NUMINSTANCES_FIELD_NUMBER = 2;
    private int numInstances_;
    /**
     * <code>required int32 numInstances = 2;</code>
     *
     * <pre>
     * number of instances in challenge
     * </pre>
     */
    public boolean hasNumInstances() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 numInstances = 2;</code>
     *
     * <pre>
     * number of instances in challenge
     * </pre>
     */
    public int getNumInstances() {
      return numInstances_;
    }

    public static final int BEACONEPOCH_FIELD_NUMBER = 3;
    private long beaconEpoch_;
    /**
     * <code>required int64 beaconEpoch = 3;</code>
     *
     * <pre>
     * beacon epoch for suppressing secret
     * </pre>
     */
    public boolean hasBeaconEpoch() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int64 beaconEpoch = 3;</code>
     *
     * <pre>
     * beacon epoch for suppressing secret
     * </pre>
     */
    public long getBeaconEpoch() {
      return beaconEpoch_;
    }

    public static final int BEACONOFFSET_FIELD_NUMBER = 4;
    private int beaconOffset_;
    /**
     * <code>required int32 beaconOffset = 4;</code>
     *
     * <pre>
     * byte of beacon value used
     * </pre>
     */
    public boolean hasBeaconOffset() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 beaconOffset = 4;</code>
     *
     * <pre>
     * byte of beacon value used
     * </pre>
     */
    public int getBeaconOffset() {
      return beaconOffset_;
    }

    public static final int CPARAMS_FIELD_NUMBER = 5;
    /**
     * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
     */
    public boolean hasCparams() {
      return paramsCase_ == 5;
    }
    /**
     * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.ContParams getCparams() {
      if (paramsCase_ == 5) {
         return (crypto.proto.RLWE.challenges.Challenges.ContParams) params_;
      }
      return crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
    }
    /**
     * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder getCparamsOrBuilder() {
      if (paramsCase_ == 5) {
         return (crypto.proto.RLWE.challenges.Challenges.ContParams) params_;
      }
      return crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
    }

    public static final int DPARAMS_FIELD_NUMBER = 6;
    /**
     * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
     */
    public boolean hasDparams() {
      return paramsCase_ == 6;
    }
    /**
     * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.DiscParams getDparams() {
      if (paramsCase_ == 6) {
         return (crypto.proto.RLWE.challenges.Challenges.DiscParams) params_;
      }
      return crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
    }
    /**
     * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder getDparamsOrBuilder() {
      if (paramsCase_ == 6) {
         return (crypto.proto.RLWE.challenges.Challenges.DiscParams) params_;
      }
      return crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
    }

    public static final int RPARAMS_FIELD_NUMBER = 7;
    /**
     * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
     */
    public boolean hasRparams() {
      return paramsCase_ == 7;
    }
    /**
     * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.RLWRParams getRparams() {
      if (paramsCase_ == 7) {
         return (crypto.proto.RLWE.challenges.Challenges.RLWRParams) params_;
      }
      return crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
    }
    /**
     * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder getRparamsOrBuilder() {
      if (paramsCase_ == 7) {
         return (crypto.proto.RLWE.challenges.Challenges.RLWRParams) params_;
      }
      return crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
    }

    private void initFields() {
      challengeID_ = 0;
      numInstances_ = 0;
      beaconEpoch_ = 0L;
      beaconOffset_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChallengeID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNumInstances()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBeaconEpoch()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBeaconOffset()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasCparams()) {
        if (!getCparams().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasDparams()) {
        if (!getDparams().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRparams()) {
        if (!getRparams().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, numInstances_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, beaconEpoch_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, beaconOffset_);
      }
      if (paramsCase_ == 5) {
        output.writeMessage(5, (crypto.proto.RLWE.challenges.Challenges.ContParams) params_);
      }
      if (paramsCase_ == 6) {
        output.writeMessage(6, (crypto.proto.RLWE.challenges.Challenges.DiscParams) params_);
      }
      if (paramsCase_ == 7) {
        output.writeMessage(7, (crypto.proto.RLWE.challenges.Challenges.RLWRParams) params_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, numInstances_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, beaconEpoch_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, beaconOffset_);
      }
      if (paramsCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (crypto.proto.RLWE.challenges.Challenges.ContParams) params_);
      }
      if (paramsCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (crypto.proto.RLWE.challenges.Challenges.DiscParams) params_);
      }
      if (paramsCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (crypto.proto.RLWE.challenges.Challenges.RLWRParams) params_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.Challenge parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Challenge parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Challenge parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Challenge parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Challenge parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Challenge parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Challenge parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Challenge parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Challenge parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Challenge parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.Challenge prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.Challenge}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.Challenge)
        crypto.proto.RLWE.challenges.Challenges.ChallengeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_Challenge_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_Challenge_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.Challenge.class, crypto.proto.RLWE.challenges.Challenges.Challenge.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.Challenge.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        challengeID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        numInstances_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        beaconEpoch_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        beaconOffset_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        paramsCase_ = 0;
        params_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_Challenge_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.Challenge getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.Challenge.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.Challenge build() {
        crypto.proto.RLWE.challenges.Challenges.Challenge result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.Challenge buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.Challenge result = new crypto.proto.RLWE.challenges.Challenges.Challenge(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.challengeID_ = challengeID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.numInstances_ = numInstances_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.beaconEpoch_ = beaconEpoch_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.beaconOffset_ = beaconOffset_;
        if (paramsCase_ == 5) {
          if (cparamsBuilder_ == null) {
            result.params_ = params_;
          } else {
            result.params_ = cparamsBuilder_.build();
          }
        }
        if (paramsCase_ == 6) {
          if (dparamsBuilder_ == null) {
            result.params_ = params_;
          } else {
            result.params_ = dparamsBuilder_.build();
          }
        }
        if (paramsCase_ == 7) {
          if (rparamsBuilder_ == null) {
            result.params_ = params_;
          } else {
            result.params_ = rparamsBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.paramsCase_ = paramsCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.Challenge) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.Challenge)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.Challenge other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.Challenge.getDefaultInstance()) return this;
        if (other.hasChallengeID()) {
          setChallengeID(other.getChallengeID());
        }
        if (other.hasNumInstances()) {
          setNumInstances(other.getNumInstances());
        }
        if (other.hasBeaconEpoch()) {
          setBeaconEpoch(other.getBeaconEpoch());
        }
        if (other.hasBeaconOffset()) {
          setBeaconOffset(other.getBeaconOffset());
        }
        switch (other.getParamsCase()) {
          case CPARAMS: {
            mergeCparams(other.getCparams());
            break;
          }
          case DPARAMS: {
            mergeDparams(other.getDparams());
            break;
          }
          case RPARAMS: {
            mergeRparams(other.getRparams());
            break;
          }
          case PARAMS_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChallengeID()) {
          
          return false;
        }
        if (!hasNumInstances()) {
          
          return false;
        }
        if (!hasBeaconEpoch()) {
          
          return false;
        }
        if (!hasBeaconOffset()) {
          
          return false;
        }
        if (hasCparams()) {
          if (!getCparams().isInitialized()) {
            
            return false;
          }
        }
        if (hasDparams()) {
          if (!getDparams().isInitialized()) {
            
            return false;
          }
        }
        if (hasRparams()) {
          if (!getRparams().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.Challenge parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.Challenge) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int paramsCase_ = 0;
      private java.lang.Object params_;
      public ParamsCase
          getParamsCase() {
        return ParamsCase.valueOf(
            paramsCase_);
      }

      public Builder clearParams() {
        paramsCase_ = 0;
        params_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int challengeID_ ;
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * unique identifier of challenge
       * </pre>
       */
      public boolean hasChallengeID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * unique identifier of challenge
       * </pre>
       */
      public int getChallengeID() {
        return challengeID_;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * unique identifier of challenge
       * </pre>
       */
      public Builder setChallengeID(int value) {
        bitField0_ |= 0x00000001;
        challengeID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * unique identifier of challenge
       * </pre>
       */
      public Builder clearChallengeID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        challengeID_ = 0;
        onChanged();
        return this;
      }

      private int numInstances_ ;
      /**
       * <code>required int32 numInstances = 2;</code>
       *
       * <pre>
       * number of instances in challenge
       * </pre>
       */
      public boolean hasNumInstances() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 numInstances = 2;</code>
       *
       * <pre>
       * number of instances in challenge
       * </pre>
       */
      public int getNumInstances() {
        return numInstances_;
      }
      /**
       * <code>required int32 numInstances = 2;</code>
       *
       * <pre>
       * number of instances in challenge
       * </pre>
       */
      public Builder setNumInstances(int value) {
        bitField0_ |= 0x00000002;
        numInstances_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 numInstances = 2;</code>
       *
       * <pre>
       * number of instances in challenge
       * </pre>
       */
      public Builder clearNumInstances() {
        bitField0_ = (bitField0_ & ~0x00000002);
        numInstances_ = 0;
        onChanged();
        return this;
      }

      private long beaconEpoch_ ;
      /**
       * <code>required int64 beaconEpoch = 3;</code>
       *
       * <pre>
       * beacon epoch for suppressing secret
       * </pre>
       */
      public boolean hasBeaconEpoch() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int64 beaconEpoch = 3;</code>
       *
       * <pre>
       * beacon epoch for suppressing secret
       * </pre>
       */
      public long getBeaconEpoch() {
        return beaconEpoch_;
      }
      /**
       * <code>required int64 beaconEpoch = 3;</code>
       *
       * <pre>
       * beacon epoch for suppressing secret
       * </pre>
       */
      public Builder setBeaconEpoch(long value) {
        bitField0_ |= 0x00000004;
        beaconEpoch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 beaconEpoch = 3;</code>
       *
       * <pre>
       * beacon epoch for suppressing secret
       * </pre>
       */
      public Builder clearBeaconEpoch() {
        bitField0_ = (bitField0_ & ~0x00000004);
        beaconEpoch_ = 0L;
        onChanged();
        return this;
      }

      private int beaconOffset_ ;
      /**
       * <code>required int32 beaconOffset = 4;</code>
       *
       * <pre>
       * byte of beacon value used
       * </pre>
       */
      public boolean hasBeaconOffset() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 beaconOffset = 4;</code>
       *
       * <pre>
       * byte of beacon value used
       * </pre>
       */
      public int getBeaconOffset() {
        return beaconOffset_;
      }
      /**
       * <code>required int32 beaconOffset = 4;</code>
       *
       * <pre>
       * byte of beacon value used
       * </pre>
       */
      public Builder setBeaconOffset(int value) {
        bitField0_ |= 0x00000008;
        beaconOffset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 beaconOffset = 4;</code>
       *
       * <pre>
       * byte of beacon value used
       * </pre>
       */
      public Builder clearBeaconOffset() {
        bitField0_ = (bitField0_ & ~0x00000008);
        beaconOffset_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.ContParams, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder, crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder> cparamsBuilder_;
      /**
       * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
       */
      public boolean hasCparams() {
        return paramsCase_ == 5;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.ContParams getCparams() {
        if (cparamsBuilder_ == null) {
          if (paramsCase_ == 5) {
            return (crypto.proto.RLWE.challenges.Challenges.ContParams) params_;
          }
          return crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
        } else {
          if (paramsCase_ == 5) {
            return cparamsBuilder_.getMessage();
          }
          return crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
        }
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
       */
      public Builder setCparams(crypto.proto.RLWE.challenges.Challenges.ContParams value) {
        if (cparamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
          onChanged();
        } else {
          cparamsBuilder_.setMessage(value);
        }
        paramsCase_ = 5;
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
       */
      public Builder setCparams(
          crypto.proto.RLWE.challenges.Challenges.ContParams.Builder builderForValue) {
        if (cparamsBuilder_ == null) {
          params_ = builderForValue.build();
          onChanged();
        } else {
          cparamsBuilder_.setMessage(builderForValue.build());
        }
        paramsCase_ = 5;
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
       */
      public Builder mergeCparams(crypto.proto.RLWE.challenges.Challenges.ContParams value) {
        if (cparamsBuilder_ == null) {
          if (paramsCase_ == 5 &&
              params_ != crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance()) {
            params_ = crypto.proto.RLWE.challenges.Challenges.ContParams.newBuilder((crypto.proto.RLWE.challenges.Challenges.ContParams) params_)
                .mergeFrom(value).buildPartial();
          } else {
            params_ = value;
          }
          onChanged();
        } else {
          if (paramsCase_ == 5) {
            cparamsBuilder_.mergeFrom(value);
          }
          cparamsBuilder_.setMessage(value);
        }
        paramsCase_ = 5;
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
       */
      public Builder clearCparams() {
        if (cparamsBuilder_ == null) {
          if (paramsCase_ == 5) {
            paramsCase_ = 0;
            params_ = null;
            onChanged();
          }
        } else {
          if (paramsCase_ == 5) {
            paramsCase_ = 0;
            params_ = null;
          }
          cparamsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.ContParams.Builder getCparamsBuilder() {
        return getCparamsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder getCparamsOrBuilder() {
        if ((paramsCase_ == 5) && (cparamsBuilder_ != null)) {
          return cparamsBuilder_.getMessageOrBuilder();
        } else {
          if (paramsCase_ == 5) {
            return (crypto.proto.RLWE.challenges.Challenges.ContParams) params_;
          }
          return crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
        }
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.ContParams cparams = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.ContParams, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder, crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder> 
          getCparamsFieldBuilder() {
        if (cparamsBuilder_ == null) {
          if (!(paramsCase_ == 5)) {
            params_ = crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
          }
          cparamsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.RLWE.challenges.Challenges.ContParams, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder, crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder>(
                  (crypto.proto.RLWE.challenges.Challenges.ContParams) params_,
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        paramsCase_ = 5;
        return cparamsBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.DiscParams, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder, crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder> dparamsBuilder_;
      /**
       * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
       */
      public boolean hasDparams() {
        return paramsCase_ == 6;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.DiscParams getDparams() {
        if (dparamsBuilder_ == null) {
          if (paramsCase_ == 6) {
            return (crypto.proto.RLWE.challenges.Challenges.DiscParams) params_;
          }
          return crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
        } else {
          if (paramsCase_ == 6) {
            return dparamsBuilder_.getMessage();
          }
          return crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
        }
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
       */
      public Builder setDparams(crypto.proto.RLWE.challenges.Challenges.DiscParams value) {
        if (dparamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
          onChanged();
        } else {
          dparamsBuilder_.setMessage(value);
        }
        paramsCase_ = 6;
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
       */
      public Builder setDparams(
          crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder builderForValue) {
        if (dparamsBuilder_ == null) {
          params_ = builderForValue.build();
          onChanged();
        } else {
          dparamsBuilder_.setMessage(builderForValue.build());
        }
        paramsCase_ = 6;
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
       */
      public Builder mergeDparams(crypto.proto.RLWE.challenges.Challenges.DiscParams value) {
        if (dparamsBuilder_ == null) {
          if (paramsCase_ == 6 &&
              params_ != crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance()) {
            params_ = crypto.proto.RLWE.challenges.Challenges.DiscParams.newBuilder((crypto.proto.RLWE.challenges.Challenges.DiscParams) params_)
                .mergeFrom(value).buildPartial();
          } else {
            params_ = value;
          }
          onChanged();
        } else {
          if (paramsCase_ == 6) {
            dparamsBuilder_.mergeFrom(value);
          }
          dparamsBuilder_.setMessage(value);
        }
        paramsCase_ = 6;
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
       */
      public Builder clearDparams() {
        if (dparamsBuilder_ == null) {
          if (paramsCase_ == 6) {
            paramsCase_ = 0;
            params_ = null;
            onChanged();
          }
        } else {
          if (paramsCase_ == 6) {
            paramsCase_ = 0;
            params_ = null;
          }
          dparamsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder getDparamsBuilder() {
        return getDparamsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder getDparamsOrBuilder() {
        if ((paramsCase_ == 6) && (dparamsBuilder_ != null)) {
          return dparamsBuilder_.getMessageOrBuilder();
        } else {
          if (paramsCase_ == 6) {
            return (crypto.proto.RLWE.challenges.Challenges.DiscParams) params_;
          }
          return crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
        }
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.DiscParams dparams = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.DiscParams, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder, crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder> 
          getDparamsFieldBuilder() {
        if (dparamsBuilder_ == null) {
          if (!(paramsCase_ == 6)) {
            params_ = crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
          }
          dparamsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.RLWE.challenges.Challenges.DiscParams, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder, crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder>(
                  (crypto.proto.RLWE.challenges.Challenges.DiscParams) params_,
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        paramsCase_ = 6;
        return dparamsBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.RLWRParams, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder, crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder> rparamsBuilder_;
      /**
       * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
       */
      public boolean hasRparams() {
        return paramsCase_ == 7;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.RLWRParams getRparams() {
        if (rparamsBuilder_ == null) {
          if (paramsCase_ == 7) {
            return (crypto.proto.RLWE.challenges.Challenges.RLWRParams) params_;
          }
          return crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
        } else {
          if (paramsCase_ == 7) {
            return rparamsBuilder_.getMessage();
          }
          return crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
        }
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
       */
      public Builder setRparams(crypto.proto.RLWE.challenges.Challenges.RLWRParams value) {
        if (rparamsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
          onChanged();
        } else {
          rparamsBuilder_.setMessage(value);
        }
        paramsCase_ = 7;
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
       */
      public Builder setRparams(
          crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder builderForValue) {
        if (rparamsBuilder_ == null) {
          params_ = builderForValue.build();
          onChanged();
        } else {
          rparamsBuilder_.setMessage(builderForValue.build());
        }
        paramsCase_ = 7;
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
       */
      public Builder mergeRparams(crypto.proto.RLWE.challenges.Challenges.RLWRParams value) {
        if (rparamsBuilder_ == null) {
          if (paramsCase_ == 7 &&
              params_ != crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance()) {
            params_ = crypto.proto.RLWE.challenges.Challenges.RLWRParams.newBuilder((crypto.proto.RLWE.challenges.Challenges.RLWRParams) params_)
                .mergeFrom(value).buildPartial();
          } else {
            params_ = value;
          }
          onChanged();
        } else {
          if (paramsCase_ == 7) {
            rparamsBuilder_.mergeFrom(value);
          }
          rparamsBuilder_.setMessage(value);
        }
        paramsCase_ = 7;
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
       */
      public Builder clearRparams() {
        if (rparamsBuilder_ == null) {
          if (paramsCase_ == 7) {
            paramsCase_ = 0;
            params_ = null;
            onChanged();
          }
        } else {
          if (paramsCase_ == 7) {
            paramsCase_ = 0;
            params_ = null;
          }
          rparamsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder getRparamsBuilder() {
        return getRparamsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder getRparamsOrBuilder() {
        if ((paramsCase_ == 7) && (rparamsBuilder_ != null)) {
          return rparamsBuilder_.getMessageOrBuilder();
        } else {
          if (paramsCase_ == 7) {
            return (crypto.proto.RLWE.challenges.Challenges.RLWRParams) params_;
          }
          return crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
        }
      }
      /**
       * <code>optional .crypto.proto.RLWE.challenges.RLWRParams rparams = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.RLWRParams, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder, crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder> 
          getRparamsFieldBuilder() {
        if (rparamsBuilder_ == null) {
          if (!(paramsCase_ == 7)) {
            params_ = crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
          }
          rparamsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.RLWE.challenges.Challenges.RLWRParams, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder, crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder>(
                  (crypto.proto.RLWE.challenges.Challenges.RLWRParams) params_,
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        paramsCase_ = 7;
        return rparamsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.Challenge)
    }

    static {
      defaultInstance = new Challenge(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.Challenge)
  }

  public interface InstanceContOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.InstanceCont)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * challenge this instance belongs to
     * </pre>
     */
    boolean hasChallengeID();
    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * challenge this instance belongs to
     * </pre>
     */
    int getChallengeID();

    /**
     * <code>required int32 instanceID = 2;</code>
     *
     * <pre>
     * instance within the challenge
     * </pre>
     */
    boolean hasInstanceID();
    /**
     * <code>required int32 instanceID = 2;</code>
     *
     * <pre>
     * instance within the challenge
     * </pre>
     */
    int getInstanceID();

    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    boolean hasParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    crypto.proto.RLWE.challenges.Challenges.ContParams getParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder getParamsOrBuilder();

    /**
     * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    java.util.List<crypto.proto.RLWE.RLWE.SampleCont> 
        getSamplesList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    crypto.proto.RLWE.RLWE.SampleCont getSamples(int index);
    /**
     * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    int getSamplesCount();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    java.util.List<? extends crypto.proto.RLWE.RLWE.SampleContOrBuilder> 
        getSamplesOrBuilderList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    crypto.proto.RLWE.RLWE.SampleContOrBuilder getSamplesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceCont}
   *
   * <pre>
   * continuous RLWE instance
   * </pre>
   */
  public static final class InstanceCont extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.InstanceCont)
      InstanceContOrBuilder {
    // Use InstanceCont.newBuilder() to construct.
    private InstanceCont(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InstanceCont(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InstanceCont defaultInstance;
    public static InstanceCont getDefaultInstance() {
      return defaultInstance;
    }

    public InstanceCont getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InstanceCont(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              challengeID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              instanceID_ = input.readInt32();
              break;
            }
            case 26: {
              crypto.proto.RLWE.challenges.Challenges.ContParams.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = params_.toBuilder();
              }
              params_ = input.readMessage(crypto.proto.RLWE.challenges.Challenges.ContParams.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(params_);
                params_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleCont>();
                mutable_bitField0_ |= 0x00000008;
              }
              samples_.add(input.readMessage(crypto.proto.RLWE.RLWE.SampleCont.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = java.util.Collections.unmodifiableList(samples_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceCont_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceCont_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.InstanceCont.class, crypto.proto.RLWE.challenges.Challenges.InstanceCont.Builder.class);
    }

    public static com.google.protobuf.Parser<InstanceCont> PARSER =
        new com.google.protobuf.AbstractParser<InstanceCont>() {
      public InstanceCont parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstanceCont(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InstanceCont> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHALLENGEID_FIELD_NUMBER = 1;
    private int challengeID_;
    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * challenge this instance belongs to
     * </pre>
     */
    public boolean hasChallengeID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * challenge this instance belongs to
     * </pre>
     */
    public int getChallengeID() {
      return challengeID_;
    }

    public static final int INSTANCEID_FIELD_NUMBER = 2;
    private int instanceID_;
    /**
     * <code>required int32 instanceID = 2;</code>
     *
     * <pre>
     * instance within the challenge
     * </pre>
     */
    public boolean hasInstanceID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 instanceID = 2;</code>
     *
     * <pre>
     * instance within the challenge
     * </pre>
     */
    public int getInstanceID() {
      return instanceID_;
    }

    public static final int PARAMS_FIELD_NUMBER = 3;
    private crypto.proto.RLWE.challenges.Challenges.ContParams params_;
    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    public boolean hasParams() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    public crypto.proto.RLWE.challenges.Challenges.ContParams getParams() {
      return params_;
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    public crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder getParamsOrBuilder() {
      return params_;
    }

    public static final int SAMPLES_FIELD_NUMBER = 4;
    private java.util.List<crypto.proto.RLWE.RLWE.SampleCont> samples_;
    /**
     * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    public java.util.List<crypto.proto.RLWE.RLWE.SampleCont> getSamplesList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleContOrBuilder> 
        getSamplesOrBuilderList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    public int getSamplesCount() {
      return samples_.size();
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    public crypto.proto.RLWE.RLWE.SampleCont getSamples(int index) {
      return samples_.get(index);
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    public crypto.proto.RLWE.RLWE.SampleContOrBuilder getSamplesOrBuilder(
        int index) {
      return samples_.get(index);
    }

    private void initFields() {
      challengeID_ = 0;
      instanceID_ = 0;
      params_ = crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
      samples_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChallengeID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInstanceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasParams()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getParams().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSamplesCount(); i++) {
        if (!getSamples(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        output.writeMessage(4, samples_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, samples_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.InstanceCont parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceCont parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceCont parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceCont parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceCont parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceCont parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceCont parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceCont parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceCont parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceCont parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.InstanceCont prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceCont}
     *
     * <pre>
     * continuous RLWE instance
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.InstanceCont)
        crypto.proto.RLWE.challenges.Challenges.InstanceContOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceCont_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceCont_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.InstanceCont.class, crypto.proto.RLWE.challenges.Challenges.InstanceCont.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.InstanceCont.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getParamsFieldBuilder();
          getSamplesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        challengeID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        instanceID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceCont_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceCont getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.InstanceCont.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceCont build() {
        crypto.proto.RLWE.challenges.Challenges.InstanceCont result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceCont buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.InstanceCont result = new crypto.proto.RLWE.challenges.Challenges.InstanceCont(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.challengeID_ = challengeID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.instanceID_ = instanceID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (paramsBuilder_ == null) {
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        if (samplesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            samples_ = java.util.Collections.unmodifiableList(samples_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.samples_ = samples_;
        } else {
          result.samples_ = samplesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.InstanceCont) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.InstanceCont)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.InstanceCont other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.InstanceCont.getDefaultInstance()) return this;
        if (other.hasChallengeID()) {
          setChallengeID(other.getChallengeID());
        }
        if (other.hasInstanceID()) {
          setInstanceID(other.getInstanceID());
        }
        if (other.hasParams()) {
          mergeParams(other.getParams());
        }
        if (samplesBuilder_ == null) {
          if (!other.samples_.isEmpty()) {
            if (samples_.isEmpty()) {
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureSamplesIsMutable();
              samples_.addAll(other.samples_);
            }
            onChanged();
          }
        } else {
          if (!other.samples_.isEmpty()) {
            if (samplesBuilder_.isEmpty()) {
              samplesBuilder_.dispose();
              samplesBuilder_ = null;
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
              samplesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSamplesFieldBuilder() : null;
            } else {
              samplesBuilder_.addAllMessages(other.samples_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChallengeID()) {
          
          return false;
        }
        if (!hasInstanceID()) {
          
          return false;
        }
        if (!hasParams()) {
          
          return false;
        }
        if (!getParams().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getSamplesCount(); i++) {
          if (!getSamples(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.InstanceCont parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.InstanceCont) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int challengeID_ ;
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * challenge this instance belongs to
       * </pre>
       */
      public boolean hasChallengeID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * challenge this instance belongs to
       * </pre>
       */
      public int getChallengeID() {
        return challengeID_;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * challenge this instance belongs to
       * </pre>
       */
      public Builder setChallengeID(int value) {
        bitField0_ |= 0x00000001;
        challengeID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * challenge this instance belongs to
       * </pre>
       */
      public Builder clearChallengeID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        challengeID_ = 0;
        onChanged();
        return this;
      }

      private int instanceID_ ;
      /**
       * <code>required int32 instanceID = 2;</code>
       *
       * <pre>
       * instance within the challenge
       * </pre>
       */
      public boolean hasInstanceID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       *
       * <pre>
       * instance within the challenge
       * </pre>
       */
      public int getInstanceID() {
        return instanceID_;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       *
       * <pre>
       * instance within the challenge
       * </pre>
       */
      public Builder setInstanceID(int value) {
        bitField0_ |= 0x00000002;
        instanceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       *
       * <pre>
       * instance within the challenge
       * </pre>
       */
      public Builder clearInstanceID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        instanceID_ = 0;
        onChanged();
        return this;
      }

      private crypto.proto.RLWE.challenges.Challenges.ContParams params_ = crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.ContParams, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder, crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder> paramsBuilder_;
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public boolean hasParams() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public crypto.proto.RLWE.challenges.Challenges.ContParams getParams() {
        if (paramsBuilder_ == null) {
          return params_;
        } else {
          return paramsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public Builder setParams(crypto.proto.RLWE.challenges.Challenges.ContParams value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
          onChanged();
        } else {
          paramsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public Builder setParams(
          crypto.proto.RLWE.challenges.Challenges.ContParams.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          params_ = builderForValue.build();
          onChanged();
        } else {
          paramsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public Builder mergeParams(crypto.proto.RLWE.challenges.Challenges.ContParams value) {
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              params_ != crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance()) {
            params_ =
              crypto.proto.RLWE.challenges.Challenges.ContParams.newBuilder(params_).mergeFrom(value).buildPartial();
          } else {
            params_ = value;
          }
          onChanged();
        } else {
          paramsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
          onChanged();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public crypto.proto.RLWE.challenges.Challenges.ContParams.Builder getParamsBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getParamsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder getParamsOrBuilder() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilder();
        } else {
          return params_;
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.ContParams, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder, crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.RLWE.challenges.Challenges.ContParams, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder, crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder>(
                  getParams(),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }

      private java.util.List<crypto.proto.RLWE.RLWE.SampleCont> samples_ =
        java.util.Collections.emptyList();
      private void ensureSamplesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleCont>(samples_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleCont, crypto.proto.RLWE.RLWE.SampleCont.Builder, crypto.proto.RLWE.RLWE.SampleContOrBuilder> samplesBuilder_;

      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleCont> getSamplesList() {
        if (samplesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(samples_);
        } else {
          return samplesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public int getSamplesCount() {
        if (samplesBuilder_ == null) {
          return samples_.size();
        } else {
          return samplesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public crypto.proto.RLWE.RLWE.SampleCont getSamples(int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);
        } else {
          return samplesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleCont value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.set(index, value);
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleCont.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.set(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder addSamples(crypto.proto.RLWE.RLWE.SampleCont value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleCont value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(index, value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder addSamples(
          crypto.proto.RLWE.RLWE.SampleCont.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleCont.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder addAllSamples(
          java.lang.Iterable<? extends crypto.proto.RLWE.RLWE.SampleCont> values) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, samples_);
          onChanged();
        } else {
          samplesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder clearSamples() {
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder removeSamples(int index) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.remove(index);
          onChanged();
        } else {
          samplesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public crypto.proto.RLWE.RLWE.SampleCont.Builder getSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public crypto.proto.RLWE.RLWE.SampleContOrBuilder getSamplesOrBuilder(
          int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);  } else {
          return samplesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleContOrBuilder> 
           getSamplesOrBuilderList() {
        if (samplesBuilder_ != null) {
          return samplesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(samples_);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public crypto.proto.RLWE.RLWE.SampleCont.Builder addSamplesBuilder() {
        return getSamplesFieldBuilder().addBuilder(
            crypto.proto.RLWE.RLWE.SampleCont.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public crypto.proto.RLWE.RLWE.SampleCont.Builder addSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().addBuilder(
            index, crypto.proto.RLWE.RLWE.SampleCont.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleCont samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleCont.Builder> 
           getSamplesBuilderList() {
        return getSamplesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleCont, crypto.proto.RLWE.RLWE.SampleCont.Builder, crypto.proto.RLWE.RLWE.SampleContOrBuilder> 
          getSamplesFieldBuilder() {
        if (samplesBuilder_ == null) {
          samplesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              crypto.proto.RLWE.RLWE.SampleCont, crypto.proto.RLWE.RLWE.SampleCont.Builder, crypto.proto.RLWE.RLWE.SampleContOrBuilder>(
                  samples_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          samples_ = null;
        }
        return samplesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.InstanceCont)
    }

    static {
      defaultInstance = new InstanceCont(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.InstanceCont)
  }

  public interface InstanceDiscOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.InstanceDisc)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 challengeID = 1;</code>
     */
    boolean hasChallengeID();
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    int getChallengeID();

    /**
     * <code>required int32 instanceID = 2;</code>
     */
    boolean hasInstanceID();
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    int getInstanceID();

    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    boolean hasParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.DiscParams getParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder getParamsOrBuilder();

    /**
     * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
     */
    java.util.List<crypto.proto.RLWE.RLWE.SampleDisc> 
        getSamplesList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
     */
    crypto.proto.RLWE.RLWE.SampleDisc getSamples(int index);
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
     */
    int getSamplesCount();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
     */
    java.util.List<? extends crypto.proto.RLWE.RLWE.SampleDiscOrBuilder> 
        getSamplesOrBuilderList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
     */
    crypto.proto.RLWE.RLWE.SampleDiscOrBuilder getSamplesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceDisc}
   *
   * <pre>
   * discrete RLWE instance
   * </pre>
   */
  public static final class InstanceDisc extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.InstanceDisc)
      InstanceDiscOrBuilder {
    // Use InstanceDisc.newBuilder() to construct.
    private InstanceDisc(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InstanceDisc(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InstanceDisc defaultInstance;
    public static InstanceDisc getDefaultInstance() {
      return defaultInstance;
    }

    public InstanceDisc getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InstanceDisc(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              challengeID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              instanceID_ = input.readInt32();
              break;
            }
            case 26: {
              crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = params_.toBuilder();
              }
              params_ = input.readMessage(crypto.proto.RLWE.challenges.Challenges.DiscParams.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(params_);
                params_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleDisc>();
                mutable_bitField0_ |= 0x00000008;
              }
              samples_.add(input.readMessage(crypto.proto.RLWE.RLWE.SampleDisc.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = java.util.Collections.unmodifiableList(samples_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceDisc_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceDisc_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.InstanceDisc.class, crypto.proto.RLWE.challenges.Challenges.InstanceDisc.Builder.class);
    }

    public static com.google.protobuf.Parser<InstanceDisc> PARSER =
        new com.google.protobuf.AbstractParser<InstanceDisc>() {
      public InstanceDisc parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstanceDisc(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InstanceDisc> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHALLENGEID_FIELD_NUMBER = 1;
    private int challengeID_;
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public boolean hasChallengeID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public int getChallengeID() {
      return challengeID_;
    }

    public static final int INSTANCEID_FIELD_NUMBER = 2;
    private int instanceID_;
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public boolean hasInstanceID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public int getInstanceID() {
      return instanceID_;
    }

    public static final int PARAMS_FIELD_NUMBER = 3;
    private crypto.proto.RLWE.challenges.Challenges.DiscParams params_;
    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    public boolean hasParams() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.DiscParams getParams() {
      return params_;
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder getParamsOrBuilder() {
      return params_;
    }

    public static final int SAMPLES_FIELD_NUMBER = 4;
    private java.util.List<crypto.proto.RLWE.RLWE.SampleDisc> samples_;
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
     */
    public java.util.List<crypto.proto.RLWE.RLWE.SampleDisc> getSamplesList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
     */
    public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleDiscOrBuilder> 
        getSamplesOrBuilderList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
     */
    public int getSamplesCount() {
      return samples_.size();
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
     */
    public crypto.proto.RLWE.RLWE.SampleDisc getSamples(int index) {
      return samples_.get(index);
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
     */
    public crypto.proto.RLWE.RLWE.SampleDiscOrBuilder getSamplesOrBuilder(
        int index) {
      return samples_.get(index);
    }

    private void initFields() {
      challengeID_ = 0;
      instanceID_ = 0;
      params_ = crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
      samples_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChallengeID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInstanceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasParams()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getParams().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSamplesCount(); i++) {
        if (!getSamples(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        output.writeMessage(4, samples_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, samples_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.InstanceDisc parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDisc parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDisc parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDisc parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDisc parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDisc parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDisc parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDisc parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDisc parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDisc parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.InstanceDisc prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceDisc}
     *
     * <pre>
     * discrete RLWE instance
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.InstanceDisc)
        crypto.proto.RLWE.challenges.Challenges.InstanceDiscOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceDisc_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceDisc_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.InstanceDisc.class, crypto.proto.RLWE.challenges.Challenges.InstanceDisc.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.InstanceDisc.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getParamsFieldBuilder();
          getSamplesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        challengeID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        instanceID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceDisc_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceDisc getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.InstanceDisc.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceDisc build() {
        crypto.proto.RLWE.challenges.Challenges.InstanceDisc result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceDisc buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.InstanceDisc result = new crypto.proto.RLWE.challenges.Challenges.InstanceDisc(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.challengeID_ = challengeID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.instanceID_ = instanceID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (paramsBuilder_ == null) {
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        if (samplesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            samples_ = java.util.Collections.unmodifiableList(samples_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.samples_ = samples_;
        } else {
          result.samples_ = samplesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.InstanceDisc) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.InstanceDisc)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.InstanceDisc other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.InstanceDisc.getDefaultInstance()) return this;
        if (other.hasChallengeID()) {
          setChallengeID(other.getChallengeID());
        }
        if (other.hasInstanceID()) {
          setInstanceID(other.getInstanceID());
        }
        if (other.hasParams()) {
          mergeParams(other.getParams());
        }
        if (samplesBuilder_ == null) {
          if (!other.samples_.isEmpty()) {
            if (samples_.isEmpty()) {
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureSamplesIsMutable();
              samples_.addAll(other.samples_);
            }
            onChanged();
          }
        } else {
          if (!other.samples_.isEmpty()) {
            if (samplesBuilder_.isEmpty()) {
              samplesBuilder_.dispose();
              samplesBuilder_ = null;
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
              samplesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSamplesFieldBuilder() : null;
            } else {
              samplesBuilder_.addAllMessages(other.samples_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChallengeID()) {
          
          return false;
        }
        if (!hasInstanceID()) {
          
          return false;
        }
        if (!hasParams()) {
          
          return false;
        }
        if (!getParams().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getSamplesCount(); i++) {
          if (!getSamples(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.InstanceDisc parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.InstanceDisc) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int challengeID_ ;
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public boolean hasChallengeID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public int getChallengeID() {
        return challengeID_;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder setChallengeID(int value) {
        bitField0_ |= 0x00000001;
        challengeID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder clearChallengeID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        challengeID_ = 0;
        onChanged();
        return this;
      }

      private int instanceID_ ;
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public boolean hasInstanceID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public int getInstanceID() {
        return instanceID_;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder setInstanceID(int value) {
        bitField0_ |= 0x00000002;
        instanceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder clearInstanceID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        instanceID_ = 0;
        onChanged();
        return this;
      }

      private crypto.proto.RLWE.challenges.Challenges.DiscParams params_ = crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.DiscParams, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder, crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder> paramsBuilder_;
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public boolean hasParams() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.DiscParams getParams() {
        if (paramsBuilder_ == null) {
          return params_;
        } else {
          return paramsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public Builder setParams(crypto.proto.RLWE.challenges.Challenges.DiscParams value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
          onChanged();
        } else {
          paramsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public Builder setParams(
          crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          params_ = builderForValue.build();
          onChanged();
        } else {
          paramsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public Builder mergeParams(crypto.proto.RLWE.challenges.Challenges.DiscParams value) {
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              params_ != crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance()) {
            params_ =
              crypto.proto.RLWE.challenges.Challenges.DiscParams.newBuilder(params_).mergeFrom(value).buildPartial();
          } else {
            params_ = value;
          }
          onChanged();
        } else {
          paramsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
          onChanged();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder getParamsBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getParamsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder getParamsOrBuilder() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilder();
        } else {
          return params_;
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.DiscParams, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder, crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.RLWE.challenges.Challenges.DiscParams, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder, crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder>(
                  getParams(),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }

      private java.util.List<crypto.proto.RLWE.RLWE.SampleDisc> samples_ =
        java.util.Collections.emptyList();
      private void ensureSamplesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleDisc>(samples_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleDisc, crypto.proto.RLWE.RLWE.SampleDisc.Builder, crypto.proto.RLWE.RLWE.SampleDiscOrBuilder> samplesBuilder_;

      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleDisc> getSamplesList() {
        if (samplesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(samples_);
        } else {
          return samplesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public int getSamplesCount() {
        if (samplesBuilder_ == null) {
          return samples_.size();
        } else {
          return samplesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleDisc getSamples(int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);
        } else {
          return samplesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleDisc value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.set(index, value);
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleDisc.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.set(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public Builder addSamples(crypto.proto.RLWE.RLWE.SampleDisc value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleDisc value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(index, value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public Builder addSamples(
          crypto.proto.RLWE.RLWE.SampleDisc.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleDisc.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public Builder addAllSamples(
          java.lang.Iterable<? extends crypto.proto.RLWE.RLWE.SampleDisc> values) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, samples_);
          onChanged();
        } else {
          samplesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public Builder clearSamples() {
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public Builder removeSamples(int index) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.remove(index);
          onChanged();
        } else {
          samplesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleDisc.Builder getSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleDiscOrBuilder getSamplesOrBuilder(
          int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);  } else {
          return samplesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleDiscOrBuilder> 
           getSamplesOrBuilderList() {
        if (samplesBuilder_ != null) {
          return samplesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(samples_);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleDisc.Builder addSamplesBuilder() {
        return getSamplesFieldBuilder().addBuilder(
            crypto.proto.RLWE.RLWE.SampleDisc.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleDisc.Builder addSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().addBuilder(
            index, crypto.proto.RLWE.RLWE.SampleDisc.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDisc samples = 4;</code>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleDisc.Builder> 
           getSamplesBuilderList() {
        return getSamplesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleDisc, crypto.proto.RLWE.RLWE.SampleDisc.Builder, crypto.proto.RLWE.RLWE.SampleDiscOrBuilder> 
          getSamplesFieldBuilder() {
        if (samplesBuilder_ == null) {
          samplesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              crypto.proto.RLWE.RLWE.SampleDisc, crypto.proto.RLWE.RLWE.SampleDisc.Builder, crypto.proto.RLWE.RLWE.SampleDiscOrBuilder>(
                  samples_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          samples_ = null;
        }
        return samplesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.InstanceDisc)
    }

    static {
      defaultInstance = new InstanceDisc(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.InstanceDisc)
  }

  public interface InstanceRLWROrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.InstanceRLWR)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 challengeID = 1;</code>
     */
    boolean hasChallengeID();
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    int getChallengeID();

    /**
     * <code>required int32 instanceID = 2;</code>
     */
    boolean hasInstanceID();
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    int getInstanceID();

    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    boolean hasParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.RLWRParams getParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder getParamsOrBuilder();

    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
     */
    java.util.List<crypto.proto.RLWE.RLWE.SampleRLWR> 
        getSamplesList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
     */
    crypto.proto.RLWE.RLWE.SampleRLWR getSamples(int index);
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
     */
    int getSamplesCount();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
     */
    java.util.List<? extends crypto.proto.RLWE.RLWE.SampleRLWROrBuilder> 
        getSamplesOrBuilderList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
     */
    crypto.proto.RLWE.RLWE.SampleRLWROrBuilder getSamplesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceRLWR}
   *
   * <pre>
   * RLWR instance
   * </pre>
   */
  public static final class InstanceRLWR extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.InstanceRLWR)
      InstanceRLWROrBuilder {
    // Use InstanceRLWR.newBuilder() to construct.
    private InstanceRLWR(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InstanceRLWR(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InstanceRLWR defaultInstance;
    public static InstanceRLWR getDefaultInstance() {
      return defaultInstance;
    }

    public InstanceRLWR getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InstanceRLWR(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              challengeID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              instanceID_ = input.readInt32();
              break;
            }
            case 26: {
              crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = params_.toBuilder();
              }
              params_ = input.readMessage(crypto.proto.RLWE.challenges.Challenges.RLWRParams.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(params_);
                params_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleRLWR>();
                mutable_bitField0_ |= 0x00000008;
              }
              samples_.add(input.readMessage(crypto.proto.RLWE.RLWE.SampleRLWR.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = java.util.Collections.unmodifiableList(samples_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceRLWR_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceRLWR_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.InstanceRLWR.class, crypto.proto.RLWE.challenges.Challenges.InstanceRLWR.Builder.class);
    }

    public static com.google.protobuf.Parser<InstanceRLWR> PARSER =
        new com.google.protobuf.AbstractParser<InstanceRLWR>() {
      public InstanceRLWR parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstanceRLWR(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InstanceRLWR> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHALLENGEID_FIELD_NUMBER = 1;
    private int challengeID_;
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public boolean hasChallengeID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public int getChallengeID() {
      return challengeID_;
    }

    public static final int INSTANCEID_FIELD_NUMBER = 2;
    private int instanceID_;
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public boolean hasInstanceID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public int getInstanceID() {
      return instanceID_;
    }

    public static final int PARAMS_FIELD_NUMBER = 3;
    private crypto.proto.RLWE.challenges.Challenges.RLWRParams params_;
    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    public boolean hasParams() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.RLWRParams getParams() {
      return params_;
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder getParamsOrBuilder() {
      return params_;
    }

    public static final int SAMPLES_FIELD_NUMBER = 4;
    private java.util.List<crypto.proto.RLWE.RLWE.SampleRLWR> samples_;
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
     */
    public java.util.List<crypto.proto.RLWE.RLWE.SampleRLWR> getSamplesList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
     */
    public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleRLWROrBuilder> 
        getSamplesOrBuilderList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
     */
    public int getSamplesCount() {
      return samples_.size();
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
     */
    public crypto.proto.RLWE.RLWE.SampleRLWR getSamples(int index) {
      return samples_.get(index);
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
     */
    public crypto.proto.RLWE.RLWE.SampleRLWROrBuilder getSamplesOrBuilder(
        int index) {
      return samples_.get(index);
    }

    private void initFields() {
      challengeID_ = 0;
      instanceID_ = 0;
      params_ = crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
      samples_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChallengeID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInstanceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasParams()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getParams().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSamplesCount(); i++) {
        if (!getSamples(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        output.writeMessage(4, samples_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, samples_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.InstanceRLWR prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceRLWR}
     *
     * <pre>
     * RLWR instance
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.InstanceRLWR)
        crypto.proto.RLWE.challenges.Challenges.InstanceRLWROrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceRLWR_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceRLWR_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.InstanceRLWR.class, crypto.proto.RLWE.challenges.Challenges.InstanceRLWR.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.InstanceRLWR.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getParamsFieldBuilder();
          getSamplesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        challengeID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        instanceID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceRLWR_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceRLWR getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.InstanceRLWR.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceRLWR build() {
        crypto.proto.RLWE.challenges.Challenges.InstanceRLWR result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceRLWR buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.InstanceRLWR result = new crypto.proto.RLWE.challenges.Challenges.InstanceRLWR(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.challengeID_ = challengeID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.instanceID_ = instanceID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (paramsBuilder_ == null) {
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        if (samplesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            samples_ = java.util.Collections.unmodifiableList(samples_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.samples_ = samples_;
        } else {
          result.samples_ = samplesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.InstanceRLWR) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.InstanceRLWR)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.InstanceRLWR other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.InstanceRLWR.getDefaultInstance()) return this;
        if (other.hasChallengeID()) {
          setChallengeID(other.getChallengeID());
        }
        if (other.hasInstanceID()) {
          setInstanceID(other.getInstanceID());
        }
        if (other.hasParams()) {
          mergeParams(other.getParams());
        }
        if (samplesBuilder_ == null) {
          if (!other.samples_.isEmpty()) {
            if (samples_.isEmpty()) {
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureSamplesIsMutable();
              samples_.addAll(other.samples_);
            }
            onChanged();
          }
        } else {
          if (!other.samples_.isEmpty()) {
            if (samplesBuilder_.isEmpty()) {
              samplesBuilder_.dispose();
              samplesBuilder_ = null;
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
              samplesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSamplesFieldBuilder() : null;
            } else {
              samplesBuilder_.addAllMessages(other.samples_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChallengeID()) {
          
          return false;
        }
        if (!hasInstanceID()) {
          
          return false;
        }
        if (!hasParams()) {
          
          return false;
        }
        if (!getParams().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getSamplesCount(); i++) {
          if (!getSamples(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.InstanceRLWR parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.InstanceRLWR) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int challengeID_ ;
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public boolean hasChallengeID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public int getChallengeID() {
        return challengeID_;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder setChallengeID(int value) {
        bitField0_ |= 0x00000001;
        challengeID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder clearChallengeID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        challengeID_ = 0;
        onChanged();
        return this;
      }

      private int instanceID_ ;
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public boolean hasInstanceID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public int getInstanceID() {
        return instanceID_;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder setInstanceID(int value) {
        bitField0_ |= 0x00000002;
        instanceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder clearInstanceID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        instanceID_ = 0;
        onChanged();
        return this;
      }

      private crypto.proto.RLWE.challenges.Challenges.RLWRParams params_ = crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.RLWRParams, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder, crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder> paramsBuilder_;
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public boolean hasParams() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.RLWRParams getParams() {
        if (paramsBuilder_ == null) {
          return params_;
        } else {
          return paramsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public Builder setParams(crypto.proto.RLWE.challenges.Challenges.RLWRParams value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
          onChanged();
        } else {
          paramsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public Builder setParams(
          crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          params_ = builderForValue.build();
          onChanged();
        } else {
          paramsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public Builder mergeParams(crypto.proto.RLWE.challenges.Challenges.RLWRParams value) {
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              params_ != crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance()) {
            params_ =
              crypto.proto.RLWE.challenges.Challenges.RLWRParams.newBuilder(params_).mergeFrom(value).buildPartial();
          } else {
            params_ = value;
          }
          onChanged();
        } else {
          paramsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
          onChanged();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder getParamsBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getParamsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder getParamsOrBuilder() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilder();
        } else {
          return params_;
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.RLWRParams, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder, crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.RLWE.challenges.Challenges.RLWRParams, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder, crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder>(
                  getParams(),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }

      private java.util.List<crypto.proto.RLWE.RLWE.SampleRLWR> samples_ =
        java.util.Collections.emptyList();
      private void ensureSamplesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleRLWR>(samples_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleRLWR, crypto.proto.RLWE.RLWE.SampleRLWR.Builder, crypto.proto.RLWE.RLWE.SampleRLWROrBuilder> samplesBuilder_;

      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleRLWR> getSamplesList() {
        if (samplesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(samples_);
        } else {
          return samplesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public int getSamplesCount() {
        if (samplesBuilder_ == null) {
          return samples_.size();
        } else {
          return samplesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleRLWR getSamples(int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);
        } else {
          return samplesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleRLWR value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.set(index, value);
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleRLWR.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.set(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public Builder addSamples(crypto.proto.RLWE.RLWE.SampleRLWR value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleRLWR value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(index, value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public Builder addSamples(
          crypto.proto.RLWE.RLWE.SampleRLWR.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleRLWR.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public Builder addAllSamples(
          java.lang.Iterable<? extends crypto.proto.RLWE.RLWE.SampleRLWR> values) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, samples_);
          onChanged();
        } else {
          samplesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public Builder clearSamples() {
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public Builder removeSamples(int index) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.remove(index);
          onChanged();
        } else {
          samplesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleRLWR.Builder getSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleRLWROrBuilder getSamplesOrBuilder(
          int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);  } else {
          return samplesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleRLWROrBuilder> 
           getSamplesOrBuilderList() {
        if (samplesBuilder_ != null) {
          return samplesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(samples_);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleRLWR.Builder addSamplesBuilder() {
        return getSamplesFieldBuilder().addBuilder(
            crypto.proto.RLWE.RLWE.SampleRLWR.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleRLWR.Builder addSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().addBuilder(
            index, crypto.proto.RLWE.RLWE.SampleRLWR.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWR samples = 4;</code>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleRLWR.Builder> 
           getSamplesBuilderList() {
        return getSamplesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleRLWR, crypto.proto.RLWE.RLWE.SampleRLWR.Builder, crypto.proto.RLWE.RLWE.SampleRLWROrBuilder> 
          getSamplesFieldBuilder() {
        if (samplesBuilder_ == null) {
          samplesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              crypto.proto.RLWE.RLWE.SampleRLWR, crypto.proto.RLWE.RLWE.SampleRLWR.Builder, crypto.proto.RLWE.RLWE.SampleRLWROrBuilder>(
                  samples_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          samples_ = null;
        }
        return samplesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.InstanceRLWR)
    }

    static {
      defaultInstance = new InstanceRLWR(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.InstanceRLWR)
  }

  public interface InstanceContProductOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.InstanceContProduct)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * challenge this instance belongs to
     * </pre>
     */
    boolean hasChallengeID();
    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * challenge this instance belongs to
     * </pre>
     */
    int getChallengeID();

    /**
     * <code>required int32 instanceID = 2;</code>
     *
     * <pre>
     * instance within the challenge
     * </pre>
     */
    boolean hasInstanceID();
    /**
     * <code>required int32 instanceID = 2;</code>
     *
     * <pre>
     * instance within the challenge
     * </pre>
     */
    int getInstanceID();

    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    boolean hasParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    crypto.proto.RLWE.challenges.Challenges.ContParams getParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder getParamsOrBuilder();

    /**
     * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    java.util.List<crypto.proto.RLWE.RLWE.SampleContProduct> 
        getSamplesList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    crypto.proto.RLWE.RLWE.SampleContProduct getSamples(int index);
    /**
     * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    int getSamplesCount();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    java.util.List<? extends crypto.proto.RLWE.RLWE.SampleContProductOrBuilder> 
        getSamplesOrBuilderList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    crypto.proto.RLWE.RLWE.SampleContProductOrBuilder getSamplesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceContProduct}
   *
   * <pre>
   * continuous RLWE instance
   * </pre>
   */
  public static final class InstanceContProduct extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.InstanceContProduct)
      InstanceContProductOrBuilder {
    // Use InstanceContProduct.newBuilder() to construct.
    private InstanceContProduct(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InstanceContProduct(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InstanceContProduct defaultInstance;
    public static InstanceContProduct getDefaultInstance() {
      return defaultInstance;
    }

    public InstanceContProduct getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InstanceContProduct(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              challengeID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              instanceID_ = input.readInt32();
              break;
            }
            case 26: {
              crypto.proto.RLWE.challenges.Challenges.ContParams.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = params_.toBuilder();
              }
              params_ = input.readMessage(crypto.proto.RLWE.challenges.Challenges.ContParams.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(params_);
                params_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleContProduct>();
                mutable_bitField0_ |= 0x00000008;
              }
              samples_.add(input.readMessage(crypto.proto.RLWE.RLWE.SampleContProduct.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = java.util.Collections.unmodifiableList(samples_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceContProduct_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceContProduct_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.InstanceContProduct.class, crypto.proto.RLWE.challenges.Challenges.InstanceContProduct.Builder.class);
    }

    public static com.google.protobuf.Parser<InstanceContProduct> PARSER =
        new com.google.protobuf.AbstractParser<InstanceContProduct>() {
      public InstanceContProduct parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstanceContProduct(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InstanceContProduct> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHALLENGEID_FIELD_NUMBER = 1;
    private int challengeID_;
    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * challenge this instance belongs to
     * </pre>
     */
    public boolean hasChallengeID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 challengeID = 1;</code>
     *
     * <pre>
     * challenge this instance belongs to
     * </pre>
     */
    public int getChallengeID() {
      return challengeID_;
    }

    public static final int INSTANCEID_FIELD_NUMBER = 2;
    private int instanceID_;
    /**
     * <code>required int32 instanceID = 2;</code>
     *
     * <pre>
     * instance within the challenge
     * </pre>
     */
    public boolean hasInstanceID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 instanceID = 2;</code>
     *
     * <pre>
     * instance within the challenge
     * </pre>
     */
    public int getInstanceID() {
      return instanceID_;
    }

    public static final int PARAMS_FIELD_NUMBER = 3;
    private crypto.proto.RLWE.challenges.Challenges.ContParams params_;
    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    public boolean hasParams() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    public crypto.proto.RLWE.challenges.Challenges.ContParams getParams() {
      return params_;
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
     *
     * <pre>
     * problem params (self-containment)
     * </pre>
     */
    public crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder getParamsOrBuilder() {
      return params_;
    }

    public static final int SAMPLES_FIELD_NUMBER = 4;
    private java.util.List<crypto.proto.RLWE.RLWE.SampleContProduct> samples_;
    /**
     * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    public java.util.List<crypto.proto.RLWE.RLWE.SampleContProduct> getSamplesList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleContProductOrBuilder> 
        getSamplesOrBuilderList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    public int getSamplesCount() {
      return samples_.size();
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    public crypto.proto.RLWE.RLWE.SampleContProduct getSamples(int index) {
      return samples_.get(index);
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
     *
     * <pre>
     * the samples
     * </pre>
     */
    public crypto.proto.RLWE.RLWE.SampleContProductOrBuilder getSamplesOrBuilder(
        int index) {
      return samples_.get(index);
    }

    private void initFields() {
      challengeID_ = 0;
      instanceID_ = 0;
      params_ = crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
      samples_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChallengeID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInstanceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasParams()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getParams().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSamplesCount(); i++) {
        if (!getSamples(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        output.writeMessage(4, samples_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, samples_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.InstanceContProduct prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceContProduct}
     *
     * <pre>
     * continuous RLWE instance
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.InstanceContProduct)
        crypto.proto.RLWE.challenges.Challenges.InstanceContProductOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceContProduct_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceContProduct_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.InstanceContProduct.class, crypto.proto.RLWE.challenges.Challenges.InstanceContProduct.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.InstanceContProduct.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getParamsFieldBuilder();
          getSamplesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        challengeID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        instanceID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceContProduct_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceContProduct getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.InstanceContProduct.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceContProduct build() {
        crypto.proto.RLWE.challenges.Challenges.InstanceContProduct result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceContProduct buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.InstanceContProduct result = new crypto.proto.RLWE.challenges.Challenges.InstanceContProduct(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.challengeID_ = challengeID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.instanceID_ = instanceID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (paramsBuilder_ == null) {
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        if (samplesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            samples_ = java.util.Collections.unmodifiableList(samples_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.samples_ = samples_;
        } else {
          result.samples_ = samplesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.InstanceContProduct) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.InstanceContProduct)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.InstanceContProduct other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.InstanceContProduct.getDefaultInstance()) return this;
        if (other.hasChallengeID()) {
          setChallengeID(other.getChallengeID());
        }
        if (other.hasInstanceID()) {
          setInstanceID(other.getInstanceID());
        }
        if (other.hasParams()) {
          mergeParams(other.getParams());
        }
        if (samplesBuilder_ == null) {
          if (!other.samples_.isEmpty()) {
            if (samples_.isEmpty()) {
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureSamplesIsMutable();
              samples_.addAll(other.samples_);
            }
            onChanged();
          }
        } else {
          if (!other.samples_.isEmpty()) {
            if (samplesBuilder_.isEmpty()) {
              samplesBuilder_.dispose();
              samplesBuilder_ = null;
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
              samplesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSamplesFieldBuilder() : null;
            } else {
              samplesBuilder_.addAllMessages(other.samples_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChallengeID()) {
          
          return false;
        }
        if (!hasInstanceID()) {
          
          return false;
        }
        if (!hasParams()) {
          
          return false;
        }
        if (!getParams().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getSamplesCount(); i++) {
          if (!getSamples(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.InstanceContProduct parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.InstanceContProduct) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int challengeID_ ;
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * challenge this instance belongs to
       * </pre>
       */
      public boolean hasChallengeID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * challenge this instance belongs to
       * </pre>
       */
      public int getChallengeID() {
        return challengeID_;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * challenge this instance belongs to
       * </pre>
       */
      public Builder setChallengeID(int value) {
        bitField0_ |= 0x00000001;
        challengeID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       *
       * <pre>
       * challenge this instance belongs to
       * </pre>
       */
      public Builder clearChallengeID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        challengeID_ = 0;
        onChanged();
        return this;
      }

      private int instanceID_ ;
      /**
       * <code>required int32 instanceID = 2;</code>
       *
       * <pre>
       * instance within the challenge
       * </pre>
       */
      public boolean hasInstanceID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       *
       * <pre>
       * instance within the challenge
       * </pre>
       */
      public int getInstanceID() {
        return instanceID_;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       *
       * <pre>
       * instance within the challenge
       * </pre>
       */
      public Builder setInstanceID(int value) {
        bitField0_ |= 0x00000002;
        instanceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       *
       * <pre>
       * instance within the challenge
       * </pre>
       */
      public Builder clearInstanceID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        instanceID_ = 0;
        onChanged();
        return this;
      }

      private crypto.proto.RLWE.challenges.Challenges.ContParams params_ = crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.ContParams, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder, crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder> paramsBuilder_;
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public boolean hasParams() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public crypto.proto.RLWE.challenges.Challenges.ContParams getParams() {
        if (paramsBuilder_ == null) {
          return params_;
        } else {
          return paramsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public Builder setParams(crypto.proto.RLWE.challenges.Challenges.ContParams value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
          onChanged();
        } else {
          paramsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public Builder setParams(
          crypto.proto.RLWE.challenges.Challenges.ContParams.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          params_ = builderForValue.build();
          onChanged();
        } else {
          paramsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public Builder mergeParams(crypto.proto.RLWE.challenges.Challenges.ContParams value) {
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              params_ != crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance()) {
            params_ =
              crypto.proto.RLWE.challenges.Challenges.ContParams.newBuilder(params_).mergeFrom(value).buildPartial();
          } else {
            params_ = value;
          }
          onChanged();
        } else {
          paramsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.ContParams.getDefaultInstance();
          onChanged();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public crypto.proto.RLWE.challenges.Challenges.ContParams.Builder getParamsBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getParamsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      public crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder getParamsOrBuilder() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilder();
        } else {
          return params_;
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.ContParams params = 3;</code>
       *
       * <pre>
       * problem params (self-containment)
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.ContParams, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder, crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.RLWE.challenges.Challenges.ContParams, crypto.proto.RLWE.challenges.Challenges.ContParams.Builder, crypto.proto.RLWE.challenges.Challenges.ContParamsOrBuilder>(
                  getParams(),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }

      private java.util.List<crypto.proto.RLWE.RLWE.SampleContProduct> samples_ =
        java.util.Collections.emptyList();
      private void ensureSamplesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleContProduct>(samples_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleContProduct, crypto.proto.RLWE.RLWE.SampleContProduct.Builder, crypto.proto.RLWE.RLWE.SampleContProductOrBuilder> samplesBuilder_;

      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleContProduct> getSamplesList() {
        if (samplesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(samples_);
        } else {
          return samplesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public int getSamplesCount() {
        if (samplesBuilder_ == null) {
          return samples_.size();
        } else {
          return samplesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public crypto.proto.RLWE.RLWE.SampleContProduct getSamples(int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);
        } else {
          return samplesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleContProduct value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.set(index, value);
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleContProduct.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.set(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder addSamples(crypto.proto.RLWE.RLWE.SampleContProduct value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleContProduct value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(index, value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder addSamples(
          crypto.proto.RLWE.RLWE.SampleContProduct.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleContProduct.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder addAllSamples(
          java.lang.Iterable<? extends crypto.proto.RLWE.RLWE.SampleContProduct> values) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, samples_);
          onChanged();
        } else {
          samplesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder clearSamples() {
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public Builder removeSamples(int index) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.remove(index);
          onChanged();
        } else {
          samplesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public crypto.proto.RLWE.RLWE.SampleContProduct.Builder getSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public crypto.proto.RLWE.RLWE.SampleContProductOrBuilder getSamplesOrBuilder(
          int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);  } else {
          return samplesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleContProductOrBuilder> 
           getSamplesOrBuilderList() {
        if (samplesBuilder_ != null) {
          return samplesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(samples_);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public crypto.proto.RLWE.RLWE.SampleContProduct.Builder addSamplesBuilder() {
        return getSamplesFieldBuilder().addBuilder(
            crypto.proto.RLWE.RLWE.SampleContProduct.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public crypto.proto.RLWE.RLWE.SampleContProduct.Builder addSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().addBuilder(
            index, crypto.proto.RLWE.RLWE.SampleContProduct.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleContProduct samples = 4;</code>
       *
       * <pre>
       * the samples
       * </pre>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleContProduct.Builder> 
           getSamplesBuilderList() {
        return getSamplesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleContProduct, crypto.proto.RLWE.RLWE.SampleContProduct.Builder, crypto.proto.RLWE.RLWE.SampleContProductOrBuilder> 
          getSamplesFieldBuilder() {
        if (samplesBuilder_ == null) {
          samplesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              crypto.proto.RLWE.RLWE.SampleContProduct, crypto.proto.RLWE.RLWE.SampleContProduct.Builder, crypto.proto.RLWE.RLWE.SampleContProductOrBuilder>(
                  samples_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          samples_ = null;
        }
        return samplesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.InstanceContProduct)
    }

    static {
      defaultInstance = new InstanceContProduct(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.InstanceContProduct)
  }

  public interface InstanceDiscProductOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.InstanceDiscProduct)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 challengeID = 1;</code>
     */
    boolean hasChallengeID();
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    int getChallengeID();

    /**
     * <code>required int32 instanceID = 2;</code>
     */
    boolean hasInstanceID();
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    int getInstanceID();

    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    boolean hasParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.DiscParams getParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder getParamsOrBuilder();

    /**
     * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
     */
    java.util.List<crypto.proto.RLWE.RLWE.SampleDiscProduct> 
        getSamplesList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
     */
    crypto.proto.RLWE.RLWE.SampleDiscProduct getSamples(int index);
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
     */
    int getSamplesCount();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
     */
    java.util.List<? extends crypto.proto.RLWE.RLWE.SampleDiscProductOrBuilder> 
        getSamplesOrBuilderList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
     */
    crypto.proto.RLWE.RLWE.SampleDiscProductOrBuilder getSamplesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceDiscProduct}
   *
   * <pre>
   * discrete RLWE instance
   * </pre>
   */
  public static final class InstanceDiscProduct extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.InstanceDiscProduct)
      InstanceDiscProductOrBuilder {
    // Use InstanceDiscProduct.newBuilder() to construct.
    private InstanceDiscProduct(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InstanceDiscProduct(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InstanceDiscProduct defaultInstance;
    public static InstanceDiscProduct getDefaultInstance() {
      return defaultInstance;
    }

    public InstanceDiscProduct getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InstanceDiscProduct(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              challengeID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              instanceID_ = input.readInt32();
              break;
            }
            case 26: {
              crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = params_.toBuilder();
              }
              params_ = input.readMessage(crypto.proto.RLWE.challenges.Challenges.DiscParams.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(params_);
                params_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleDiscProduct>();
                mutable_bitField0_ |= 0x00000008;
              }
              samples_.add(input.readMessage(crypto.proto.RLWE.RLWE.SampleDiscProduct.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = java.util.Collections.unmodifiableList(samples_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceDiscProduct_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceDiscProduct_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct.class, crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct.Builder.class);
    }

    public static com.google.protobuf.Parser<InstanceDiscProduct> PARSER =
        new com.google.protobuf.AbstractParser<InstanceDiscProduct>() {
      public InstanceDiscProduct parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstanceDiscProduct(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InstanceDiscProduct> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHALLENGEID_FIELD_NUMBER = 1;
    private int challengeID_;
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public boolean hasChallengeID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public int getChallengeID() {
      return challengeID_;
    }

    public static final int INSTANCEID_FIELD_NUMBER = 2;
    private int instanceID_;
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public boolean hasInstanceID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public int getInstanceID() {
      return instanceID_;
    }

    public static final int PARAMS_FIELD_NUMBER = 3;
    private crypto.proto.RLWE.challenges.Challenges.DiscParams params_;
    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    public boolean hasParams() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.DiscParams getParams() {
      return params_;
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder getParamsOrBuilder() {
      return params_;
    }

    public static final int SAMPLES_FIELD_NUMBER = 4;
    private java.util.List<crypto.proto.RLWE.RLWE.SampleDiscProduct> samples_;
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
     */
    public java.util.List<crypto.proto.RLWE.RLWE.SampleDiscProduct> getSamplesList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
     */
    public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleDiscProductOrBuilder> 
        getSamplesOrBuilderList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
     */
    public int getSamplesCount() {
      return samples_.size();
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
     */
    public crypto.proto.RLWE.RLWE.SampleDiscProduct getSamples(int index) {
      return samples_.get(index);
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
     */
    public crypto.proto.RLWE.RLWE.SampleDiscProductOrBuilder getSamplesOrBuilder(
        int index) {
      return samples_.get(index);
    }

    private void initFields() {
      challengeID_ = 0;
      instanceID_ = 0;
      params_ = crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
      samples_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChallengeID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInstanceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasParams()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getParams().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSamplesCount(); i++) {
        if (!getSamples(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        output.writeMessage(4, samples_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, samples_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceDiscProduct}
     *
     * <pre>
     * discrete RLWE instance
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.InstanceDiscProduct)
        crypto.proto.RLWE.challenges.Challenges.InstanceDiscProductOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceDiscProduct_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceDiscProduct_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct.class, crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getParamsFieldBuilder();
          getSamplesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        challengeID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        instanceID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceDiscProduct_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct build() {
        crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct result = new crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.challengeID_ = challengeID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.instanceID_ = instanceID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (paramsBuilder_ == null) {
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        if (samplesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            samples_ = java.util.Collections.unmodifiableList(samples_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.samples_ = samples_;
        } else {
          result.samples_ = samplesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct.getDefaultInstance()) return this;
        if (other.hasChallengeID()) {
          setChallengeID(other.getChallengeID());
        }
        if (other.hasInstanceID()) {
          setInstanceID(other.getInstanceID());
        }
        if (other.hasParams()) {
          mergeParams(other.getParams());
        }
        if (samplesBuilder_ == null) {
          if (!other.samples_.isEmpty()) {
            if (samples_.isEmpty()) {
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureSamplesIsMutable();
              samples_.addAll(other.samples_);
            }
            onChanged();
          }
        } else {
          if (!other.samples_.isEmpty()) {
            if (samplesBuilder_.isEmpty()) {
              samplesBuilder_.dispose();
              samplesBuilder_ = null;
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
              samplesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSamplesFieldBuilder() : null;
            } else {
              samplesBuilder_.addAllMessages(other.samples_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChallengeID()) {
          
          return false;
        }
        if (!hasInstanceID()) {
          
          return false;
        }
        if (!hasParams()) {
          
          return false;
        }
        if (!getParams().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getSamplesCount(); i++) {
          if (!getSamples(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.InstanceDiscProduct) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int challengeID_ ;
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public boolean hasChallengeID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public int getChallengeID() {
        return challengeID_;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder setChallengeID(int value) {
        bitField0_ |= 0x00000001;
        challengeID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder clearChallengeID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        challengeID_ = 0;
        onChanged();
        return this;
      }

      private int instanceID_ ;
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public boolean hasInstanceID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public int getInstanceID() {
        return instanceID_;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder setInstanceID(int value) {
        bitField0_ |= 0x00000002;
        instanceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder clearInstanceID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        instanceID_ = 0;
        onChanged();
        return this;
      }

      private crypto.proto.RLWE.challenges.Challenges.DiscParams params_ = crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.DiscParams, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder, crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder> paramsBuilder_;
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public boolean hasParams() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.DiscParams getParams() {
        if (paramsBuilder_ == null) {
          return params_;
        } else {
          return paramsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public Builder setParams(crypto.proto.RLWE.challenges.Challenges.DiscParams value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
          onChanged();
        } else {
          paramsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public Builder setParams(
          crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          params_ = builderForValue.build();
          onChanged();
        } else {
          paramsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public Builder mergeParams(crypto.proto.RLWE.challenges.Challenges.DiscParams value) {
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              params_ != crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance()) {
            params_ =
              crypto.proto.RLWE.challenges.Challenges.DiscParams.newBuilder(params_).mergeFrom(value).buildPartial();
          } else {
            params_ = value;
          }
          onChanged();
        } else {
          paramsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.DiscParams.getDefaultInstance();
          onChanged();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder getParamsBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getParamsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder getParamsOrBuilder() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilder();
        } else {
          return params_;
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.DiscParams params = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.DiscParams, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder, crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.RLWE.challenges.Challenges.DiscParams, crypto.proto.RLWE.challenges.Challenges.DiscParams.Builder, crypto.proto.RLWE.challenges.Challenges.DiscParamsOrBuilder>(
                  getParams(),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }

      private java.util.List<crypto.proto.RLWE.RLWE.SampleDiscProduct> samples_ =
        java.util.Collections.emptyList();
      private void ensureSamplesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleDiscProduct>(samples_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleDiscProduct, crypto.proto.RLWE.RLWE.SampleDiscProduct.Builder, crypto.proto.RLWE.RLWE.SampleDiscProductOrBuilder> samplesBuilder_;

      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleDiscProduct> getSamplesList() {
        if (samplesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(samples_);
        } else {
          return samplesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public int getSamplesCount() {
        if (samplesBuilder_ == null) {
          return samples_.size();
        } else {
          return samplesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleDiscProduct getSamples(int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);
        } else {
          return samplesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleDiscProduct value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.set(index, value);
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleDiscProduct.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.set(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public Builder addSamples(crypto.proto.RLWE.RLWE.SampleDiscProduct value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleDiscProduct value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(index, value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public Builder addSamples(
          crypto.proto.RLWE.RLWE.SampleDiscProduct.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleDiscProduct.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public Builder addAllSamples(
          java.lang.Iterable<? extends crypto.proto.RLWE.RLWE.SampleDiscProduct> values) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, samples_);
          onChanged();
        } else {
          samplesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public Builder clearSamples() {
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public Builder removeSamples(int index) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.remove(index);
          onChanged();
        } else {
          samplesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleDiscProduct.Builder getSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleDiscProductOrBuilder getSamplesOrBuilder(
          int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);  } else {
          return samplesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleDiscProductOrBuilder> 
           getSamplesOrBuilderList() {
        if (samplesBuilder_ != null) {
          return samplesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(samples_);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleDiscProduct.Builder addSamplesBuilder() {
        return getSamplesFieldBuilder().addBuilder(
            crypto.proto.RLWE.RLWE.SampleDiscProduct.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleDiscProduct.Builder addSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().addBuilder(
            index, crypto.proto.RLWE.RLWE.SampleDiscProduct.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleDiscProduct samples = 4;</code>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleDiscProduct.Builder> 
           getSamplesBuilderList() {
        return getSamplesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleDiscProduct, crypto.proto.RLWE.RLWE.SampleDiscProduct.Builder, crypto.proto.RLWE.RLWE.SampleDiscProductOrBuilder> 
          getSamplesFieldBuilder() {
        if (samplesBuilder_ == null) {
          samplesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              crypto.proto.RLWE.RLWE.SampleDiscProduct, crypto.proto.RLWE.RLWE.SampleDiscProduct.Builder, crypto.proto.RLWE.RLWE.SampleDiscProductOrBuilder>(
                  samples_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          samples_ = null;
        }
        return samplesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.InstanceDiscProduct)
    }

    static {
      defaultInstance = new InstanceDiscProduct(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.InstanceDiscProduct)
  }

  public interface InstanceRLWRProductOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.InstanceRLWRProduct)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 challengeID = 1;</code>
     */
    boolean hasChallengeID();
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    int getChallengeID();

    /**
     * <code>required int32 instanceID = 2;</code>
     */
    boolean hasInstanceID();
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    int getInstanceID();

    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    boolean hasParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.RLWRParams getParams();
    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder getParamsOrBuilder();

    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
     */
    java.util.List<crypto.proto.RLWE.RLWE.SampleRLWRProduct> 
        getSamplesList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
     */
    crypto.proto.RLWE.RLWE.SampleRLWRProduct getSamples(int index);
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
     */
    int getSamplesCount();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
     */
    java.util.List<? extends crypto.proto.RLWE.RLWE.SampleRLWRProductOrBuilder> 
        getSamplesOrBuilderList();
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
     */
    crypto.proto.RLWE.RLWE.SampleRLWRProductOrBuilder getSamplesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceRLWRProduct}
   *
   * <pre>
   * RLWR instance
   * </pre>
   */
  public static final class InstanceRLWRProduct extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.InstanceRLWRProduct)
      InstanceRLWRProductOrBuilder {
    // Use InstanceRLWRProduct.newBuilder() to construct.
    private InstanceRLWRProduct(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private InstanceRLWRProduct(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final InstanceRLWRProduct defaultInstance;
    public static InstanceRLWRProduct getDefaultInstance() {
      return defaultInstance;
    }

    public InstanceRLWRProduct getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private InstanceRLWRProduct(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              challengeID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              instanceID_ = input.readInt32();
              break;
            }
            case 26: {
              crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = params_.toBuilder();
              }
              params_ = input.readMessage(crypto.proto.RLWE.challenges.Challenges.RLWRParams.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(params_);
                params_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleRLWRProduct>();
                mutable_bitField0_ |= 0x00000008;
              }
              samples_.add(input.readMessage(crypto.proto.RLWE.RLWE.SampleRLWRProduct.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = java.util.Collections.unmodifiableList(samples_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceRLWRProduct_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceRLWRProduct_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct.class, crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct.Builder.class);
    }

    public static com.google.protobuf.Parser<InstanceRLWRProduct> PARSER =
        new com.google.protobuf.AbstractParser<InstanceRLWRProduct>() {
      public InstanceRLWRProduct parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstanceRLWRProduct(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<InstanceRLWRProduct> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHALLENGEID_FIELD_NUMBER = 1;
    private int challengeID_;
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public boolean hasChallengeID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public int getChallengeID() {
      return challengeID_;
    }

    public static final int INSTANCEID_FIELD_NUMBER = 2;
    private int instanceID_;
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public boolean hasInstanceID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public int getInstanceID() {
      return instanceID_;
    }

    public static final int PARAMS_FIELD_NUMBER = 3;
    private crypto.proto.RLWE.challenges.Challenges.RLWRParams params_;
    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    public boolean hasParams() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.RLWRParams getParams() {
      return params_;
    }
    /**
     * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
     */
    public crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder getParamsOrBuilder() {
      return params_;
    }

    public static final int SAMPLES_FIELD_NUMBER = 4;
    private java.util.List<crypto.proto.RLWE.RLWE.SampleRLWRProduct> samples_;
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
     */
    public java.util.List<crypto.proto.RLWE.RLWE.SampleRLWRProduct> getSamplesList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
     */
    public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleRLWRProductOrBuilder> 
        getSamplesOrBuilderList() {
      return samples_;
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
     */
    public int getSamplesCount() {
      return samples_.size();
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
     */
    public crypto.proto.RLWE.RLWE.SampleRLWRProduct getSamples(int index) {
      return samples_.get(index);
    }
    /**
     * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
     */
    public crypto.proto.RLWE.RLWE.SampleRLWRProductOrBuilder getSamplesOrBuilder(
        int index) {
      return samples_.get(index);
    }

    private void initFields() {
      challengeID_ = 0;
      instanceID_ = 0;
      params_ = crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
      samples_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChallengeID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInstanceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasParams()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getParams().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getSamplesCount(); i++) {
        if (!getSamples(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        output.writeMessage(4, samples_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, params_);
      }
      for (int i = 0; i < samples_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, samples_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.InstanceRLWRProduct}
     *
     * <pre>
     * RLWR instance
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.InstanceRLWRProduct)
        crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProductOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceRLWRProduct_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceRLWRProduct_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct.class, crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getParamsFieldBuilder();
          getSamplesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        challengeID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        instanceID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_InstanceRLWRProduct_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct build() {
        crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct result = new crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.challengeID_ = challengeID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.instanceID_ = instanceID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (paramsBuilder_ == null) {
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        if (samplesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            samples_ = java.util.Collections.unmodifiableList(samples_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.samples_ = samples_;
        } else {
          result.samples_ = samplesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct.getDefaultInstance()) return this;
        if (other.hasChallengeID()) {
          setChallengeID(other.getChallengeID());
        }
        if (other.hasInstanceID()) {
          setInstanceID(other.getInstanceID());
        }
        if (other.hasParams()) {
          mergeParams(other.getParams());
        }
        if (samplesBuilder_ == null) {
          if (!other.samples_.isEmpty()) {
            if (samples_.isEmpty()) {
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureSamplesIsMutable();
              samples_.addAll(other.samples_);
            }
            onChanged();
          }
        } else {
          if (!other.samples_.isEmpty()) {
            if (samplesBuilder_.isEmpty()) {
              samplesBuilder_.dispose();
              samplesBuilder_ = null;
              samples_ = other.samples_;
              bitField0_ = (bitField0_ & ~0x00000008);
              samplesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getSamplesFieldBuilder() : null;
            } else {
              samplesBuilder_.addAllMessages(other.samples_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChallengeID()) {
          
          return false;
        }
        if (!hasInstanceID()) {
          
          return false;
        }
        if (!hasParams()) {
          
          return false;
        }
        if (!getParams().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getSamplesCount(); i++) {
          if (!getSamples(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.InstanceRLWRProduct) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int challengeID_ ;
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public boolean hasChallengeID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public int getChallengeID() {
        return challengeID_;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder setChallengeID(int value) {
        bitField0_ |= 0x00000001;
        challengeID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder clearChallengeID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        challengeID_ = 0;
        onChanged();
        return this;
      }

      private int instanceID_ ;
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public boolean hasInstanceID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public int getInstanceID() {
        return instanceID_;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder setInstanceID(int value) {
        bitField0_ |= 0x00000002;
        instanceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder clearInstanceID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        instanceID_ = 0;
        onChanged();
        return this;
      }

      private crypto.proto.RLWE.challenges.Challenges.RLWRParams params_ = crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.RLWRParams, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder, crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder> paramsBuilder_;
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public boolean hasParams() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.RLWRParams getParams() {
        if (paramsBuilder_ == null) {
          return params_;
        } else {
          return paramsBuilder_.getMessage();
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public Builder setParams(crypto.proto.RLWE.challenges.Challenges.RLWRParams value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          params_ = value;
          onChanged();
        } else {
          paramsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public Builder setParams(
          crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          params_ = builderForValue.build();
          onChanged();
        } else {
          paramsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public Builder mergeParams(crypto.proto.RLWE.challenges.Challenges.RLWRParams value) {
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              params_ != crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance()) {
            params_ =
              crypto.proto.RLWE.challenges.Challenges.RLWRParams.newBuilder(params_).mergeFrom(value).buildPartial();
          } else {
            params_ = value;
          }
          onChanged();
        } else {
          paramsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = crypto.proto.RLWE.challenges.Challenges.RLWRParams.getDefaultInstance();
          onChanged();
        } else {
          paramsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder getParamsBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getParamsFieldBuilder().getBuilder();
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      public crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder getParamsOrBuilder() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilder();
        } else {
          return params_;
        }
      }
      /**
       * <code>required .crypto.proto.RLWE.challenges.RLWRParams params = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.RLWE.challenges.Challenges.RLWRParams, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder, crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.RLWE.challenges.Challenges.RLWRParams, crypto.proto.RLWE.challenges.Challenges.RLWRParams.Builder, crypto.proto.RLWE.challenges.Challenges.RLWRParamsOrBuilder>(
                  getParams(),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }

      private java.util.List<crypto.proto.RLWE.RLWE.SampleRLWRProduct> samples_ =
        java.util.Collections.emptyList();
      private void ensureSamplesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          samples_ = new java.util.ArrayList<crypto.proto.RLWE.RLWE.SampleRLWRProduct>(samples_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleRLWRProduct, crypto.proto.RLWE.RLWE.SampleRLWRProduct.Builder, crypto.proto.RLWE.RLWE.SampleRLWRProductOrBuilder> samplesBuilder_;

      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleRLWRProduct> getSamplesList() {
        if (samplesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(samples_);
        } else {
          return samplesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public int getSamplesCount() {
        if (samplesBuilder_ == null) {
          return samples_.size();
        } else {
          return samplesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleRLWRProduct getSamples(int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);
        } else {
          return samplesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleRLWRProduct value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.set(index, value);
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public Builder setSamples(
          int index, crypto.proto.RLWE.RLWE.SampleRLWRProduct.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.set(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public Builder addSamples(crypto.proto.RLWE.RLWE.SampleRLWRProduct value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleRLWRProduct value) {
        if (samplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSamplesIsMutable();
          samples_.add(index, value);
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public Builder addSamples(
          crypto.proto.RLWE.RLWE.SampleRLWRProduct.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public Builder addSamples(
          int index, crypto.proto.RLWE.RLWE.SampleRLWRProduct.Builder builderForValue) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.add(index, builderForValue.build());
          onChanged();
        } else {
          samplesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public Builder addAllSamples(
          java.lang.Iterable<? extends crypto.proto.RLWE.RLWE.SampleRLWRProduct> values) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, samples_);
          onChanged();
        } else {
          samplesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public Builder clearSamples() {
        if (samplesBuilder_ == null) {
          samples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          samplesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public Builder removeSamples(int index) {
        if (samplesBuilder_ == null) {
          ensureSamplesIsMutable();
          samples_.remove(index);
          onChanged();
        } else {
          samplesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleRLWRProduct.Builder getSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleRLWRProductOrBuilder getSamplesOrBuilder(
          int index) {
        if (samplesBuilder_ == null) {
          return samples_.get(index);  } else {
          return samplesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public java.util.List<? extends crypto.proto.RLWE.RLWE.SampleRLWRProductOrBuilder> 
           getSamplesOrBuilderList() {
        if (samplesBuilder_ != null) {
          return samplesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(samples_);
        }
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleRLWRProduct.Builder addSamplesBuilder() {
        return getSamplesFieldBuilder().addBuilder(
            crypto.proto.RLWE.RLWE.SampleRLWRProduct.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public crypto.proto.RLWE.RLWE.SampleRLWRProduct.Builder addSamplesBuilder(
          int index) {
        return getSamplesFieldBuilder().addBuilder(
            index, crypto.proto.RLWE.RLWE.SampleRLWRProduct.getDefaultInstance());
      }
      /**
       * <code>repeated .crypto.proto.RLWE.SampleRLWRProduct samples = 4;</code>
       */
      public java.util.List<crypto.proto.RLWE.RLWE.SampleRLWRProduct.Builder> 
           getSamplesBuilderList() {
        return getSamplesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          crypto.proto.RLWE.RLWE.SampleRLWRProduct, crypto.proto.RLWE.RLWE.SampleRLWRProduct.Builder, crypto.proto.RLWE.RLWE.SampleRLWRProductOrBuilder> 
          getSamplesFieldBuilder() {
        if (samplesBuilder_ == null) {
          samplesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              crypto.proto.RLWE.RLWE.SampleRLWRProduct, crypto.proto.RLWE.RLWE.SampleRLWRProduct.Builder, crypto.proto.RLWE.RLWE.SampleRLWRProductOrBuilder>(
                  samples_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          samples_ = null;
        }
        return samplesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.InstanceRLWRProduct)
    }

    static {
      defaultInstance = new InstanceRLWRProduct(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.InstanceRLWRProduct)
  }

  public interface SecretOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.Secret)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 challengeID = 1;</code>
     */
    boolean hasChallengeID();
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    int getChallengeID();

    /**
     * <code>required int32 instanceID = 2;</code>
     */
    boolean hasInstanceID();
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    int getInstanceID();

    /**
     * <code>required int32 m = 3;</code>
     */
    boolean hasM();
    /**
     * <code>required int32 m = 3;</code>
     */
    int getM();

    /**
     * <code>required int64 q = 4;</code>
     */
    boolean hasQ();
    /**
     * <code>required int64 q = 4;</code>
     */
    long getQ();

    /**
     * <code>required bytes seed = 5;</code>
     */
    boolean hasSeed();
    /**
     * <code>required bytes seed = 5;</code>
     */
    com.google.protobuf.ByteString getSeed();

    /**
     * <code>required .crypto.proto.lol.Rq s = 6;</code>
     */
    boolean hasS();
    /**
     * <code>required .crypto.proto.lol.Rq s = 6;</code>
     */
    crypto.proto.lol.Lol.Rq getS();
    /**
     * <code>required .crypto.proto.lol.Rq s = 6;</code>
     */
    crypto.proto.lol.Lol.RqOrBuilder getSOrBuilder();
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.Secret}
   *
   * <pre>
   * a secret for an RLWE/RLWE instance
   * </pre>
   */
  public static final class Secret extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.Secret)
      SecretOrBuilder {
    // Use Secret.newBuilder() to construct.
    private Secret(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Secret(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Secret defaultInstance;
    public static Secret getDefaultInstance() {
      return defaultInstance;
    }

    public Secret getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Secret(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              challengeID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              instanceID_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              m_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              q_ = input.readInt64();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              seed_ = input.readBytes();
              break;
            }
            case 50: {
              crypto.proto.lol.Lol.Rq.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = s_.toBuilder();
              }
              s_ = input.readMessage(crypto.proto.lol.Lol.Rq.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(s_);
                s_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_Secret_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_Secret_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.Secret.class, crypto.proto.RLWE.challenges.Challenges.Secret.Builder.class);
    }

    public static com.google.protobuf.Parser<Secret> PARSER =
        new com.google.protobuf.AbstractParser<Secret>() {
      public Secret parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Secret(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Secret> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHALLENGEID_FIELD_NUMBER = 1;
    private int challengeID_;
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public boolean hasChallengeID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public int getChallengeID() {
      return challengeID_;
    }

    public static final int INSTANCEID_FIELD_NUMBER = 2;
    private int instanceID_;
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public boolean hasInstanceID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public int getInstanceID() {
      return instanceID_;
    }

    public static final int M_FIELD_NUMBER = 3;
    private int m_;
    /**
     * <code>required int32 m = 3;</code>
     */
    public boolean hasM() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 m = 3;</code>
     */
    public int getM() {
      return m_;
    }

    public static final int Q_FIELD_NUMBER = 4;
    private long q_;
    /**
     * <code>required int64 q = 4;</code>
     */
    public boolean hasQ() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int64 q = 4;</code>
     */
    public long getQ() {
      return q_;
    }

    public static final int SEED_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString seed_;
    /**
     * <code>required bytes seed = 5;</code>
     */
    public boolean hasSeed() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bytes seed = 5;</code>
     */
    public com.google.protobuf.ByteString getSeed() {
      return seed_;
    }

    public static final int S_FIELD_NUMBER = 6;
    private crypto.proto.lol.Lol.Rq s_;
    /**
     * <code>required .crypto.proto.lol.Rq s = 6;</code>
     */
    public boolean hasS() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required .crypto.proto.lol.Rq s = 6;</code>
     */
    public crypto.proto.lol.Lol.Rq getS() {
      return s_;
    }
    /**
     * <code>required .crypto.proto.lol.Rq s = 6;</code>
     */
    public crypto.proto.lol.Lol.RqOrBuilder getSOrBuilder() {
      return s_;
    }

    private void initFields() {
      challengeID_ = 0;
      instanceID_ = 0;
      m_ = 0;
      q_ = 0L;
      seed_ = com.google.protobuf.ByteString.EMPTY;
      s_ = crypto.proto.lol.Lol.Rq.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChallengeID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInstanceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasM()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasQ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSeed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getS().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, m_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, q_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, seed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, s_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, m_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, q_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, seed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, s_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.Secret parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Secret parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Secret parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Secret parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Secret parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Secret parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Secret parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Secret parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Secret parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.Secret parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.Secret prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.Secret}
     *
     * <pre>
     * a secret for an RLWE/RLWE instance
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.Secret)
        crypto.proto.RLWE.challenges.Challenges.SecretOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_Secret_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_Secret_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.Secret.class, crypto.proto.RLWE.challenges.Challenges.Secret.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.Secret.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        challengeID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        instanceID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        m_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        q_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        seed_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (sBuilder_ == null) {
          s_ = crypto.proto.lol.Lol.Rq.getDefaultInstance();
        } else {
          sBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_Secret_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.Secret getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.Secret.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.Secret build() {
        crypto.proto.RLWE.challenges.Challenges.Secret result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.Secret buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.Secret result = new crypto.proto.RLWE.challenges.Challenges.Secret(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.challengeID_ = challengeID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.instanceID_ = instanceID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.m_ = m_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.q_ = q_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.seed_ = seed_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (sBuilder_ == null) {
          result.s_ = s_;
        } else {
          result.s_ = sBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.Secret) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.Secret)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.Secret other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.Secret.getDefaultInstance()) return this;
        if (other.hasChallengeID()) {
          setChallengeID(other.getChallengeID());
        }
        if (other.hasInstanceID()) {
          setInstanceID(other.getInstanceID());
        }
        if (other.hasM()) {
          setM(other.getM());
        }
        if (other.hasQ()) {
          setQ(other.getQ());
        }
        if (other.hasSeed()) {
          setSeed(other.getSeed());
        }
        if (other.hasS()) {
          mergeS(other.getS());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChallengeID()) {
          
          return false;
        }
        if (!hasInstanceID()) {
          
          return false;
        }
        if (!hasM()) {
          
          return false;
        }
        if (!hasQ()) {
          
          return false;
        }
        if (!hasSeed()) {
          
          return false;
        }
        if (!hasS()) {
          
          return false;
        }
        if (!getS().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.Secret parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.Secret) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int challengeID_ ;
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public boolean hasChallengeID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public int getChallengeID() {
        return challengeID_;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder setChallengeID(int value) {
        bitField0_ |= 0x00000001;
        challengeID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder clearChallengeID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        challengeID_ = 0;
        onChanged();
        return this;
      }

      private int instanceID_ ;
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public boolean hasInstanceID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public int getInstanceID() {
        return instanceID_;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder setInstanceID(int value) {
        bitField0_ |= 0x00000002;
        instanceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder clearInstanceID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        instanceID_ = 0;
        onChanged();
        return this;
      }

      private int m_ ;
      /**
       * <code>required int32 m = 3;</code>
       */
      public boolean hasM() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 m = 3;</code>
       */
      public int getM() {
        return m_;
      }
      /**
       * <code>required int32 m = 3;</code>
       */
      public Builder setM(int value) {
        bitField0_ |= 0x00000004;
        m_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 m = 3;</code>
       */
      public Builder clearM() {
        bitField0_ = (bitField0_ & ~0x00000004);
        m_ = 0;
        onChanged();
        return this;
      }

      private long q_ ;
      /**
       * <code>required int64 q = 4;</code>
       */
      public boolean hasQ() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int64 q = 4;</code>
       */
      public long getQ() {
        return q_;
      }
      /**
       * <code>required int64 q = 4;</code>
       */
      public Builder setQ(long value) {
        bitField0_ |= 0x00000008;
        q_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 q = 4;</code>
       */
      public Builder clearQ() {
        bitField0_ = (bitField0_ & ~0x00000008);
        q_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString seed_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes seed = 5;</code>
       */
      public boolean hasSeed() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bytes seed = 5;</code>
       */
      public com.google.protobuf.ByteString getSeed() {
        return seed_;
      }
      /**
       * <code>required bytes seed = 5;</code>
       */
      public Builder setSeed(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        seed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes seed = 5;</code>
       */
      public Builder clearSeed() {
        bitField0_ = (bitField0_ & ~0x00000010);
        seed_ = getDefaultInstance().getSeed();
        onChanged();
        return this;
      }

      private crypto.proto.lol.Lol.Rq s_ = crypto.proto.lol.Lol.Rq.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.lol.Lol.Rq, crypto.proto.lol.Lol.Rq.Builder, crypto.proto.lol.Lol.RqOrBuilder> sBuilder_;
      /**
       * <code>required .crypto.proto.lol.Rq s = 6;</code>
       */
      public boolean hasS() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required .crypto.proto.lol.Rq s = 6;</code>
       */
      public crypto.proto.lol.Lol.Rq getS() {
        if (sBuilder_ == null) {
          return s_;
        } else {
          return sBuilder_.getMessage();
        }
      }
      /**
       * <code>required .crypto.proto.lol.Rq s = 6;</code>
       */
      public Builder setS(crypto.proto.lol.Lol.Rq value) {
        if (sBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          s_ = value;
          onChanged();
        } else {
          sBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .crypto.proto.lol.Rq s = 6;</code>
       */
      public Builder setS(
          crypto.proto.lol.Lol.Rq.Builder builderForValue) {
        if (sBuilder_ == null) {
          s_ = builderForValue.build();
          onChanged();
        } else {
          sBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .crypto.proto.lol.Rq s = 6;</code>
       */
      public Builder mergeS(crypto.proto.lol.Lol.Rq value) {
        if (sBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              s_ != crypto.proto.lol.Lol.Rq.getDefaultInstance()) {
            s_ =
              crypto.proto.lol.Lol.Rq.newBuilder(s_).mergeFrom(value).buildPartial();
          } else {
            s_ = value;
          }
          onChanged();
        } else {
          sBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .crypto.proto.lol.Rq s = 6;</code>
       */
      public Builder clearS() {
        if (sBuilder_ == null) {
          s_ = crypto.proto.lol.Lol.Rq.getDefaultInstance();
          onChanged();
        } else {
          sBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>required .crypto.proto.lol.Rq s = 6;</code>
       */
      public crypto.proto.lol.Lol.Rq.Builder getSBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getSFieldBuilder().getBuilder();
      }
      /**
       * <code>required .crypto.proto.lol.Rq s = 6;</code>
       */
      public crypto.proto.lol.Lol.RqOrBuilder getSOrBuilder() {
        if (sBuilder_ != null) {
          return sBuilder_.getMessageOrBuilder();
        } else {
          return s_;
        }
      }
      /**
       * <code>required .crypto.proto.lol.Rq s = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.lol.Lol.Rq, crypto.proto.lol.Lol.Rq.Builder, crypto.proto.lol.Lol.RqOrBuilder> 
          getSFieldBuilder() {
        if (sBuilder_ == null) {
          sBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.lol.Lol.Rq, crypto.proto.lol.Lol.Rq.Builder, crypto.proto.lol.Lol.RqOrBuilder>(
                  getS(),
                  getParentForChildren(),
                  isClean());
          s_ = null;
        }
        return sBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.Secret)
    }

    static {
      defaultInstance = new Secret(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.Secret)
  }

  public interface SecretProductOrBuilder extends
      // @@protoc_insertion_point(interface_extends:crypto.proto.RLWE.challenges.SecretProduct)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required int32 challengeID = 1;</code>
     */
    boolean hasChallengeID();
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    int getChallengeID();

    /**
     * <code>required int32 instanceID = 2;</code>
     */
    boolean hasInstanceID();
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    int getInstanceID();

    /**
     * <code>required int32 m = 3;</code>
     */
    boolean hasM();
    /**
     * <code>required int32 m = 3;</code>
     */
    int getM();

    /**
     * <code>required int64 q = 4;</code>
     */
    boolean hasQ();
    /**
     * <code>required int64 q = 4;</code>
     */
    long getQ();

    /**
     * <code>required bytes seed = 5;</code>
     */
    boolean hasSeed();
    /**
     * <code>required bytes seed = 5;</code>
     */
    com.google.protobuf.ByteString getSeed();

    /**
     * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
     */
    boolean hasS();
    /**
     * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
     */
    crypto.proto.lol.Lol.RqProduct getS();
    /**
     * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
     */
    crypto.proto.lol.Lol.RqProductOrBuilder getSOrBuilder();
  }
  /**
   * Protobuf type {@code crypto.proto.RLWE.challenges.SecretProduct}
   *
   * <pre>
   * a secret for an RLWE/RLWE instance
   * </pre>
   */
  public static final class SecretProduct extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:crypto.proto.RLWE.challenges.SecretProduct)
      SecretProductOrBuilder {
    // Use SecretProduct.newBuilder() to construct.
    private SecretProduct(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SecretProduct(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SecretProduct defaultInstance;
    public static SecretProduct getDefaultInstance() {
      return defaultInstance;
    }

    public SecretProduct getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SecretProduct(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              challengeID_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              instanceID_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              m_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              q_ = input.readInt64();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              seed_ = input.readBytes();
              break;
            }
            case 50: {
              crypto.proto.lol.Lol.RqProduct.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = s_.toBuilder();
              }
              s_ = input.readMessage(crypto.proto.lol.Lol.RqProduct.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(s_);
                s_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_SecretProduct_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_SecretProduct_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              crypto.proto.RLWE.challenges.Challenges.SecretProduct.class, crypto.proto.RLWE.challenges.Challenges.SecretProduct.Builder.class);
    }

    public static com.google.protobuf.Parser<SecretProduct> PARSER =
        new com.google.protobuf.AbstractParser<SecretProduct>() {
      public SecretProduct parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SecretProduct(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SecretProduct> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHALLENGEID_FIELD_NUMBER = 1;
    private int challengeID_;
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public boolean hasChallengeID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 challengeID = 1;</code>
     */
    public int getChallengeID() {
      return challengeID_;
    }

    public static final int INSTANCEID_FIELD_NUMBER = 2;
    private int instanceID_;
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public boolean hasInstanceID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 instanceID = 2;</code>
     */
    public int getInstanceID() {
      return instanceID_;
    }

    public static final int M_FIELD_NUMBER = 3;
    private int m_;
    /**
     * <code>required int32 m = 3;</code>
     */
    public boolean hasM() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 m = 3;</code>
     */
    public int getM() {
      return m_;
    }

    public static final int Q_FIELD_NUMBER = 4;
    private long q_;
    /**
     * <code>required int64 q = 4;</code>
     */
    public boolean hasQ() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int64 q = 4;</code>
     */
    public long getQ() {
      return q_;
    }

    public static final int SEED_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString seed_;
    /**
     * <code>required bytes seed = 5;</code>
     */
    public boolean hasSeed() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required bytes seed = 5;</code>
     */
    public com.google.protobuf.ByteString getSeed() {
      return seed_;
    }

    public static final int S_FIELD_NUMBER = 6;
    private crypto.proto.lol.Lol.RqProduct s_;
    /**
     * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
     */
    public boolean hasS() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
     */
    public crypto.proto.lol.Lol.RqProduct getS() {
      return s_;
    }
    /**
     * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
     */
    public crypto.proto.lol.Lol.RqProductOrBuilder getSOrBuilder() {
      return s_;
    }

    private void initFields() {
      challengeID_ = 0;
      instanceID_ = 0;
      m_ = 0;
      q_ = 0L;
      seed_ = com.google.protobuf.ByteString.EMPTY;
      s_ = crypto.proto.lol.Lol.RqProduct.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasChallengeID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInstanceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasM()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasQ()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSeed()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasS()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getS().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, m_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, q_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, seed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, s_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, challengeID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, instanceID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, m_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, q_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, seed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, s_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static crypto.proto.RLWE.challenges.Challenges.SecretProduct parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.SecretProduct parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.SecretProduct parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static crypto.proto.RLWE.challenges.Challenges.SecretProduct parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.SecretProduct parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.SecretProduct parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.SecretProduct parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.SecretProduct parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static crypto.proto.RLWE.challenges.Challenges.SecretProduct parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static crypto.proto.RLWE.challenges.Challenges.SecretProduct parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(crypto.proto.RLWE.challenges.Challenges.SecretProduct prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code crypto.proto.RLWE.challenges.SecretProduct}
     *
     * <pre>
     * a secret for an RLWE/RLWE instance
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:crypto.proto.RLWE.challenges.SecretProduct)
        crypto.proto.RLWE.challenges.Challenges.SecretProductOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_SecretProduct_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_SecretProduct_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                crypto.proto.RLWE.challenges.Challenges.SecretProduct.class, crypto.proto.RLWE.challenges.Challenges.SecretProduct.Builder.class);
      }

      // Construct using crypto.proto.RLWE.challenges.Challenges.SecretProduct.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        challengeID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        instanceID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        m_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        q_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        seed_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (sBuilder_ == null) {
          s_ = crypto.proto.lol.Lol.RqProduct.getDefaultInstance();
        } else {
          sBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return crypto.proto.RLWE.challenges.Challenges.internal_static_crypto_proto_RLWE_challenges_SecretProduct_descriptor;
      }

      public crypto.proto.RLWE.challenges.Challenges.SecretProduct getDefaultInstanceForType() {
        return crypto.proto.RLWE.challenges.Challenges.SecretProduct.getDefaultInstance();
      }

      public crypto.proto.RLWE.challenges.Challenges.SecretProduct build() {
        crypto.proto.RLWE.challenges.Challenges.SecretProduct result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public crypto.proto.RLWE.challenges.Challenges.SecretProduct buildPartial() {
        crypto.proto.RLWE.challenges.Challenges.SecretProduct result = new crypto.proto.RLWE.challenges.Challenges.SecretProduct(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.challengeID_ = challengeID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.instanceID_ = instanceID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.m_ = m_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.q_ = q_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.seed_ = seed_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (sBuilder_ == null) {
          result.s_ = s_;
        } else {
          result.s_ = sBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof crypto.proto.RLWE.challenges.Challenges.SecretProduct) {
          return mergeFrom((crypto.proto.RLWE.challenges.Challenges.SecretProduct)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(crypto.proto.RLWE.challenges.Challenges.SecretProduct other) {
        if (other == crypto.proto.RLWE.challenges.Challenges.SecretProduct.getDefaultInstance()) return this;
        if (other.hasChallengeID()) {
          setChallengeID(other.getChallengeID());
        }
        if (other.hasInstanceID()) {
          setInstanceID(other.getInstanceID());
        }
        if (other.hasM()) {
          setM(other.getM());
        }
        if (other.hasQ()) {
          setQ(other.getQ());
        }
        if (other.hasSeed()) {
          setSeed(other.getSeed());
        }
        if (other.hasS()) {
          mergeS(other.getS());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasChallengeID()) {
          
          return false;
        }
        if (!hasInstanceID()) {
          
          return false;
        }
        if (!hasM()) {
          
          return false;
        }
        if (!hasQ()) {
          
          return false;
        }
        if (!hasSeed()) {
          
          return false;
        }
        if (!hasS()) {
          
          return false;
        }
        if (!getS().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        crypto.proto.RLWE.challenges.Challenges.SecretProduct parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (crypto.proto.RLWE.challenges.Challenges.SecretProduct) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int challengeID_ ;
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public boolean hasChallengeID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public int getChallengeID() {
        return challengeID_;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder setChallengeID(int value) {
        bitField0_ |= 0x00000001;
        challengeID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 challengeID = 1;</code>
       */
      public Builder clearChallengeID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        challengeID_ = 0;
        onChanged();
        return this;
      }

      private int instanceID_ ;
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public boolean hasInstanceID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public int getInstanceID() {
        return instanceID_;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder setInstanceID(int value) {
        bitField0_ |= 0x00000002;
        instanceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 instanceID = 2;</code>
       */
      public Builder clearInstanceID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        instanceID_ = 0;
        onChanged();
        return this;
      }

      private int m_ ;
      /**
       * <code>required int32 m = 3;</code>
       */
      public boolean hasM() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 m = 3;</code>
       */
      public int getM() {
        return m_;
      }
      /**
       * <code>required int32 m = 3;</code>
       */
      public Builder setM(int value) {
        bitField0_ |= 0x00000004;
        m_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 m = 3;</code>
       */
      public Builder clearM() {
        bitField0_ = (bitField0_ & ~0x00000004);
        m_ = 0;
        onChanged();
        return this;
      }

      private long q_ ;
      /**
       * <code>required int64 q = 4;</code>
       */
      public boolean hasQ() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int64 q = 4;</code>
       */
      public long getQ() {
        return q_;
      }
      /**
       * <code>required int64 q = 4;</code>
       */
      public Builder setQ(long value) {
        bitField0_ |= 0x00000008;
        q_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 q = 4;</code>
       */
      public Builder clearQ() {
        bitField0_ = (bitField0_ & ~0x00000008);
        q_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString seed_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes seed = 5;</code>
       */
      public boolean hasSeed() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required bytes seed = 5;</code>
       */
      public com.google.protobuf.ByteString getSeed() {
        return seed_;
      }
      /**
       * <code>required bytes seed = 5;</code>
       */
      public Builder setSeed(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        seed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes seed = 5;</code>
       */
      public Builder clearSeed() {
        bitField0_ = (bitField0_ & ~0x00000010);
        seed_ = getDefaultInstance().getSeed();
        onChanged();
        return this;
      }

      private crypto.proto.lol.Lol.RqProduct s_ = crypto.proto.lol.Lol.RqProduct.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.lol.Lol.RqProduct, crypto.proto.lol.Lol.RqProduct.Builder, crypto.proto.lol.Lol.RqProductOrBuilder> sBuilder_;
      /**
       * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
       */
      public boolean hasS() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
       */
      public crypto.proto.lol.Lol.RqProduct getS() {
        if (sBuilder_ == null) {
          return s_;
        } else {
          return sBuilder_.getMessage();
        }
      }
      /**
       * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
       */
      public Builder setS(crypto.proto.lol.Lol.RqProduct value) {
        if (sBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          s_ = value;
          onChanged();
        } else {
          sBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
       */
      public Builder setS(
          crypto.proto.lol.Lol.RqProduct.Builder builderForValue) {
        if (sBuilder_ == null) {
          s_ = builderForValue.build();
          onChanged();
        } else {
          sBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
       */
      public Builder mergeS(crypto.proto.lol.Lol.RqProduct value) {
        if (sBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              s_ != crypto.proto.lol.Lol.RqProduct.getDefaultInstance()) {
            s_ =
              crypto.proto.lol.Lol.RqProduct.newBuilder(s_).mergeFrom(value).buildPartial();
          } else {
            s_ = value;
          }
          onChanged();
        } else {
          sBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
       */
      public Builder clearS() {
        if (sBuilder_ == null) {
          s_ = crypto.proto.lol.Lol.RqProduct.getDefaultInstance();
          onChanged();
        } else {
          sBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
       */
      public crypto.proto.lol.Lol.RqProduct.Builder getSBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getSFieldBuilder().getBuilder();
      }
      /**
       * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
       */
      public crypto.proto.lol.Lol.RqProductOrBuilder getSOrBuilder() {
        if (sBuilder_ != null) {
          return sBuilder_.getMessageOrBuilder();
        } else {
          return s_;
        }
      }
      /**
       * <code>required .crypto.proto.lol.RqProduct s = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          crypto.proto.lol.Lol.RqProduct, crypto.proto.lol.Lol.RqProduct.Builder, crypto.proto.lol.Lol.RqProductOrBuilder> 
          getSFieldBuilder() {
        if (sBuilder_ == null) {
          sBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              crypto.proto.lol.Lol.RqProduct, crypto.proto.lol.Lol.RqProduct.Builder, crypto.proto.lol.Lol.RqProductOrBuilder>(
                  getS(),
                  getParentForChildren(),
                  isClean());
          s_ = null;
        }
        return sBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:crypto.proto.RLWE.challenges.SecretProduct)
    }

    static {
      defaultInstance = new SecretProduct(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:crypto.proto.RLWE.challenges.SecretProduct)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_ContParams_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_ContParams_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_DiscParams_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_DiscParams_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_RLWRParams_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_RLWRParams_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_Challenge_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_Challenge_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_InstanceCont_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_InstanceCont_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_InstanceDisc_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_InstanceDisc_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_InstanceRLWR_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_InstanceRLWR_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_InstanceContProduct_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_InstanceContProduct_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_InstanceDiscProduct_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_InstanceDiscProduct_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_InstanceRLWRProduct_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_InstanceRLWRProduct_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_Secret_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_Secret_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_proto_RLWE_challenges_SecretProduct_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_crypto_proto_RLWE_challenges_SecretProduct_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\020Challenges.proto\022\034crypto.proto.RLWE.ch" +
      "allenges\032\tLol.proto\032\nRLWE.proto\"S\n\nContP" +
      "arams\022\t\n\001m\030\001 \002(\005\022\t\n\001q\030\002 \002(\003\022\014\n\004svar\030\003 \002(" +
      "\001\022\r\n\005bound\030\004 \002(\001\022\022\n\nnumSamples\030\005 \002(\005\"S\n\n" +
      "DiscParams\022\t\n\001m\030\001 \002(\005\022\t\n\001q\030\002 \002(\003\022\014\n\004svar" +
      "\030\003 \002(\001\022\r\n\005bound\030\004 \002(\003\022\022\n\nnumSamples\030\005 \002(" +
      "\005\"A\n\nRLWRParams\022\t\n\001m\030\001 \002(\005\022\t\n\001q\030\002 \002(\003\022\t\n" +
      "\001p\030\003 \002(\003\022\022\n\nnumSamples\030\004 \002(\005\"\242\002\n\tChallen" +
      "ge\022\023\n\013challengeID\030\001 \002(\005\022\024\n\014numInstances\030" +
      "\002 \002(\005\022\023\n\013beaconEpoch\030\003 \002(\003\022\024\n\014beaconOffs",
      "et\030\004 \002(\005\022;\n\007cparams\030\005 \001(\0132(.crypto.proto" +
      ".RLWE.challenges.ContParamsH\000\022;\n\007dparams" +
      "\030\006 \001(\0132(.crypto.proto.RLWE.challenges.Di" +
      "scParamsH\000\022;\n\007rparams\030\007 \001(\0132(.crypto.pro" +
      "to.RLWE.challenges.RLWRParamsH\000B\010\n\006param" +
      "s\"\241\001\n\014InstanceCont\022\023\n\013challengeID\030\001 \002(\005\022" +
      "\022\n\ninstanceID\030\002 \002(\005\0228\n\006params\030\003 \002(\0132(.cr" +
      "ypto.proto.RLWE.challenges.ContParams\022.\n" +
      "\007samples\030\004 \003(\0132\035.crypto.proto.RLWE.Sampl" +
      "eCont\"\241\001\n\014InstanceDisc\022\023\n\013challengeID\030\001 ",
      "\002(\005\022\022\n\ninstanceID\030\002 \002(\005\0228\n\006params\030\003 \002(\0132" +
      "(.crypto.proto.RLWE.challenges.DiscParam" +
      "s\022.\n\007samples\030\004 \003(\0132\035.crypto.proto.RLWE.S" +
      "ampleDisc\"\241\001\n\014InstanceRLWR\022\023\n\013challengeI" +
      "D\030\001 \002(\005\022\022\n\ninstanceID\030\002 \002(\005\0228\n\006params\030\003 " +
      "\002(\0132(.crypto.proto.RLWE.challenges.RLWRP" +
      "arams\022.\n\007samples\030\004 \003(\0132\035.crypto.proto.RL" +
      "WE.SampleRLWR\"\257\001\n\023InstanceContProduct\022\023\n" +
      "\013challengeID\030\001 \002(\005\022\022\n\ninstanceID\030\002 \002(\005\0228" +
      "\n\006params\030\003 \002(\0132(.crypto.proto.RLWE.chall",
      "enges.ContParams\0225\n\007samples\030\004 \003(\0132$.cryp" +
      "to.proto.RLWE.SampleContProduct\"\257\001\n\023Inst" +
      "anceDiscProduct\022\023\n\013challengeID\030\001 \002(\005\022\022\n\n" +
      "instanceID\030\002 \002(\005\0228\n\006params\030\003 \002(\0132(.crypt" +
      "o.proto.RLWE.challenges.DiscParams\0225\n\007sa" +
      "mples\030\004 \003(\0132$.crypto.proto.RLWE.SampleDi" +
      "scProduct\"\257\001\n\023InstanceRLWRProduct\022\023\n\013cha" +
      "llengeID\030\001 \002(\005\022\022\n\ninstanceID\030\002 \002(\005\0228\n\006pa" +
      "rams\030\003 \002(\0132(.crypto.proto.RLWE.challenge" +
      "s.RLWRParams\0225\n\007samples\030\004 \003(\0132$.crypto.p",
      "roto.RLWE.SampleRLWRProduct\"v\n\006Secret\022\023\n" +
      "\013challengeID\030\001 \002(\005\022\022\n\ninstanceID\030\002 \002(\005\022\t" +
      "\n\001m\030\003 \002(\005\022\t\n\001q\030\004 \002(\003\022\014\n\004seed\030\005 \002(\014\022\037\n\001s\030" +
      "\006 \002(\0132\024.crypto.proto.lol.Rq\"\204\001\n\rSecretPr" +
      "oduct\022\023\n\013challengeID\030\001 \002(\005\022\022\n\ninstanceID" +
      "\030\002 \002(\005\022\t\n\001m\030\003 \002(\005\022\t\n\001q\030\004 \002(\003\022\014\n\004seed\030\005 \002" +
      "(\014\022&\n\001s\030\006 \002(\0132\033.crypto.proto.lol.RqProdu" +
      "ct"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          crypto.proto.lol.Lol.getDescriptor(),
          crypto.proto.RLWE.RLWE.getDescriptor(),
        }, assigner);
    internal_static_crypto_proto_RLWE_challenges_ContParams_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_crypto_proto_RLWE_challenges_ContParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_ContParams_descriptor,
        new java.lang.String[] { "M", "Q", "Svar", "Bound", "NumSamples", });
    internal_static_crypto_proto_RLWE_challenges_DiscParams_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_crypto_proto_RLWE_challenges_DiscParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_DiscParams_descriptor,
        new java.lang.String[] { "M", "Q", "Svar", "Bound", "NumSamples", });
    internal_static_crypto_proto_RLWE_challenges_RLWRParams_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_crypto_proto_RLWE_challenges_RLWRParams_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_RLWRParams_descriptor,
        new java.lang.String[] { "M", "Q", "P", "NumSamples", });
    internal_static_crypto_proto_RLWE_challenges_Challenge_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_crypto_proto_RLWE_challenges_Challenge_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_Challenge_descriptor,
        new java.lang.String[] { "ChallengeID", "NumInstances", "BeaconEpoch", "BeaconOffset", "Cparams", "Dparams", "Rparams", "Params", });
    internal_static_crypto_proto_RLWE_challenges_InstanceCont_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_crypto_proto_RLWE_challenges_InstanceCont_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_InstanceCont_descriptor,
        new java.lang.String[] { "ChallengeID", "InstanceID", "Params", "Samples", });
    internal_static_crypto_proto_RLWE_challenges_InstanceDisc_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_crypto_proto_RLWE_challenges_InstanceDisc_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_InstanceDisc_descriptor,
        new java.lang.String[] { "ChallengeID", "InstanceID", "Params", "Samples", });
    internal_static_crypto_proto_RLWE_challenges_InstanceRLWR_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_crypto_proto_RLWE_challenges_InstanceRLWR_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_InstanceRLWR_descriptor,
        new java.lang.String[] { "ChallengeID", "InstanceID", "Params", "Samples", });
    internal_static_crypto_proto_RLWE_challenges_InstanceContProduct_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_crypto_proto_RLWE_challenges_InstanceContProduct_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_InstanceContProduct_descriptor,
        new java.lang.String[] { "ChallengeID", "InstanceID", "Params", "Samples", });
    internal_static_crypto_proto_RLWE_challenges_InstanceDiscProduct_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_crypto_proto_RLWE_challenges_InstanceDiscProduct_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_InstanceDiscProduct_descriptor,
        new java.lang.String[] { "ChallengeID", "InstanceID", "Params", "Samples", });
    internal_static_crypto_proto_RLWE_challenges_InstanceRLWRProduct_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_crypto_proto_RLWE_challenges_InstanceRLWRProduct_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_InstanceRLWRProduct_descriptor,
        new java.lang.String[] { "ChallengeID", "InstanceID", "Params", "Samples", });
    internal_static_crypto_proto_RLWE_challenges_Secret_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_crypto_proto_RLWE_challenges_Secret_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_Secret_descriptor,
        new java.lang.String[] { "ChallengeID", "InstanceID", "M", "Q", "Seed", "S", });
    internal_static_crypto_proto_RLWE_challenges_SecretProduct_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_crypto_proto_RLWE_challenges_SecretProduct_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_crypto_proto_RLWE_challenges_SecretProduct_descriptor,
        new java.lang.String[] { "ChallengeID", "InstanceID", "M", "Q", "Seed", "S", });
    crypto.proto.lol.Lol.getDescriptor();
    crypto.proto.RLWE.RLWE.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
