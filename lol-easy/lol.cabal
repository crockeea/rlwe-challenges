name:                lol
-- The package version.  See the Haskell package versioning policy (PVP)
-- for standards guiding when and how versions should be incremented.
-- http://www.haskell.org/haskellwiki/Package_versioning_policy
-- PVP summary:      +-+------- breaking API changes
--                   | | +----- non-breaking API additions
--                   | | | +--- code changes with no API change
version:             0.5.0.2
synopsis:            A library for lattice cryptography.
homepage:            https://github.com/cpeikert/Lol
Bug-Reports:         https://github.com/cpeikert/Lol/issues
license:             GPL-2
license-file:        LICENSE
author:              Eric Crockett <ecrockett0@gmail.com>, Chris Peikert <cpeikert@alum.mit.edu>
maintainer:          Eric Crockett <ecrockett0@gmail.com>
copyright:           Eric Crockett, Chris Peikert
category:            Crypto
stability:           experimental
build-type:          Simple
extra-source-files:  README, CHANGES.md
cabal-version:       >= 1.10
description:
    Λ ∘ λ (Lol) is a general-purpose library for ring-based lattice cryptography.
    For a detailed description of interfaces and functionality, see
    <https://eprint.iacr.org/2015/1134 Λ ∘ λ: Functional Lattice Cryptography>.
    For example cryptographic applications, see <https://hackage.haskell.org/package/lol-apps lol-apps>.
source-repository head
  type: git
  location: https://github.com/cpeikert/Lol

-- For information on compiling C with cabal: http://blog.ezyang.com/2010/06/setting-up-cabal-the-ffi-and-c2hs/

Flag llvm
  Description:  Compile via LLVM. This produces much better object code,
                but you need to have the LLVM compiler installed.
  -- If you enable this and get errors like "Error: can't resolve `.rodata' {.rodata section}"
  -- then GHC doesn't like your version of LLVM!
  Default:      False

Flag opt
  Description: Turn on library optimizations
  Default:     True

library
  default-language:   Haskell2010
  ghc-options: -fwarn-dodgy-imports

  if flag(llvm)
    ghc-options: -fllvm -optlo-O3

  -- ghc optimizations
  if flag(opt)
    -- makes lift much faster!
    ghc-options: -funfolding-use-threshold1000
  exposed-modules:
    Crypto.Lol
    Crypto.Lol.Types
    Crypto.Lol.Factored
    Crypto.Lol.Reflects
    Crypto.Lol.CRTrans
    Crypto.Lol.Gadget
    Crypto.Lol.Prelude

    Crypto.Lol.Cyclotomic.Cyc
    Crypto.Lol.Cyclotomic.UCyc
    Crypto.Lol.Cyclotomic.RescaleCyc
    Crypto.Lol.Cyclotomic.Linear

    Crypto.Lol.RLWE.Continuous
    Crypto.Lol.RLWE.Discrete
    Crypto.Lol.RLWE.RLWR

    Crypto.Lol.Cyclotomic.Tensor
    Crypto.Lol.Types.Random
    Crypto.Lol.Types.FiniteField
    Crypto.Lol.Types.IrreducibleChar2
    Crypto.Lol.Types.Proto
    Crypto.Lol.Types.RRq
    Crypto.Lol.Types.ZPP
    Crypto.Lol.Types.ZqBasic

    Crypto.Proto.RLWE
    Crypto.Proto.RLWE.Rq
    Crypto.Proto.RLWE.Kq
    Crypto.Proto.RLWE.SampleCont
    Crypto.Proto.RLWE.SampleDisc
    Crypto.Proto.RLWE.SampleRLWR

    Crypto.Lol.Utils.GenArgs
    Crypto.Lol.Utils.ShowType

  other-modules:
    Crypto.Lol.PosBin
    Crypto.Lol.FactoredDefs
    Crypto.Lol.PosBinDefs
    Crypto.Lol.GaussRandom
    Crypto.Lol.Types.ZmStar
    Crypto.Lol.Types.Complex
    Crypto.Lol.Types.Numeric
    Crypto.Lol.Types.IZipVector
    Crypto.Lol.Cyclotomic.CRTSentinel

  build-depends:
    arithmoi >= 0.4.1.3 && <0.5,
    base>=4.8 && <5,
    bytestring,
    constraints,
    containers >= 0.5.6.2 && < 0.6,
    crypto-api,
    data-default >= 0.3.0 && < 0.8,
    deepseq >= 1.4.1.1 && <1.5,
    monadcryptorandom,
    MonadRandom >= 0.2 && < 0.5,
    mtl >= 2.2.1 && < 2.3,
    numeric-prelude >= 0.4.2 && < 0.5,
    protocol-buffers,
    protocol-buffers-descriptor,
    random >= 1.1 && < 1.2,
    reflection >= 1.5.1 && < 2.2,
    singletons >= 1.1.2.1 && < 2.3,
    th-desugar >= 1.5.4 && < 1.7,
    tagged-transformer >= 0.7 && < 0.9,
    template-haskell  >=  2.2.0.0,
    transformers >= 0.4.2.0 && < 0.6,
    vector==0.11.*,
    vector-th-unbox >= 0.2.1.0 && < 0.3

  other-extensions: TemplateHaskell

Benchmark bench-lol-cpp
  type:               exitcode-stdio-1.0
  default-language:   Haskell2010
  main-is:            Main.hs
  hs-source-dirs:     benchmarks

  ghc-options: -O2 -funfolding-creation-threshold=15000 -funfolding-use-threshold=1000

  build-depends:
    lol-benches

test-suite test-lol-cpp
  type:               exitcode-stdio-1.0
  default-language:   Haskell2010
  main-is:            Main.hs
  hs-source-dirs:     tests
  ghc-options:        -threaded -O2

  build-depends:
    lol-tests